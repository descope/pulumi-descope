// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectConnectorsNewrelic
    {
        /// <summary>
        /// Ingest License Key of the account you want to report data to.
        /// </summary>
        public readonly string ApiKey;
        public readonly bool? AuditEnabled;
        public readonly ImmutableArray<Outputs.ProjectConnectorsNewrelicAuditFilter> AuditFilters;
        /// <summary>
        /// The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
        /// </summary>
        public readonly string? DataCenter;
        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        public readonly string? Description;
        public readonly string? Id;
        /// <summary>
        /// Specify a custom prefix for all log fields. The default prefix is `descope.`.
        /// </summary>
        public readonly string? LogsPrefix;
        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable this option to use a custom prefix for log fields.
        /// </summary>
        public readonly bool? OverrideLogsPrefix;
        public readonly bool? TroubleshootLogEnabled;

        [OutputConstructor]
        private ProjectConnectorsNewrelic(
            string apiKey,

            bool? auditEnabled,

            ImmutableArray<Outputs.ProjectConnectorsNewrelicAuditFilter> auditFilters,

            string? dataCenter,

            string? description,

            string? id,

            string? logsPrefix,

            string name,

            bool? overrideLogsPrefix,

            bool? troubleshootLogEnabled)
        {
            ApiKey = apiKey;
            AuditEnabled = auditEnabled;
            AuditFilters = auditFilters;
            DataCenter = dataCenter;
            Description = description;
            Id = id;
            LogsPrefix = logsPrefix;
            Name = name;
            OverrideLogsPrefix = overrideLogsPrefix;
            TroubleshootLogEnabled = troubleshootLogEnabled;
        }
    }
}
