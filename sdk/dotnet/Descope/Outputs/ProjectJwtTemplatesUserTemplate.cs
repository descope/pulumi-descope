// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectJwtTemplatesUserTemplate
    {
        /// <summary>
        /// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
        /// </summary>
        public readonly string? AuthSchema;
        /// <summary>
        /// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
        /// </summary>
        public readonly bool? AutoTenantClaim;
        /// <summary>
        /// Whether to use OIDC conformance for the JWT issuer field.
        /// </summary>
        public readonly bool? ConformanceIssuer;
        /// <summary>
        /// Description of the JWT Template.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Policy for empty claims - `none`, `nil` or `delete`.
        /// </summary>
        public readonly string? EmptyClaimPolicy;
        /// <summary>
        /// Whether to enforce that the JWT issuer matches the project configuration.
        /// </summary>
        public readonly bool? EnforceIssuer;
        public readonly string? Id;
        /// <summary>
        /// Name of the JWT Template.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
        /// </summary>
        public readonly string Template;

        [OutputConstructor]
        private ProjectJwtTemplatesUserTemplate(
            string? authSchema,

            bool? autoTenantClaim,

            bool? conformanceIssuer,

            string? description,

            string? emptyClaimPolicy,

            bool? enforceIssuer,

            string? id,

            string name,

            string template)
        {
            AuthSchema = authSchema;
            AutoTenantClaim = autoTenantClaim;
            ConformanceIssuer = conformanceIssuer;
            Description = description;
            EmptyClaimPolicy = emptyClaimPolicy;
            EnforceIssuer = enforceIssuer;
            Id = id;
            Name = name;
            Template = template;
        }
    }
}
