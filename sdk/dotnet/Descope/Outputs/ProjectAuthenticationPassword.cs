// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectAuthenticationPassword
    {
        /// <summary>
        /// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
        /// </summary>
        public readonly bool? Disabled;
        /// <summary>
        /// Settings related to sending password reset emails as part of the password feature.
        /// </summary>
        public readonly Outputs.ProjectAuthenticationPasswordEmailService? EmailService;
        /// <summary>
        /// Whether users are required to change their password periodically.
        /// </summary>
        public readonly bool? Expiration;
        /// <summary>
        /// The number of weeks after which a user's password expires and they need to replace it.
        /// </summary>
        public readonly int? ExpirationWeeks;
        /// <summary>
        /// Whether the user account should be locked after a specified number of failed login attempts.
        /// </summary>
        public readonly bool? Lock;
        /// <summary>
        /// The number of failed login attempts allowed before an account is locked.
        /// </summary>
        public readonly int? LockAttempts;
        /// <summary>
        /// Whether passwords must contain at least one lowercase letter.
        /// </summary>
        public readonly bool? Lowercase;
        /// <summary>
        /// The minimum length of the password that users are required to use. The maximum length is always `64`.
        /// </summary>
        public readonly int? MinLength;
        /// <summary>
        /// Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
        /// </summary>
        public readonly bool? NonAlphanumeric;
        /// <summary>
        /// Whether passwords must contain at least one number.
        /// </summary>
        public readonly bool? Number;
        /// <summary>
        /// Whether to forbid password reuse when users change their password.
        /// </summary>
        public readonly bool? Reuse;
        /// <summary>
        /// The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
        /// </summary>
        public readonly int? ReuseAmount;
        /// <summary>
        /// Whether passwords must contain at least one uppercase letter.
        /// </summary>
        public readonly bool? Uppercase;

        [OutputConstructor]
        private ProjectAuthenticationPassword(
            bool? disabled,

            Outputs.ProjectAuthenticationPasswordEmailService? emailService,

            bool? expiration,

            int? expirationWeeks,

            bool? @lock,

            int? lockAttempts,

            bool? lowercase,

            int? minLength,

            bool? nonAlphanumeric,

            bool? number,

            bool? reuse,

            int? reuseAmount,

            bool? uppercase)
        {
            Disabled = disabled;
            EmailService = emailService;
            Expiration = expiration;
            ExpirationWeeks = expirationWeeks;
            Lock = @lock;
            LockAttempts = lockAttempts;
            Lowercase = lowercase;
            MinLength = minLength;
            NonAlphanumeric = nonAlphanumeric;
            Number = number;
            Reuse = reuse;
            ReuseAmount = reuseAmount;
            Uppercase = uppercase;
        }
    }
}
