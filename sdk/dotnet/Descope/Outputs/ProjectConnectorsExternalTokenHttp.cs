// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectConnectorsExternalTokenHttp
    {
        /// <summary>
        /// Authentication Information
        /// </summary>
        public readonly Outputs.ProjectConnectorsExternalTokenHttpAuthentication? Authentication;
        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The endpoint to get the token from (Using POST method). Descope will send the user information in the body of the request, and should return a JSON response with a 'token' string field.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The headers to send with the request
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Headers;
        /// <summary>
        /// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
        /// </summary>
        public readonly string? HmacSecret;
        public readonly string? Id;
        /// <summary>
        /// Will ignore certificate errors raised by the client
        /// </summary>
        public readonly bool? Insecure;
        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether the connector should send all requests from specific static IPs.
        /// </summary>
        public readonly bool? UseStaticIps;

        [OutputConstructor]
        private ProjectConnectorsExternalTokenHttp(
            Outputs.ProjectConnectorsExternalTokenHttpAuthentication? authentication,

            string? description,

            string endpoint,

            ImmutableDictionary<string, string>? headers,

            string? hmacSecret,

            string? id,

            bool? insecure,

            string name,

            bool? useStaticIps)
        {
            Authentication = authentication;
            Description = description;
            Endpoint = endpoint;
            Headers = headers;
            HmacSecret = hmacSecret;
            Id = id;
            Insecure = insecure;
            Name = name;
            UseStaticIps = useStaticIps;
        }
    }
}
