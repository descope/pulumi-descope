// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectConnectorsSupabase
    {
        /// <summary>
        /// The authentication type to use.
        /// </summary>
        public readonly string? AuthType;
        /// <summary>
        /// Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
        /// </summary>
        public readonly bool? CreateUsers;
        /// <summary>
        /// A mapping of Descope user fields or JWT claims to Supabase custom claims
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CustomClaimsMapping;
        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The duration in minutes for which the token is valid.
        /// </summary>
        public readonly double? ExpirationTime;
        public readonly string? Id;
        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
        /// </summary>
        public readonly string? PrivateKey;
        /// <summary>
        /// Your Supabase Project's API base URL, e.g.: https://\n\n.supabase.co.
        /// </summary>
        public readonly string? ProjectBaseUrl;
        /// <summary>
        /// The service role API key for your Supabase project, required to create users.
        /// </summary>
        public readonly string? ServiceRoleApiKey;
        /// <summary>
        /// The signing secret for your Supabase project.
        /// </summary>
        public readonly string? SigningSecret;

        [OutputConstructor]
        private ProjectConnectorsSupabase(
            string? authType,

            bool? createUsers,

            ImmutableDictionary<string, string>? customClaimsMapping,

            string? description,

            double? expirationTime,

            string? id,

            string name,

            string? privateKey,

            string? projectBaseUrl,

            string? serviceRoleApiKey,

            string? signingSecret)
        {
            AuthType = authType;
            CreateUsers = createUsers;
            CustomClaimsMapping = customClaimsMapping;
            Description = description;
            ExpirationTime = expirationTime;
            Id = id;
            Name = name;
            PrivateKey = privateKey;
            ProjectBaseUrl = projectBaseUrl;
            ServiceRoleApiKey = serviceRoleApiKey;
            SigningSecret = signingSecret;
        }
    }
}
