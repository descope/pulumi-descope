// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectAuthenticationOauthSystemDiscord
    {
        /// <summary>
        /// The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
        /// </summary>
        public readonly ImmutableArray<string> AllowedGrantTypes;
        /// <summary>
        /// The URL that users are redirected to for authorization with the OAuth provider.
        /// </summary>
        public readonly string? AuthorizationEndpoint;
        public readonly ImmutableDictionary<string, string>? ClaimMapping;
        /// <summary>
        /// The client ID for the OAuth provider, used to identify the application to the provider.
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// The client secret for the OAuth provider, used to authenticate the application with the provider.
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// A brief description of the OAuth provider.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
        /// </summary>
        public readonly bool? Disabled;
        public readonly string? Issuer;
        /// <summary>
        /// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
        /// </summary>
        public readonly string? JwksEndpoint;
        /// <summary>
        /// The URL of the logo associated with the OAuth provider.
        /// </summary>
        public readonly string? Logo;
        /// <summary>
        /// Whether to merge existing user accounts with new ones created through OAuth authentication.
        /// </summary>
        public readonly bool? MergeUserAccounts;
        /// <summary>
        /// Custom prompts or consent screens that users may see during OAuth authentication.
        /// </summary>
        public readonly ImmutableArray<string> Prompts;
        /// <summary>
        /// Settings related to token management for the OAuth provider.
        /// </summary>
        public readonly Outputs.ProjectAuthenticationOauthSystemDiscordProviderTokenManagement? ProviderTokenManagement;
        /// <summary>
        /// Scopes of access that the application requests from the user's account on the OAuth provider.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// The URL where the application requests an access token from the OAuth provider.
        /// </summary>
        public readonly string? TokenEndpoint;
        /// <summary>
        /// The URL where the application retrieves user information from the OAuth provider.
        /// </summary>
        public readonly string? UserInfoEndpoint;

        [OutputConstructor]
        private ProjectAuthenticationOauthSystemDiscord(
            ImmutableArray<string> allowedGrantTypes,

            string? authorizationEndpoint,

            ImmutableDictionary<string, string>? claimMapping,

            string? clientId,

            string? clientSecret,

            string? description,

            bool? disabled,

            string? issuer,

            string? jwksEndpoint,

            string? logo,

            bool? mergeUserAccounts,

            ImmutableArray<string> prompts,

            Outputs.ProjectAuthenticationOauthSystemDiscordProviderTokenManagement? providerTokenManagement,

            ImmutableArray<string> scopes,

            string? tokenEndpoint,

            string? userInfoEndpoint)
        {
            AllowedGrantTypes = allowedGrantTypes;
            AuthorizationEndpoint = authorizationEndpoint;
            ClaimMapping = claimMapping;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Description = description;
            Disabled = disabled;
            Issuer = issuer;
            JwksEndpoint = jwksEndpoint;
            Logo = logo;
            MergeUserAccounts = mergeUserAccounts;
            Prompts = prompts;
            ProviderTokenManagement = providerTokenManagement;
            Scopes = scopes;
            TokenEndpoint = tokenEndpoint;
            UserInfoEndpoint = userInfoEndpoint;
        }
    }
}
