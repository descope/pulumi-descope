// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Outputs
{

    [OutputType]
    public sealed class ProjectConnectorsLokalise
    {
        /// <summary>
        /// Lokalise API token.
        /// </summary>
        public readonly string ApiToken;
        /// <summary>
        /// (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
        /// </summary>
        public readonly string? CardId;
        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        public readonly string? Description;
        public readonly string? Id;
        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Lokalise project ID.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Lokalise team ID. If not provided, the oldest available team will be used.
        /// </summary>
        public readonly string? TeamId;
        /// <summary>
        /// The translation provider to use ('gengo', 'google', 'lokalise', 'deepl'), default is 'deepl'.
        /// </summary>
        public readonly string? TranslationProvider;

        [OutputConstructor]
        private ProjectConnectorsLokalise(
            string apiToken,

            string? cardId,

            string? description,

            string? id,

            string name,

            string projectId,

            string? teamId,

            string? translationProvider)
        {
            ApiToken = apiToken;
            CardId = cardId;
            Description = description;
            Id = id;
            Name = name;
            ProjectId = projectId;
            TeamId = teamId;
            TranslationProvider = translationProvider;
        }
    }
}
