// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Inputs
{

    public sealed class ProjectConnectorsSupabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication type to use.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
        /// </summary>
        [Input("createUsers")]
        public Input<bool>? CreateUsers { get; set; }

        [Input("customClaimsMapping")]
        private InputMap<string>? _customClaimsMapping;

        /// <summary>
        /// A mapping of Descope user fields or JWT claims to Supabase custom claims
        /// </summary>
        public InputMap<string> CustomClaimsMapping
        {
            get => _customClaimsMapping ?? (_customClaimsMapping = new InputMap<string>());
            set => _customClaimsMapping = value;
        }

        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The duration in minutes for which the token is valid.
        /// </summary>
        [Input("expirationTime")]
        public Input<double>? ExpirationTime { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Your Supabase Project's API base URL, e.g.: https://\n\n.supabase.co.
        /// </summary>
        [Input("projectBaseUrl")]
        public Input<string>? ProjectBaseUrl { get; set; }

        [Input("serviceRoleApiKey")]
        private Input<string>? _serviceRoleApiKey;

        /// <summary>
        /// The service role API key for your Supabase project, required to create users.
        /// </summary>
        public Input<string>? ServiceRoleApiKey
        {
            get => _serviceRoleApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceRoleApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("signingSecret")]
        private Input<string>? _signingSecret;

        /// <summary>
        /// The signing secret for your Supabase project.
        /// </summary>
        public Input<string>? SigningSecret
        {
            get => _signingSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _signingSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProjectConnectorsSupabaseArgs()
        {
        }
        public static new ProjectConnectorsSupabaseArgs Empty => new ProjectConnectorsSupabaseArgs();
    }
}
