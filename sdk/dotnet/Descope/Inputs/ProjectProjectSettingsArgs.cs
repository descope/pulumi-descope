// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Inputs
{

    public sealed class ProjectProjectSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the access key JWT Template.
        /// </summary>
        [Input("accessKeyJwtTemplate")]
        public Input<string>? AccessKeyJwtTemplate { get; set; }

        /// <summary>
        /// The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
        /// </summary>
        [Input("accessKeySessionTokenExpiration")]
        public Input<string>? AccessKeySessionTokenExpiration { get; set; }

        /// <summary>
        /// The URL which your application resides on.
        /// </summary>
        [Input("appUrl")]
        public Input<string>? AppUrl { get; set; }

        [Input("approvedDomains")]
        private InputList<string>? _approvedDomains;

        /// <summary>
        /// The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
        /// </summary>
        public InputList<string> ApprovedDomains
        {
            get => _approvedDomains ?? (_approvedDomains = new InputList<string>());
            set => _approvedDomains = value;
        }

        /// <summary>
        /// A custom CNAME that's configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
        /// </summary>
        [Input("defaultNoSsoApps")]
        public Input<bool>? DefaultNoSsoApps { get; set; }

        /// <summary>
        /// Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
        /// </summary>
        [Input("enableInactivity")]
        public Input<bool>? EnableInactivity { get; set; }

        /// <summary>
        /// The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
        /// </summary>
        [Input("inactivityTime")]
        public Input<string>? InactivityTime { get; set; }

        /// <summary>
        /// The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
        /// </summary>
        [Input("refreshTokenCookieDomain")]
        public Input<string>? RefreshTokenCookieDomain { get; set; }

        /// <summary>
        /// Use `Strict`, `Lax` or `None`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
        /// </summary>
        [Input("refreshTokenCookiePolicy")]
        public Input<string>? RefreshTokenCookiePolicy { get; set; }

        /// <summary>
        /// The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
        /// </summary>
        [Input("refreshTokenExpiration")]
        public Input<string>? RefreshTokenExpiration { get; set; }

        /// <summary>
        /// Configure how refresh tokens are managed by the Descope SDKs. Must be either `ResponseBody` or `Cookies`. The default value is `ResponseBody`.
        /// </summary>
        [Input("refreshTokenResponseMethod")]
        public Input<string>? RefreshTokenResponseMethod { get; set; }

        /// <summary>
        /// Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
        /// </summary>
        [Input("refreshTokenRotation")]
        public Input<bool>? RefreshTokenRotation { get; set; }

        /// <summary>
        /// Configure seamless migration of existing user sessions from another vendor to Descope.
        /// </summary>
        [Input("sessionMigration")]
        public Input<Inputs.ProjectProjectSettingsSessionMigrationArgs>? SessionMigration { get; set; }

        /// <summary>
        /// The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
        /// </summary>
        [Input("sessionTokenCookieDomain")]
        public Input<string>? SessionTokenCookieDomain { get; set; }

        /// <summary>
        /// Use `Strict`, `Lax` or `None`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
        /// </summary>
        [Input("sessionTokenCookiePolicy")]
        public Input<string>? SessionTokenCookiePolicy { get; set; }

        /// <summary>
        /// The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
        /// </summary>
        [Input("sessionTokenExpiration")]
        public Input<string>? SessionTokenExpiration { get; set; }

        /// <summary>
        /// Configure how sessions tokens are managed by the Descope SDKs. Must be either `ResponseBody` or `Cookies`. The default value is `ResponseBody`.
        /// </summary>
        [Input("sessionTokenResponseMethod")]
        public Input<string>? SessionTokenResponseMethod { get; set; }

        /// <summary>
        /// The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
        /// </summary>
        [Input("stepUpTokenExpiration")]
        public Input<string>? StepUpTokenExpiration { get; set; }

        /// <summary>
        /// Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
        /// </summary>
        [Input("testUsersLoginidRegexp")]
        public Input<string>? TestUsersLoginidRegexp { get; set; }

        /// <summary>
        /// A 6 digit static OTP code for use with test users.
        /// </summary>
        [Input("testUsersStaticOtp")]
        public Input<string>? TestUsersStaticOtp { get; set; }

        /// <summary>
        /// The pattern of the verifiers that will be used for testing.
        /// </summary>
        [Input("testUsersVerifierRegexp")]
        public Input<string>? TestUsersVerifierRegexp { get; set; }

        /// <summary>
        /// The expiry time for the trusted device token. The minimum value is "3 minutes".
        /// </summary>
        [Input("trustedDeviceTokenExpiration")]
        public Input<string>? TrustedDeviceTokenExpiration { get; set; }

        /// <summary>
        /// Name of the user JWT Template.
        /// </summary>
        [Input("userJwtTemplate")]
        public Input<string>? UserJwtTemplate { get; set; }

        public ProjectProjectSettingsArgs()
        {
        }
        public static new ProjectProjectSettingsArgs Empty => new ProjectProjectSettingsArgs();
    }
}
