// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope.Inputs
{

    public sealed class ProjectConnectorsGoogleCloudLoggingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable streaming of audit events.
        /// </summary>
        [Input("auditEnabled")]
        public Input<bool>? AuditEnabled { get; set; }

        [Input("auditFilters")]
        private InputList<Inputs.ProjectConnectorsGoogleCloudLoggingAuditFilterArgs>? _auditFilters;

        /// <summary>
        /// Specify which events will be sent to the external audit service (including tenant selection).
        /// </summary>
        public InputList<Inputs.ProjectConnectorsGoogleCloudLoggingAuditFilterArgs> AuditFilters
        {
            get => _auditFilters ?? (_auditFilters = new InputList<Inputs.ProjectConnectorsGoogleCloudLoggingAuditFilterArgs>());
            set => _auditFilters = value;
        }

        /// <summary>
        /// A description of what your connector is used for.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A custom name for your connector.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("serviceAccountKey", required: true)]
        private Input<string>? _serviceAccountKey;

        /// <summary>
        /// A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
        /// </summary>
        public Input<string>? ServiceAccountKey
        {
            get => _serviceAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to send troubleshooting events.
        /// </summary>
        [Input("troubleshootLogEnabled")]
        public Input<bool>? TroubleshootLogEnabled { get; set; }

        public ProjectConnectorsGoogleCloudLoggingArgs()
        {
        }
        public static new ProjectConnectorsGoogleCloudLoggingArgs Empty => new ProjectConnectorsGoogleCloudLoggingArgs();
    }
}
