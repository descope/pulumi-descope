// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Descope.Pulumi.Descope
{
    [DescopeResourceType("descope:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Applications that are registered with the project.
        /// </summary>
        [Output("applications")]
        public Output<Outputs.ProjectApplications> Applications { get; private set; } = null!;

        /// <summary>
        /// Custom attributes that can be attached to users and tenants.
        /// </summary>
        [Output("attributes")]
        public Output<Outputs.ProjectAttributes> Attributes { get; private set; } = null!;

        /// <summary>
        /// Settings for each authentication method.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.ProjectAuthentication> Authentication { get; private set; } = null!;

        /// <summary>
        /// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.ProjectAuthorization> Authorization { get; private set; } = null!;

        /// <summary>
        /// Enrich your flows by interacting with third party services.
        /// </summary>
        [Output("connectors")]
        public Output<Outputs.ProjectConnectors> Connectors { get; private set; } = null!;

        /// <summary>
        /// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// Custom authentication flows to use in this project.
        /// </summary>
        [Output("flows")]
        public Output<ImmutableDictionary<string, Outputs.ProjectFlows>> Flows { get; private set; } = null!;

        [Output("inviteSettings")]
        public Output<Outputs.ProjectInviteSettings> InviteSettings { get; private set; } = null!;

        /// <summary>
        /// Defines templates for JSON Web Tokens (JWT) used for authentication.
        /// </summary>
        [Output("jwtTemplates")]
        public Output<Outputs.ProjectJwtTemplates> JwtTemplates { get; private set; } = null!;

        /// <summary>
        /// The name of the Descope project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// General settings for the Descope project.
        /// </summary>
        [Output("projectSettings")]
        public Output<Outputs.ProjectProjectSettings> ProjectSettings { get; private set; } = null!;

        /// <summary>
        /// Custom styles that can be applied to the project's authentication flows.
        /// </summary>
        [Output("styles")]
        public Output<Outputs.ProjectStyles> Styles { get; private set; } = null!;

        /// <summary>
        /// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("descope:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("descope:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/descope",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Applications that are registered with the project.
        /// </summary>
        [Input("applications")]
        public Input<Inputs.ProjectApplicationsArgs>? Applications { get; set; }

        /// <summary>
        /// Custom attributes that can be attached to users and tenants.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ProjectAttributesArgs>? Attributes { get; set; }

        /// <summary>
        /// Settings for each authentication method.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ProjectAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.ProjectAuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// Enrich your flows by interacting with third party services.
        /// </summary>
        [Input("connectors")]
        public Input<Inputs.ProjectConnectorsArgs>? Connectors { get; set; }

        /// <summary>
        /// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("flows")]
        private InputMap<Inputs.ProjectFlowsArgs>? _flows;

        /// <summary>
        /// Custom authentication flows to use in this project.
        /// </summary>
        public InputMap<Inputs.ProjectFlowsArgs> Flows
        {
            get => _flows ?? (_flows = new InputMap<Inputs.ProjectFlowsArgs>());
            set => _flows = value;
        }

        [Input("inviteSettings")]
        public Input<Inputs.ProjectInviteSettingsArgs>? InviteSettings { get; set; }

        /// <summary>
        /// Defines templates for JSON Web Tokens (JWT) used for authentication.
        /// </summary>
        [Input("jwtTemplates")]
        public Input<Inputs.ProjectJwtTemplatesArgs>? JwtTemplates { get; set; }

        /// <summary>
        /// The name of the Descope project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// General settings for the Descope project.
        /// </summary>
        [Input("projectSettings")]
        public Input<Inputs.ProjectProjectSettingsArgs>? ProjectSettings { get; set; }

        /// <summary>
        /// Custom styles that can be applied to the project's authentication flows.
        /// </summary>
        [Input("styles")]
        public Input<Inputs.ProjectStylesArgs>? Styles { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Applications that are registered with the project.
        /// </summary>
        [Input("applications")]
        public Input<Inputs.ProjectApplicationsGetArgs>? Applications { get; set; }

        /// <summary>
        /// Custom attributes that can be attached to users and tenants.
        /// </summary>
        [Input("attributes")]
        public Input<Inputs.ProjectAttributesGetArgs>? Attributes { get; set; }

        /// <summary>
        /// Settings for each authentication method.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ProjectAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.ProjectAuthorizationGetArgs>? Authorization { get; set; }

        /// <summary>
        /// Enrich your flows by interacting with third party services.
        /// </summary>
        [Input("connectors")]
        public Input<Inputs.ProjectConnectorsGetArgs>? Connectors { get; set; }

        /// <summary>
        /// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("flows")]
        private InputMap<Inputs.ProjectFlowsGetArgs>? _flows;

        /// <summary>
        /// Custom authentication flows to use in this project.
        /// </summary>
        public InputMap<Inputs.ProjectFlowsGetArgs> Flows
        {
            get => _flows ?? (_flows = new InputMap<Inputs.ProjectFlowsGetArgs>());
            set => _flows = value;
        }

        [Input("inviteSettings")]
        public Input<Inputs.ProjectInviteSettingsGetArgs>? InviteSettings { get; set; }

        /// <summary>
        /// Defines templates for JSON Web Tokens (JWT) used for authentication.
        /// </summary>
        [Input("jwtTemplates")]
        public Input<Inputs.ProjectJwtTemplatesGetArgs>? JwtTemplates { get; set; }

        /// <summary>
        /// The name of the Descope project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// General settings for the Descope project.
        /// </summary>
        [Input("projectSettings")]
        public Input<Inputs.ProjectProjectSettingsGetArgs>? ProjectSettings { get; set; }

        /// <summary>
        /// Custom styles that can be applied to the project's authentication flows.
        /// </summary>
        [Input("styles")]
        public Input<Inputs.ProjectStylesGetArgs>? Styles { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
