// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'descope:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public readonly applications!: pulumi.Output<outputs.ProjectApplications>;
    public readonly attributes!: pulumi.Output<outputs.ProjectAttributes>;
    public readonly authentication!: pulumi.Output<outputs.ProjectAuthentication>;
    public readonly authorization!: pulumi.Output<outputs.ProjectAuthorization>;
    public readonly connectors!: pulumi.Output<outputs.ProjectConnectors>;
    public readonly flows!: pulumi.Output<{[key: string]: outputs.ProjectFlows}>;
    public readonly jwtTemplates!: pulumi.Output<outputs.ProjectJwtTemplates>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectSettings!: pulumi.Output<outputs.ProjectProjectSettings>;
    public readonly styles!: pulumi.Output<outputs.ProjectStyles>;
    public readonly tag!: pulumi.Output<string>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["connectors"] = state ? state.connectors : undefined;
            resourceInputs["flows"] = state ? state.flows : undefined;
            resourceInputs["jwtTemplates"] = state ? state.jwtTemplates : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectSettings"] = state ? state.projectSettings : undefined;
            resourceInputs["styles"] = state ? state.styles : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["connectors"] = args ? args.connectors : undefined;
            resourceInputs["flows"] = args ? args.flows : undefined;
            resourceInputs["jwtTemplates"] = args ? args.jwtTemplates : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectSettings"] = args ? args.projectSettings : undefined;
            resourceInputs["styles"] = args ? args.styles : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    applications?: pulumi.Input<inputs.ProjectApplications>;
    attributes?: pulumi.Input<inputs.ProjectAttributes>;
    authentication?: pulumi.Input<inputs.ProjectAuthentication>;
    authorization?: pulumi.Input<inputs.ProjectAuthorization>;
    connectors?: pulumi.Input<inputs.ProjectConnectors>;
    flows?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ProjectFlows>}>;
    jwtTemplates?: pulumi.Input<inputs.ProjectJwtTemplates>;
    name?: pulumi.Input<string>;
    projectSettings?: pulumi.Input<inputs.ProjectProjectSettings>;
    styles?: pulumi.Input<inputs.ProjectStyles>;
    tag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    applications?: pulumi.Input<inputs.ProjectApplications>;
    attributes?: pulumi.Input<inputs.ProjectAttributes>;
    authentication?: pulumi.Input<inputs.ProjectAuthentication>;
    authorization?: pulumi.Input<inputs.ProjectAuthorization>;
    connectors?: pulumi.Input<inputs.ProjectConnectors>;
    flows?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ProjectFlows>}>;
    jwtTemplates?: pulumi.Input<inputs.ProjectJwtTemplates>;
    name?: pulumi.Input<string>;
    projectSettings?: pulumi.Input<inputs.ProjectProjectSettings>;
    styles?: pulumi.Input<inputs.ProjectStyles>;
    tag?: pulumi.Input<string>;
}
