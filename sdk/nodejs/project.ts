// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'descope:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Applications that are registered with the project.
     */
    declare public readonly applications: pulumi.Output<outputs.ProjectApplications>;
    /**
     * Custom attributes that can be attached to users and tenants.
     */
    declare public readonly attributes: pulumi.Output<outputs.ProjectAttributes>;
    /**
     * Settings for each authentication method.
     */
    declare public readonly authentication: pulumi.Output<outputs.ProjectAuthentication>;
    /**
     * Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
     */
    declare public readonly authorization: pulumi.Output<outputs.ProjectAuthorization>;
    /**
     * Enrich your flows by interacting with third party services.
     */
    declare public readonly connectors: pulumi.Output<outputs.ProjectConnectors>;
    /**
     * This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * Custom authentication flows to use in this project.
     */
    declare public readonly flows: pulumi.Output<{[key: string]: outputs.ProjectFlows}>;
    /**
     * User invitation settings and behavior.
     */
    declare public readonly inviteSettings: pulumi.Output<outputs.ProjectInviteSettings>;
    /**
     * Defines templates for JSON Web Tokens (JWT) used for authentication.
     */
    declare public readonly jwtTemplates: pulumi.Output<outputs.ProjectJwtTemplates>;
    /**
     * The name of the Descope project.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * General settings for the Descope project.
     */
    declare public readonly projectSettings: pulumi.Output<outputs.ProjectProjectSettings>;
    /**
     * Custom styles that can be applied to the project's authentication flows.
     */
    declare public readonly styles: pulumi.Output<outputs.ProjectStyles>;
    /**
     * Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
     */
    declare public readonly tags: pulumi.Output<string[]>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["applications"] = state?.applications;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["authentication"] = state?.authentication;
            resourceInputs["authorization"] = state?.authorization;
            resourceInputs["connectors"] = state?.connectors;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["flows"] = state?.flows;
            resourceInputs["inviteSettings"] = state?.inviteSettings;
            resourceInputs["jwtTemplates"] = state?.jwtTemplates;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectSettings"] = state?.projectSettings;
            resourceInputs["styles"] = state?.styles;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["applications"] = args?.applications;
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["authentication"] = args?.authentication;
            resourceInputs["authorization"] = args?.authorization;
            resourceInputs["connectors"] = args?.connectors;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["flows"] = args?.flows;
            resourceInputs["inviteSettings"] = args?.inviteSettings;
            resourceInputs["jwtTemplates"] = args?.jwtTemplates;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectSettings"] = args?.projectSettings;
            resourceInputs["styles"] = args?.styles;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Applications that are registered with the project.
     */
    applications?: pulumi.Input<inputs.ProjectApplications>;
    /**
     * Custom attributes that can be attached to users and tenants.
     */
    attributes?: pulumi.Input<inputs.ProjectAttributes>;
    /**
     * Settings for each authentication method.
     */
    authentication?: pulumi.Input<inputs.ProjectAuthentication>;
    /**
     * Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
     */
    authorization?: pulumi.Input<inputs.ProjectAuthorization>;
    /**
     * Enrich your flows by interacting with third party services.
     */
    connectors?: pulumi.Input<inputs.ProjectConnectors>;
    /**
     * This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
     */
    environment?: pulumi.Input<string>;
    /**
     * Custom authentication flows to use in this project.
     */
    flows?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ProjectFlows>}>;
    /**
     * User invitation settings and behavior.
     */
    inviteSettings?: pulumi.Input<inputs.ProjectInviteSettings>;
    /**
     * Defines templates for JSON Web Tokens (JWT) used for authentication.
     */
    jwtTemplates?: pulumi.Input<inputs.ProjectJwtTemplates>;
    /**
     * The name of the Descope project.
     */
    name?: pulumi.Input<string>;
    /**
     * General settings for the Descope project.
     */
    projectSettings?: pulumi.Input<inputs.ProjectProjectSettings>;
    /**
     * Custom styles that can be applied to the project's authentication flows.
     */
    styles?: pulumi.Input<inputs.ProjectStyles>;
    /**
     * Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Applications that are registered with the project.
     */
    applications?: pulumi.Input<inputs.ProjectApplications>;
    /**
     * Custom attributes that can be attached to users and tenants.
     */
    attributes?: pulumi.Input<inputs.ProjectAttributes>;
    /**
     * Settings for each authentication method.
     */
    authentication?: pulumi.Input<inputs.ProjectAuthentication>;
    /**
     * Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
     */
    authorization?: pulumi.Input<inputs.ProjectAuthorization>;
    /**
     * Enrich your flows by interacting with third party services.
     */
    connectors?: pulumi.Input<inputs.ProjectConnectors>;
    /**
     * This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
     */
    environment?: pulumi.Input<string>;
    /**
     * Custom authentication flows to use in this project.
     */
    flows?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ProjectFlows>}>;
    /**
     * User invitation settings and behavior.
     */
    inviteSettings?: pulumi.Input<inputs.ProjectInviteSettings>;
    /**
     * Defines templates for JSON Web Tokens (JWT) used for authentication.
     */
    jwtTemplates?: pulumi.Input<inputs.ProjectJwtTemplates>;
    /**
     * The name of the Descope project.
     */
    name?: pulumi.Input<string>;
    /**
     * General settings for the Descope project.
     */
    projectSettings?: pulumi.Input<inputs.ProjectProjectSettings>;
    /**
     * Custom styles that can be applied to the project's authentication flows.
     */
    styles?: pulumi.Input<inputs.ProjectStyles>;
    /**
     * Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
