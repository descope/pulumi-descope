// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProjectApplications {
    oidcApplications?: pulumi.Input<pulumi.Input<inputs.ProjectApplicationsOidcApplication>[]>;
    samlApplications?: pulumi.Input<pulumi.Input<inputs.ProjectApplicationsSamlApplication>[]>;
}

export interface ProjectApplicationsOidcApplication {
    claims?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    loginPageUrl?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectApplicationsSamlApplication {
    acsAllowedCallbackUrls?: pulumi.Input<pulumi.Input<string>[]>;
    attributeMappings?: pulumi.Input<pulumi.Input<inputs.ProjectApplicationsSamlApplicationAttributeMapping>[]>;
    defaultRelayState?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    dynamicConfiguration?: pulumi.Input<inputs.ProjectApplicationsSamlApplicationDynamicConfiguration>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    loginPageUrl?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    manualConfiguration?: pulumi.Input<inputs.ProjectApplicationsSamlApplicationManualConfiguration>;
    name: pulumi.Input<string>;
    subjectNameIdFormat?: pulumi.Input<string>;
    subjectNameIdType?: pulumi.Input<string>;
}

export interface ProjectApplicationsSamlApplicationAttributeMapping {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ProjectApplicationsSamlApplicationDynamicConfiguration {
    metadataUrl: pulumi.Input<string>;
}

export interface ProjectApplicationsSamlApplicationManualConfiguration {
    acsUrl: pulumi.Input<string>;
    certificate: pulumi.Input<string>;
    entityId: pulumi.Input<string>;
}

export interface ProjectAttributes {
    tenants?: pulumi.Input<pulumi.Input<inputs.ProjectAttributesTenant>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.ProjectAttributesUser>[]>;
}

export interface ProjectAttributesTenant {
    name: pulumi.Input<string>;
    selectOptions?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface ProjectAttributesUser {
    name: pulumi.Input<string>;
    selectOptions?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    widgetAuthorization?: pulumi.Input<inputs.ProjectAttributesUserWidgetAuthorization>;
}

export interface ProjectAttributesUserWidgetAuthorization {
    editPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    viewPermissions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAuthentication {
    embeddedLink?: pulumi.Input<inputs.ProjectAuthenticationEmbeddedLink>;
    enchantedLink?: pulumi.Input<inputs.ProjectAuthenticationEnchantedLink>;
    magicLink?: pulumi.Input<inputs.ProjectAuthenticationMagicLink>;
    oauth?: pulumi.Input<inputs.ProjectAuthenticationOauth>;
    otp?: pulumi.Input<inputs.ProjectAuthenticationOtp>;
    password?: pulumi.Input<inputs.ProjectAuthenticationPassword>;
    sso?: pulumi.Input<inputs.ProjectAuthenticationSso>;
    totp?: pulumi.Input<inputs.ProjectAuthenticationTotp>;
    webauthn?: pulumi.Input<inputs.ProjectAuthenticationWebauthn>;
}

export interface ProjectAuthenticationEmbeddedLink {
    enabled?: pulumi.Input<boolean>;
    expirationTime?: pulumi.Input<number>;
    expirationTimeUnit?: pulumi.Input<string>;
}

export interface ProjectAuthenticationEnchantedLink {
    emailService?: pulumi.Input<inputs.ProjectAuthenticationEnchantedLinkEmailService>;
    enabled?: pulumi.Input<boolean>;
    expirationTime?: pulumi.Input<number>;
    expirationTimeUnit?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationEnchantedLinkEmailService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationEnchantedLinkEmailServiceTemplate>[]>;
}

export interface ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
    active?: pulumi.Input<boolean>;
    htmlBody?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    plainTextBody?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    usePlainTextBody?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationMagicLink {
    emailService?: pulumi.Input<inputs.ProjectAuthenticationMagicLinkEmailService>;
    enabled?: pulumi.Input<boolean>;
    expirationTime?: pulumi.Input<number>;
    expirationTimeUnit?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    textService?: pulumi.Input<inputs.ProjectAuthenticationMagicLinkTextService>;
}

export interface ProjectAuthenticationMagicLinkEmailService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationMagicLinkEmailServiceTemplate>[]>;
}

export interface ProjectAuthenticationMagicLinkEmailServiceTemplate {
    active?: pulumi.Input<boolean>;
    htmlBody?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    plainTextBody?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    usePlainTextBody?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationMagicLinkTextService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationMagicLinkTextServiceTemplate>[]>;
}

export interface ProjectAuthenticationMagicLinkTextServiceTemplate {
    active?: pulumi.Input<boolean>;
    body: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauth {
    custom?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ProjectAuthenticationOauthCustom>}>;
    disabled?: pulumi.Input<boolean>;
    system?: pulumi.Input<inputs.ProjectAuthenticationOauthSystem>;
}

export interface ProjectAuthenticationOauthCustom {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthCustomProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthCustomProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystem {
    apple?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemApple>;
    discord?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemDiscord>;
    facebook?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemFacebook>;
    github?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGithub>;
    gitlab?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGitlab>;
    google?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGoogle>;
    linkedin?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemLinkedin>;
    microsoft?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemMicrosoft>;
    slack?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemSlack>;
}

export interface ProjectAuthenticationOauthSystemApple {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemAppleProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemDiscord {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemDiscordProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemFacebook {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemFacebookProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGithub {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGithubProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGitlab {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGitlabProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGoogle {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemGoogleProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemLinkedin {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemMicrosoft {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemSlack {
    authorizationEndpoint?: pulumi.Input<string>;
    claimMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    grantType?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksEndpoint?: pulumi.Input<string>;
    logo?: pulumi.Input<string>;
    mergeUserAccounts?: pulumi.Input<boolean>;
    prompts?: pulumi.Input<pulumi.Input<string>[]>;
    providerTokenManagement?: pulumi.Input<inputs.ProjectAuthenticationOauthSystemSlackProviderTokenManagement>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    tokenEndpoint?: pulumi.Input<string>;
    userInfoEndpoint?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
    callbackDomain?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
}

export interface ProjectAuthenticationOtp {
    domain?: pulumi.Input<string>;
    emailService?: pulumi.Input<inputs.ProjectAuthenticationOtpEmailService>;
    enabled?: pulumi.Input<boolean>;
    expirationTime?: pulumi.Input<number>;
    expirationTimeUnit?: pulumi.Input<string>;
    textService?: pulumi.Input<inputs.ProjectAuthenticationOtpTextService>;
    voiceService?: pulumi.Input<inputs.ProjectAuthenticationOtpVoiceService>;
}

export interface ProjectAuthenticationOtpEmailService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationOtpEmailServiceTemplate>[]>;
}

export interface ProjectAuthenticationOtpEmailServiceTemplate {
    active?: pulumi.Input<boolean>;
    htmlBody?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    plainTextBody?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    usePlainTextBody?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationOtpTextService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationOtpTextServiceTemplate>[]>;
}

export interface ProjectAuthenticationOtpTextServiceTemplate {
    active?: pulumi.Input<boolean>;
    body: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectAuthenticationOtpVoiceService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationOtpVoiceServiceTemplate>[]>;
}

export interface ProjectAuthenticationOtpVoiceServiceTemplate {
    active?: pulumi.Input<boolean>;
    body: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectAuthenticationPassword {
    emailService?: pulumi.Input<inputs.ProjectAuthenticationPasswordEmailService>;
    enabled?: pulumi.Input<boolean>;
    expiration?: pulumi.Input<boolean>;
    expirationWeeks?: pulumi.Input<number>;
    lock?: pulumi.Input<boolean>;
    lockAttempts?: pulumi.Input<number>;
    lowercase?: pulumi.Input<boolean>;
    minLength?: pulumi.Input<number>;
    nonAlphanumeric?: pulumi.Input<boolean>;
    number?: pulumi.Input<boolean>;
    reuse?: pulumi.Input<boolean>;
    reuseAmount?: pulumi.Input<number>;
    uppercase?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationPasswordEmailService {
    connector: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.ProjectAuthenticationPasswordEmailServiceTemplate>[]>;
}

export interface ProjectAuthenticationPasswordEmailServiceTemplate {
    active?: pulumi.Input<boolean>;
    htmlBody?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    plainTextBody?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    usePlainTextBody?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationSso {
    enabled?: pulumi.Input<boolean>;
    mergeUsers?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationTotp {
    enabled?: pulumi.Input<boolean>;
}

export interface ProjectAuthenticationWebauthn {
    enabled?: pulumi.Input<boolean>;
    topLevelDomain?: pulumi.Input<string>;
}

export interface ProjectAuthorization {
    permissions?: pulumi.Input<pulumi.Input<inputs.ProjectAuthorizationPermission>[]>;
    roles?: pulumi.Input<pulumi.Input<inputs.ProjectAuthorizationRole>[]>;
}

export interface ProjectAuthorizationPermission {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectAuthorizationRole {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectConnectors {
    abuseipdbs?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsAbuseipdb>[]>;
    amplitudes?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsAmplitude>[]>;
    auditWebhooks?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsAuditWebhook>[]>;
    awsS3s?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsAwsS3>[]>;
    awsTranslates?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsAwsTranslate>[]>;
    clears?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsClear>[]>;
    datadogs?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsDatadog>[]>;
    devrevGrows?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsDevrevGrow>[]>;
    docebos?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsDocebo>[]>;
    fingerprintDescopes?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsFingerprintDescope>[]>;
    fingerprints?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsFingerprint>[]>;
    forters?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsForter>[]>;
    googleCloudTranslations?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsGoogleCloudTranslation>[]>;
    hibps?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsHibp>[]>;
    httpStaticIps?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsHttpStaticIp>[]>;
    https?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsHttp>[]>;
    hubspots?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsHubspot>[]>;
    intercoms?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsIntercom>[]>;
    newrelics?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsNewrelic>[]>;
    recaptchaEnterprises?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsRecaptchaEnterprise>[]>;
    recaptchas?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsRecaptcha>[]>;
    rekognitions?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsRekognition>[]>;
    salesforces?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsSalesforce>[]>;
    segments?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsSegment>[]>;
    sendgrids?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsSendgrid>[]>;
    smtps?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsSmtp>[]>;
    sumologics?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsSumologic>[]>;
    telesigns?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsTelesign>[]>;
    traceables?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsTraceable>[]>;
    twilioCores?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsTwilioCore>[]>;
    twilioVerifies?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsTwilioVerify>[]>;
    veriffs?: pulumi.Input<pulumi.Input<inputs.ProjectConnectorsVeriff>[]>;
}

export interface ProjectConnectorsAbuseipdb {
    apiKey: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsAmplitude {
    apiKey: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    serverUrl?: pulumi.Input<string>;
    serverZone?: pulumi.Input<string>;
}

export interface ProjectConnectorsAuditWebhook {
    auditFilters?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.ProjectConnectorsAuditWebhookAuthentication>;
    baseUrl: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hmacSecret?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    insecure?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsAuditWebhookAuthentication {
    apiKey?: pulumi.Input<inputs.ProjectConnectorsAuditWebhookAuthenticationApiKey>;
    basic?: pulumi.Input<inputs.ProjectConnectorsAuditWebhookAuthenticationBasic>;
    bearerToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsAuditWebhookAuthenticationApiKey {
    key: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface ProjectConnectorsAuditWebhookAuthenticationBasic {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ProjectConnectorsAwsS3 {
    accessKeyId: pulumi.Input<string>;
    auditEnabled?: pulumi.Input<boolean>;
    auditFilters?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    region: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
    troubleshootLogEnabled?: pulumi.Input<boolean>;
}

export interface ProjectConnectorsAwsTranslate {
    accessKeyId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    region: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
    sessionToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsClear {
    apiKey: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}

export interface ProjectConnectorsDatadog {
    apiKey: pulumi.Input<string>;
    auditEnabled?: pulumi.Input<boolean>;
    auditFilters?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    site?: pulumi.Input<string>;
    troubleshootLogEnabled?: pulumi.Input<boolean>;
}

export interface ProjectConnectorsDevrevGrow {
    apiKey: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsDocebo {
    baseUrl: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ProjectConnectorsFingerprint {
    cloudflareEndpointUrl?: pulumi.Input<string>;
    cloudflareScriptUrl?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    publicApiKey: pulumi.Input<string>;
    secretApiKey: pulumi.Input<string>;
    useCloudflareIntegration?: pulumi.Input<boolean>;
}

export interface ProjectConnectorsFingerprintDescope {
    customDomain?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsForter {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    overrideIpAddress?: pulumi.Input<string>;
    overrideUserEmail?: pulumi.Input<string>;
    overrides?: pulumi.Input<boolean>;
    secretKey: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
}

export interface ProjectConnectorsGoogleCloudTranslation {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    serviceAccountJson: pulumi.Input<string>;
}

export interface ProjectConnectorsHibp {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsHttp {
    authentication?: pulumi.Input<inputs.ProjectConnectorsHttpAuthentication>;
    baseUrl: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hmacSecret?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    includeHeadersInContext?: pulumi.Input<boolean>;
    insecure?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpAuthentication {
    apiKey?: pulumi.Input<inputs.ProjectConnectorsHttpAuthenticationApiKey>;
    basic?: pulumi.Input<inputs.ProjectConnectorsHttpAuthenticationBasic>;
    bearerToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpAuthenticationApiKey {
    key: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpAuthenticationBasic {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpStaticIp {
    authentication?: pulumi.Input<inputs.ProjectConnectorsHttpStaticIpAuthentication>;
    baseUrl: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hmacSecret?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    includeHeadersInContext?: pulumi.Input<boolean>;
    insecure?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpStaticIpAuthentication {
    apiKey?: pulumi.Input<inputs.ProjectConnectorsHttpStaticIpAuthenticationApiKey>;
    basic?: pulumi.Input<inputs.ProjectConnectorsHttpStaticIpAuthenticationBasic>;
    bearerToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpStaticIpAuthenticationApiKey {
    key: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface ProjectConnectorsHttpStaticIpAuthenticationBasic {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ProjectConnectorsHubspot {
    accessToken: pulumi.Input<string>;
    baseUrl?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsIntercom {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface ProjectConnectorsNewrelic {
    apiKey: pulumi.Input<string>;
    auditEnabled?: pulumi.Input<boolean>;
    auditFilters?: pulumi.Input<string>;
    dataCenter?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    logsPrefix?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    overrideLogsPrefix?: pulumi.Input<boolean>;
    troubleshootLogEnabled?: pulumi.Input<boolean>;
}

export interface ProjectConnectorsRecaptcha {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
    siteKey: pulumi.Input<string>;
}

export interface ProjectConnectorsRecaptchaEnterprise {
    apiKey: pulumi.Input<string>;
    assessmentScore?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    overrideAssessment?: pulumi.Input<boolean>;
    projectId: pulumi.Input<string>;
    siteKey: pulumi.Input<string>;
}

export interface ProjectConnectorsRekognition {
    accessKeyId: pulumi.Input<string>;
    collectionId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

export interface ProjectConnectorsSalesforce {
    baseUrl: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface ProjectConnectorsSegment {
    description?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    writeKey: pulumi.Input<string>;
}

export interface ProjectConnectorsSendgrid {
    authentication: pulumi.Input<inputs.ProjectConnectorsSendgridAuthentication>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sender: pulumi.Input<inputs.ProjectConnectorsSendgridSender>;
}

export interface ProjectConnectorsSendgridAuthentication {
    apiKey: pulumi.Input<string>;
}

export interface ProjectConnectorsSendgridSender {
    email: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ProjectConnectorsSmtp {
    authentication: pulumi.Input<inputs.ProjectConnectorsSmtpAuthentication>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sender: pulumi.Input<inputs.ProjectConnectorsSmtpSender>;
    server: pulumi.Input<inputs.ProjectConnectorsSmtpServer>;
}

export interface ProjectConnectorsSmtpAuthentication {
    method?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ProjectConnectorsSmtpSender {
    email: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ProjectConnectorsSmtpServer {
    host: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface ProjectConnectorsSumologic {
    auditEnabled?: pulumi.Input<boolean>;
    auditFilters?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    httpSourceUrl: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    troubleshootLogEnabled?: pulumi.Input<boolean>;
}

export interface ProjectConnectorsTelesign {
    apiKey: pulumi.Input<string>;
    customerId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectConnectorsTraceable {
    description?: pulumi.Input<string>;
    euRegion?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface ProjectConnectorsTwilioCore {
    accountSid: pulumi.Input<string>;
    authentication: pulumi.Input<inputs.ProjectConnectorsTwilioCoreAuthentication>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    senders: pulumi.Input<inputs.ProjectConnectorsTwilioCoreSenders>;
}

export interface ProjectConnectorsTwilioCoreAuthentication {
    apiKey?: pulumi.Input<string>;
    apiSecret?: pulumi.Input<string>;
    authToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsTwilioCoreSenders {
    sms: pulumi.Input<inputs.ProjectConnectorsTwilioCoreSendersSms>;
    voice?: pulumi.Input<inputs.ProjectConnectorsTwilioCoreSendersVoice>;
}

export interface ProjectConnectorsTwilioCoreSendersSms {
    messagingServiceSid?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
}

export interface ProjectConnectorsTwilioCoreSendersVoice {
    phoneNumber: pulumi.Input<string>;
}

export interface ProjectConnectorsTwilioVerify {
    accountSid: pulumi.Input<string>;
    authentication: pulumi.Input<inputs.ProjectConnectorsTwilioVerifyAuthentication>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sender?: pulumi.Input<string>;
    serviceSid: pulumi.Input<string>;
}

export interface ProjectConnectorsTwilioVerifyAuthentication {
    apiKey?: pulumi.Input<string>;
    apiSecret?: pulumi.Input<string>;
    authToken?: pulumi.Input<string>;
}

export interface ProjectConnectorsVeriff {
    apiKey: pulumi.Input<string>;
    baseUrl?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface ProjectFlows {
    data: pulumi.Input<string>;
}

export interface ProjectJwtTemplates {
    accessKeyTemplates?: pulumi.Input<pulumi.Input<inputs.ProjectJwtTemplatesAccessKeyTemplate>[]>;
    userTemplates?: pulumi.Input<pulumi.Input<inputs.ProjectJwtTemplatesUserTemplate>[]>;
}

export interface ProjectJwtTemplatesAccessKeyTemplate {
    authSchema?: pulumi.Input<string>;
    conformanceIssuer?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface ProjectJwtTemplatesUserTemplate {
    authSchema?: pulumi.Input<string>;
    conformanceIssuer?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface ProjectProjectSettings {
    accessKeyJwtTemplate?: pulumi.Input<string>;
    cookiePolicy?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    enableInactivity?: pulumi.Input<boolean>;
    inactivityTime?: pulumi.Input<string>;
    refreshTokenExpiration?: pulumi.Input<string>;
    userJwtTemplate?: pulumi.Input<string>;
}

export interface ProjectStyles {
    data: pulumi.Input<string>;
}
