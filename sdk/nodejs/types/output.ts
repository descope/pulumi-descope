// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProjectApplications {
    /**
     * Applications using OpenID Connect (OIDC) for authentication.
     */
    oidcApplications: outputs.ProjectApplicationsOidcApplication[];
    /**
     * Applications using SAML for authentication.
     */
    samlApplications: outputs.ProjectApplicationsSamlApplication[];
}

export interface ProjectApplicationsOidcApplication {
    /**
     * A list of supported claims. e.g. `sub`, `email`, `exp`.
     */
    claims: string[];
    /**
     * A description for the OIDC application.
     */
    description: string;
    /**
     * Whether the application should be enabled or disabled.
     */
    disabled: boolean;
    /**
     * This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
     */
    forceAuthentication: boolean;
    /**
     * An optional identifier for the OIDC application.
     */
    id: string;
    /**
     * The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     */
    loginPageUrl: string;
    /**
     * A logo for the OIDC application. Should be a hosted image URL.
     */
    logo: string;
    /**
     * A name for the OIDC application.
     */
    name: string;
}

export interface ProjectApplicationsSamlApplication {
    /**
     * A list of allowed ACS callback URLS. This configuration is used when the default ACS URL value is unreachable. Supports wildcards.
     */
    acsAllowedCallbackUrls: string[];
    /**
     * The `AttributeMapping` object. Read the description below.
     */
    attributeMappings: outputs.ProjectApplicationsSamlApplicationAttributeMapping[];
    /**
     * The default relay state. When using IdP-initiated authentication, this value may be used as a URL to a resource in the Service Provider.
     */
    defaultRelayState: string;
    /**
     * A description for the SAML application.
     */
    description: string;
    /**
     * Whether the application should be enabled or disabled.
     */
    disabled: boolean;
    /**
     * The `DynamicConfiguration` object. Read the description below.
     */
    dynamicConfiguration: outputs.ProjectApplicationsSamlApplicationDynamicConfiguration;
    /**
     * This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
     */
    forceAuthentication: boolean;
    /**
     * An optional identifier for the SAML application.
     */
    id: string;
    /**
     * The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     */
    loginPageUrl: string;
    /**
     * A logo for the SAML application. Should be a hosted image URL.
     */
    logo: string;
    /**
     * The `ManualConfiguration` object. Read the description below.
     */
    manualConfiguration: outputs.ProjectApplicationsSamlApplicationManualConfiguration;
    /**
     * A name for the SAML application.
     */
    name: string;
    /**
     * The subject name id format. Choose one of "", "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     */
    subjectNameIdFormat: string;
    /**
     * The subject name id type. Choose one of "", "email", "phone". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     */
    subjectNameIdType: string;
}

export interface ProjectApplicationsSamlApplicationAttributeMapping {
    /**
     * The name of the attribute.
     */
    name: string;
    /**
     * The value of the attribute.
     */
    value: string;
}

export interface ProjectApplicationsSamlApplicationDynamicConfiguration {
    /**
     * The metadata URL when retrieving the connection details dynamically.
     */
    metadataUrl: string;
}

export interface ProjectApplicationsSamlApplicationManualConfiguration {
    /**
     * Enter the `ACS URL` from the SP.
     */
    acsUrl: string;
    /**
     * Enter the `Certificate` from the SP.
     */
    certificate: string;
    /**
     * Enter the `Entity Id` from the SP.
     */
    entityId: string;
}

export interface ProjectAttributes {
    /**
     * A list of `TenantAttribute`. Read the description below.
     */
    tenants: outputs.ProjectAttributesTenant[];
    /**
     * A list of `UserAttribute`. Read the description below.
     */
    users: outputs.ProjectAttributesUser[];
}

export interface ProjectAttributesTenant {
    authorization: outputs.ProjectAttributesTenantAuthorization;
    /**
     * The name of the attribute.
     */
    name: string;
    /**
     * When the attribute type is "multiselect". A list of options to chose from.
     */
    selectOptions: string[];
    /**
     * The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
     */
    type: string;
}

export interface ProjectAttributesTenantAuthorization {
    viewPermissions: string[];
}

export interface ProjectAttributesUser {
    /**
     * The name of the attribute.
     */
    name: string;
    /**
     * When the attribute type is "multiselect". A list of options to chose from.
     */
    selectOptions: string[];
    /**
     * The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
     */
    type: string;
    /**
     * The `UserAttributeWidgetAuthorization` object. Read the description below.
     */
    widgetAuthorization: outputs.ProjectAttributesUserWidgetAuthorization;
}

export interface ProjectAttributesUserWidgetAuthorization {
    /**
     * A list of permissions by name to set editing permissions to the attribute in widgets. e.g "SSO Admin".
     */
    editPermissions: string[];
    /**
     * A list of permissions by name to set viewing permissions to the attribute in widgets. e.g "SSO Admin".
     */
    viewPermissions: string[];
}

export interface ProjectAuthentication {
    /**
     * Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
     */
    embeddedLink: outputs.ProjectAuthenticationEmbeddedLink;
    /**
     * An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
     */
    enchantedLink: outputs.ProjectAuthenticationEnchantedLink;
    /**
     * An authentication method where a user receives a unique link via email to log in.
     */
    magicLink: outputs.ProjectAuthenticationMagicLink;
    /**
     * Authentication using Open Authorization, which allows users to authenticate with various external services.
     */
    oauth: outputs.ProjectAuthenticationOauth;
    /**
     * A dynamically generated set of numbers, granting the user one-time access.
     */
    otp: outputs.ProjectAuthenticationOtp;
    /**
     * Device-based passwordless authentication, using fingerprint, face scan, and more.
     */
    passkeys: outputs.ProjectAuthenticationPasskeys;
    /**
     * The classic username and password combination used for authentication.
     */
    password: outputs.ProjectAuthenticationPassword;
    /**
     * Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
     */
    sso: outputs.ProjectAuthenticationSso;
    /**
     * A one-time code generated for the user using a shared secret and time.
     */
    totp: outputs.ProjectAuthenticationTotp;
}

export interface ProjectAuthenticationEmbeddedLink {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * The amount of time that the embedded link will be valid for.
     */
    expirationTime: string;
}

export interface ProjectAuthenticationEnchantedLink {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Settings related to sending emails as part of the enchanted link authentication.
     */
    emailService: outputs.ProjectAuthenticationEnchantedLinkEmailService;
    expirationTime: string;
    /**
     * The URL to redirect users to after they log in using the enchanted link.
     */
    redirectUrl: string;
}

export interface ProjectAuthenticationEnchantedLinkEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationEnchantedLinkEmailServiceTemplate[];
}

export interface ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationMagicLink {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Settings related to sending emails as part of the magic link authentication.
     */
    emailService: outputs.ProjectAuthenticationMagicLinkEmailService;
    expirationTime: string;
    /**
     * The URL to redirect users to after they log in using the magic link.
     */
    redirectUrl: string;
    /**
     * Settings related to sending SMS messages as part of the magic link authentication.
     */
    textService: outputs.ProjectAuthenticationMagicLinkTextService;
}

export interface ProjectAuthenticationMagicLinkEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationMagicLinkEmailServiceTemplate[];
}

export interface ProjectAuthenticationMagicLinkEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationMagicLinkTextService {
    connector: string;
    templates: outputs.ProjectAuthenticationMagicLinkTextServiceTemplate[];
}

export interface ProjectAuthenticationMagicLinkTextServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationOauth {
    /**
     * Custom OAuth providers configured for this project.
     */
    custom: {[key: string]: outputs.ProjectAuthenticationOauthCustom};
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Custom configurations for builtin OAuth providers such as Apple, Google, GitHub, Facebook, etc.
     */
    system: outputs.ProjectAuthenticationOauthSystem;
}

export interface ProjectAuthenticationOauthCustom {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthCustomProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthCustomProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystem {
    /**
     * Apple's OAuth provider, allowing users to authenticate with their Apple Account.
     */
    apple: outputs.ProjectAuthenticationOauthSystemApple;
    /**
     * Discord's OAuth provider, allowing users to authenticate with their Discord account.
     */
    discord: outputs.ProjectAuthenticationOauthSystemDiscord;
    /**
     * Facebook's OAuth provider, allowing users to authenticate with their Facebook account.
     */
    facebook: outputs.ProjectAuthenticationOauthSystemFacebook;
    /**
     * GitHub's OAuth provider, allowing users to authenticate with their GitHub account.
     */
    github: outputs.ProjectAuthenticationOauthSystemGithub;
    /**
     * GitLab's OAuth provider, allowing users to authenticate with their GitLab account.
     */
    gitlab: outputs.ProjectAuthenticationOauthSystemGitlab;
    /**
     * Google's OAuth provider, allowing users to authenticate with their Google account.
     */
    google: outputs.ProjectAuthenticationOauthSystemGoogle;
    /**
     * LinkedIn's OAuth provider, allowing users to authenticate with their LinkedIn account.
     */
    linkedin: outputs.ProjectAuthenticationOauthSystemLinkedin;
    /**
     * Microsoft's OAuth provider, allowing users to authenticate with their Microsoft account.
     */
    microsoft: outputs.ProjectAuthenticationOauthSystemMicrosoft;
    /**
     * Slack's OAuth provider, allowing users to authenticate with their Slack account.
     */
    slack: outputs.ProjectAuthenticationOauthSystemSlack;
}

export interface ProjectAuthenticationOauthSystemApple {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemAppleProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemDiscord {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemDiscordProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemFacebook {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemFacebookProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGithub {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGithubProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGitlab {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGitlabProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGoogle {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGoogleProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemLinkedin {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemMicrosoft {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemSlack {
    /**
     * The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     */
    allowedGrantTypes: string[];
    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     */
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     */
    clientId: string;
    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     */
    clientSecret: string;
    /**
     * A brief description of the OAuth provider.
     */
    description: string;
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    issuer: string;
    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     */
    jwksEndpoint: string;
    /**
     * The URL of the logo associated with the OAuth provider.
     */
    logo: string;
    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     */
    mergeUserAccounts: boolean;
    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     */
    prompts: string[];
    /**
     * Settings related to token management for the OAuth provider.
     */
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemSlackProviderTokenManagement;
    /**
     * Scopes of access that the application requests from the user's account on the OAuth provider.
     */
    scopes: string[];
    /**
     * The URL where the application requests an access token from the OAuth provider.
     */
    tokenEndpoint: string;
    /**
     * The URL where the application retrieves user information from the OAuth provider.
     */
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOtp {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * The domain to embed in OTP messages.
     */
    domain: string;
    /**
     * Settings related to sending emails with OTP codes.
     */
    emailService: outputs.ProjectAuthenticationOtpEmailService;
    /**
     * The amount of time that an OTP code will be valid for.
     */
    expirationTime: string;
    /**
     * Settings related to sending SMS messages with OTP codes.
     */
    textService: outputs.ProjectAuthenticationOtpTextService;
    /**
     * Settings related to voice calls with OTP codes.
     */
    voiceService: outputs.ProjectAuthenticationOtpVoiceService;
}

export interface ProjectAuthenticationOtpEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpEmailServiceTemplate[];
}

export interface ProjectAuthenticationOtpEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationOtpTextService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpTextServiceTemplate[];
}

export interface ProjectAuthenticationOtpTextServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationOtpVoiceService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpVoiceServiceTemplate[];
}

export interface ProjectAuthenticationOtpVoiceServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationPasskeys {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Passkeys will be usable in the following domain and all its subdomains.
     */
    topLevelDomain: string;
}

export interface ProjectAuthenticationPassword {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Settings related to sending password reset emails as part of the password feature.
     */
    emailService: outputs.ProjectAuthenticationPasswordEmailService;
    /**
     * Whether users are required to change their password periodically.
     */
    expiration: boolean;
    /**
     * The number of weeks after which a user's password expires and they need to replace it.
     */
    expirationWeeks: number;
    /**
     * Whether the user account should be locked after a specified number of failed login attempts.
     */
    lock: boolean;
    /**
     * The number of failed login attempts allowed before an account is locked.
     */
    lockAttempts: number;
    /**
     * Whether passwords must contain at least one lowercase letter.
     */
    lowercase: boolean;
    /**
     * The minimum length of the password that users are required to use. The maximum length is always `64`.
     */
    minLength: number;
    /**
     * Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
     */
    nonAlphanumeric: boolean;
    /**
     * Whether passwords must contain at least one number.
     */
    number: boolean;
    /**
     * Whether to forbid password reuse when users change their password.
     */
    reuse: boolean;
    reuseAmount: number;
    /**
     * Whether passwords must contain at least one uppercase letter.
     */
    uppercase: boolean;
}

export interface ProjectAuthenticationPasswordEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationPasswordEmailServiceTemplate[];
}

export interface ProjectAuthenticationPasswordEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationSso {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
    /**
     * Whether to merge existing user accounts with new ones created through SSO authentication.
     */
    mergeUsers: boolean;
}

export interface ProjectAuthenticationTotp {
    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     */
    disabled: boolean;
}

export interface ProjectAuthorization {
    /**
     * A list of `Permission` objects.
     */
    permissions: outputs.ProjectAuthorizationPermission[];
    /**
     * A list of `Role` objects.
     */
    roles: outputs.ProjectAuthorizationRole[];
}

export interface ProjectAuthorizationPermission {
    /**
     * A description for the permission.
     */
    description: string;
    id: string;
    /**
     * A name for the permission.
     */
    name: string;
}

export interface ProjectAuthorizationRole {
    /**
     * A description for the role.
     */
    description: string;
    id: string;
    /**
     * A name for the role.
     */
    name: string;
    /**
     * A list of permissions by name to be included in the role.
     */
    permissions: string[];
}

export interface ProjectConnectors {
    /**
     * AbuseIPDB provides an API to identify if an IP address has been associated with malicious activities online.
     */
    abuseipdbs: outputs.ProjectConnectorsAbuseipdb[];
    /**
     * Amplitude, an analytics product that allows you to collects events from web and mobile apps, unify those and use those to better understand your customers needs.
     */
    amplitudes: outputs.ProjectConnectorsAmplitude[];
    auditWebhooks: outputs.ProjectConnectorsAuditWebhook[];
    awsS3s: outputs.ProjectConnectorsAwsS3[];
    awsTranslates: outputs.ProjectConnectorsAwsTranslate[];
    /**
     * An identity verification platform that allow customers to digitally verify their identity from anywhere.
     */
    clears: outputs.ProjectConnectorsClear[];
    /**
     * Datadog, an observability service for cloud-scale applications, providing monitoring of servers, databases, tools, and services, through a SaaS-based data analytics platform.
     */
    datadogs: outputs.ProjectConnectorsDatadog[];
    devrevGrows: outputs.ProjectConnectorsDevrevGrow[];
    /**
     * Docebo is a cloud-based Learning Management System (LMS) designed to increase performance and learning engagement.
     */
    docebos: outputs.ProjectConnectorsDocebo[];
    fingerprintDescopes: outputs.ProjectConnectorsFingerprintDescope[];
    /**
     * Use the Fingerprint (formerly FingerprintJS) connector to add device intelligence and prevent fraud.
     */
    fingerprints: outputs.ProjectConnectorsFingerprint[];
    /**
     * Use the Forter connector for account fraud prevention.
     */
    forters: outputs.ProjectConnectorsForter[];
    genericSmsGateways: outputs.ProjectConnectorsGenericSmsGateway[];
    googleCloudTranslations: outputs.ProjectConnectorsGoogleCloudTranslation[];
    /**
     * API to check if password appeared previously exposed in data breaches.
     */
    hibps: outputs.ProjectConnectorsHibp[];
    /**
     * A general purpose HTTP client
     */
    https: outputs.ProjectConnectorsHttp[];
    /**
     * HubSpot is a CRM platform with software, integrations, and resources needed to connect marketing, sales, content management, and customer service.
     */
    hubspots: outputs.ProjectConnectorsHubspot[];
    /**
     * Use the Incode connection to run identity verification processes like document checks or facial recognition.
     */
    incodes: outputs.ProjectConnectorsIncode[];
    /**
     * Intercom is a Conversational Relationship Platform (CRP).
     */
    intercoms: outputs.ProjectConnectorsIntercom[];
    /**
     * Localize the language of your login and user journey screens with the Lokalise connector.
     */
    lokalises: outputs.ProjectConnectorsLokalise[];
    /**
     * Track and send user event data (e.g. page views, purchases, etc.) across connected tools using the mParticle connector.
     */
    mparticles: outputs.ProjectConnectorsMparticle[];
    /**
     * Use this connector to send audit events and troubleshooting logs to New Relic.
     */
    newrelics: outputs.ProjectConnectorsNewrelic[];
    recaptchaEnterprises: outputs.ProjectConnectorsRecaptchaEnterprise[];
    /**
     * reCAPTCHA is a free google service that protects your site from spam and abuse. It uses advanced risk analysis techniques to tell humans and bots apart.
     */
    recaptchas: outputs.ProjectConnectorsRecaptcha[];
    /**
     * AWS Rekognition, cloud-based AI service that offers computer vision capabilities for analyzing and processing images. Useful for registration and verification processes, and can be used to detect fraud and prevent identity theft.
     */
    rekognitions: outputs.ProjectConnectorsRekognition[];
    salesforceMarketingClouds: outputs.ProjectConnectorsSalesforceMarketingCloud[];
    /**
     * Salesforce is a leading cloud-based Customer Relationship Management (CRM) platform that helps businesses streamline their sales, service, and marketing operations.
     */
    salesforces: outputs.ProjectConnectorsSalesforce[];
    /**
     * Segment, an analytics product that allows you to collects events from web and mobile apps, unify those and use those to better understand your customers needs.
     */
    segments: outputs.ProjectConnectorsSegment[];
    sendgrids: outputs.ProjectConnectorsSendgrid[];
    ses: outputs.ProjectConnectorsSe[];
    /**
     * Send updates to your team on Slack.
     */
    slacks: outputs.ProjectConnectorsSlack[];
    /**
     * Localize the language of your login and user journey screens with the Smartling connector.
     */
    smartlings: outputs.ProjectConnectorsSmartling[];
    smtps: outputs.ProjectConnectorsSmtp[];
    sns: outputs.ProjectConnectorsSn[];
    /**
     * Sumo Logic, fast troubleshooting and investigation with AI/ML-powered log analytics
     */
    sumologics: outputs.ProjectConnectorsSumologic[];
    /**
     * Telesign Phone number intelligence API provides risk score for phone numbers.
     */
    telesigns: outputs.ProjectConnectorsTelesign[];
    /**
     * API security for a cloud-first, API-driven world.
     */
    traceables: outputs.ProjectConnectorsTraceable[];
    twilioCores: outputs.ProjectConnectorsTwilioCore[];
    twilioVerifies: outputs.ProjectConnectorsTwilioVerify[];
}

export interface ProjectConnectorsAbuseipdb {
    /**
     * The unique AbuseIPDB API key.
     */
    apiKey: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsAmplitude {
    /**
     * The Amplitude API Key generated for the Descope service.
     */
    apiKey: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The server URL of the Amplitude API, when using different api or a custom domain in Amplitude.
     */
    serverUrl: string;
    /**
     * `EU` or `US`. Sets the Amplitude server zone. Set this to `EU` for Amplitude projects created in `EU` data center. Default is `US`.
     */
    serverZone: string;
}

export interface ProjectConnectorsAuditWebhook {
    /**
     * Specify which events will be sent to the external audit service (including tenant selection).
     */
    auditFilters: outputs.ProjectConnectorsAuditWebhookAuditFilter[];
    /**
     * Authentication Information
     */
    authentication: outputs.ProjectConnectorsAuditWebhookAuthentication;
    /**
     * The base URL to fetch
     */
    baseUrl: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * The headers to send with the request
     */
    headers: {[key: string]: string};
    /**
     * HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
     */
    hmacSecret: string;
    id: string;
    /**
     * Will ignore certificate errors raised by the client
     */
    insecure: boolean;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsAuditWebhookAuditFilter {
    key: string;
    operator: string;
    values: string[];
}

export interface ProjectConnectorsAuditWebhookAuthentication {
    apiKey: outputs.ProjectConnectorsAuditWebhookAuthenticationApiKey;
    basic: outputs.ProjectConnectorsAuditWebhookAuthenticationBasic;
    bearerToken: string;
}

export interface ProjectConnectorsAuditWebhookAuthenticationApiKey {
    key: string;
    token: string;
}

export interface ProjectConnectorsAuditWebhookAuthenticationBasic {
    password: string;
    username: string;
}

export interface ProjectConnectorsAwsS3 {
    /**
     * The unique AWS access key ID.
     */
    accessKeyId: string;
    auditEnabled: boolean;
    auditFilters: outputs.ProjectConnectorsAwsS3AuditFilter[];
    /**
     * The AWS S3 bucket. This bucket should already exist for the connector to work.
     */
    bucket: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The AWS S3 region, e.g. `us-east-1`.
     */
    region: string;
    /**
     * The secret AWS access key.
     */
    secretAccessKey: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsAwsS3AuditFilter {
    key: string;
    operator: string;
    values: string[];
}

export interface ProjectConnectorsAwsTranslate {
    /**
     * AWS access key ID.
     */
    accessKeyId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The AWS region to which this client will send requests. (e.g. us-east-1.)
     */
    region: string;
    /**
     * AWS secret access key.
     */
    secretAccessKey: string;
    /**
     * (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
     */
    sessionToken: string;
}

export interface ProjectConnectorsClear {
    /**
     * Your CLEAR API key.
     */
    apiKey: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Your CLEAR project ID.
     */
    projectId: string;
}

export interface ProjectConnectorsDatadog {
    /**
     * The unique Datadog organization key.
     */
    apiKey: string;
    auditEnabled: boolean;
    auditFilters: outputs.ProjectConnectorsDatadogAuditFilter[];
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Datadog site to send logs to. Default is `datadoghq.com`. European, free tier and other customers should set their site accordingly.
     */
    site: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsDatadogAuditFilter {
    key: string;
    operator: string;
    values: string[];
}

export interface ProjectConnectorsDevrevGrow {
    /**
     * Authentication to DevRev APIs requires a personal access token (PAT).
     */
    apiKey: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsDocebo {
    /**
     * The Docebo api base url.
     */
    baseUrl: string;
    /**
     * The Docebo OAuth 2.0 app client ID.
     */
    clientId: string;
    /**
     * The Docebo OAuth 2.0 app client secret.
     */
    clientSecret: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Docebo user's password.
     */
    password: string;
    /**
     * The Docebo username.
     */
    username: string;
}

export interface ProjectConnectorsFingerprint {
    /**
     * The Cloudflare integration Endpoint URL.
     */
    cloudflareEndpointUrl: string;
    /**
     * The Cloudflare integration Script URL.
     */
    cloudflareScriptUrl: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Fingerprint public API key.
     */
    publicApiKey: string;
    /**
     * The Fingerprint secret API key.
     */
    secretApiKey: string;
    /**
     * Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
     */
    useCloudflareIntegration: boolean;
}

export interface ProjectConnectorsFingerprintDescope {
    /**
     * The custom domain to fetch
     */
    customDomain: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsForter {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Override the user IP address.
     */
    overrideIpAddress: string;
    /**
     * Override the user email.
     */
    overrideUserEmail: string;
    /**
     * Override the user's IP address or email so that Forter can provide a specific decision or recommendation. Contact the Forter team for further details. Note: Overriding the user IP address or email is intended for testing purpose and should not be utilized in production environments.
     */
    overrides: boolean;
    /**
     * The Forter secret key.
     */
    secretKey: string;
    /**
     * The Forter site ID.
     */
    siteId: string;
}

export interface ProjectConnectorsGenericSmsGateway {
    /**
     * Authentication Information
     */
    authentication: outputs.ProjectConnectorsGenericSmsGatewayAuthentication;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * The headers to send with the request
     */
    headers: {[key: string]: string};
    /**
     * HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
     */
    hmacSecret: string;
    id: string;
    /**
     * Will ignore certificate errors raised by the client
     */
    insecure: boolean;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The URL of the post message request
     */
    postUrl: string;
    /**
     * The sender number
     */
    sender: string;
    /**
     * Whether the connector should send all requests from specific static IPs.
     */
    useStaticIps: boolean;
}

export interface ProjectConnectorsGenericSmsGatewayAuthentication {
    apiKey: outputs.ProjectConnectorsGenericSmsGatewayAuthenticationApiKey;
    basic: outputs.ProjectConnectorsGenericSmsGatewayAuthenticationBasic;
    bearerToken: string;
}

export interface ProjectConnectorsGenericSmsGatewayAuthenticationApiKey {
    key: string;
    token: string;
}

export interface ProjectConnectorsGenericSmsGatewayAuthenticationBasic {
    password: string;
    username: string;
}

export interface ProjectConnectorsGoogleCloudTranslation {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Google Cloud project ID where the Google Cloud Translation is managed.
     */
    projectId: string;
    /**
     * Service Account JSON associated with the current project.
     */
    serviceAccountJson: string;
}

export interface ProjectConnectorsHibp {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsHttp {
    /**
     * Authentication Information
     */
    authentication: outputs.ProjectConnectorsHttpAuthentication;
    /**
     * The base URL to fetch
     */
    baseUrl: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * The headers to send with the request
     */
    headers: {[key: string]: string};
    /**
     * HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
     */
    hmacSecret: string;
    id: string;
    /**
     * The connector response context will also include the headers. The context will have a "body" attribute and a "headers" attribute. See more details in the help guide
     */
    includeHeadersInContext: boolean;
    /**
     * Will ignore certificate errors raised by the client
     */
    insecure: boolean;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Whether the connector should send all requests from specific static IPs.
     */
    useStaticIps: boolean;
}

export interface ProjectConnectorsHttpAuthentication {
    apiKey: outputs.ProjectConnectorsHttpAuthenticationApiKey;
    basic: outputs.ProjectConnectorsHttpAuthenticationBasic;
    bearerToken: string;
}

export interface ProjectConnectorsHttpAuthenticationApiKey {
    key: string;
    token: string;
}

export interface ProjectConnectorsHttpAuthenticationBasic {
    password: string;
    username: string;
}

export interface ProjectConnectorsHubspot {
    /**
     * The HubSpot private API access token generated for the Descope service.
     */
    accessToken: string;
    /**
     * The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
     */
    baseUrl: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Whether the connector should send all requests from specific static IPs.
     */
    useStaticIps: boolean;
}

export interface ProjectConnectorsIncode {
    /**
     * Your InCode API key.
     */
    apiKey: string;
    /**
     * The base URL of the Incode API
     */
    apiUrl: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * Your wanted InCode's flow ID.
     */
    flowId: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsIntercom {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Regional Hosting - US, EU, or AU. default: US
     */
    region: string;
    /**
     * The Intercom access token.
     */
    token: string;
}

export interface ProjectConnectorsLokalise {
    /**
     * Lokalise API token.
     */
    apiToken: string;
    /**
     * (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
     */
    cardId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Lokalise project ID.
     */
    projectId: string;
    /**
     * Lokalise team ID. If not provided, the oldest available team will be used.
     */
    teamId: string;
    /**
     * The translation provider to use ('gengo', 'google', 'lokalise', 'deepl'), default is 'deepl'.
     */
    translationProvider: string;
}

export interface ProjectConnectorsMparticle {
    /**
     * The mParticle Server to Server Key generated for the Descope service.
     */
    apiKey: string;
    /**
     * The mParticle Server to Server Secret generated for the Descope service.
     */
    apiSecret: string;
    /**
     * The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
     */
    baseUrl: string;
    /**
     * The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
     */
    defaultEnvironment: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Whether the connector should send all requests from specific static IPs.
     */
    useStaticIps: boolean;
}

export interface ProjectConnectorsNewrelic {
    /**
     * Ingest License Key of the account you want to report data to.
     */
    apiKey: string;
    auditEnabled: boolean;
    auditFilters: outputs.ProjectConnectorsNewrelicAuditFilter[];
    /**
     * The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
     */
    dataCenter: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * Specify a custom prefix for all log fields. The default prefix is `descope.`.
     */
    logsPrefix: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Enable this option to use a custom prefix for log fields.
     */
    overrideLogsPrefix: boolean;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsNewrelicAuditFilter {
    key: string;
    operator: string;
    values: string[];
}

export interface ProjectConnectorsRecaptcha {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user's response.
     */
    secretKey: string;
    /**
     * The site key is used to invoke reCAPTCHA service on your site or mobile application.
     */
    siteKey: string;
}

export interface ProjectConnectorsRecaptchaEnterprise {
    /**
     * API key associated with the current project.
     */
    apiKey: string;
    /**
     * When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
     */
    assessmentScore: number;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    enterprise: boolean;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
     */
    overrideAssessment: boolean;
    /**
     * The Google Cloud project ID where the reCAPTCHA Enterprise is managed.
     */
    projectId: string;
    /**
     * The site key is used to invoke reCAPTCHA Enterprise service on your site or mobile application.
     */
    siteKey: string;
}

export interface ProjectConnectorsRekognition {
    /**
     * The AWS access key ID
     */
    accessKeyId: string;
    /**
     * The collection to store registered users in. Should match `[a-zA-Z0-9_.-]+` pattern. Changing this will cause losing existing users.
     */
    collectionId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The AWS secret access key
     */
    secretAccessKey: string;
}

export interface ProjectConnectorsSalesforce {
    /**
     * The Salesforce API base URL.
     */
    baseUrl: string;
    /**
     * The consumer key of the connected app.
     */
    clientId: string;
    /**
     * The consumer secret of the connected app.
     */
    clientSecret: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * REST API Version.
     */
    version: string;
}

export interface ProjectConnectorsSalesforceMarketingCloud {
    /**
     * Account identifier, or MID, of the target business unit.
     */
    accountId: string;
    /**
     * Client ID issued when you create the API integration in Installed Packages.
     */
    clientId: string;
    /**
     * Client secret issued when you create the API integration in Installed Packages.
     */
    clientSecret: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * Space-separated list of data-access permissions for your connector.
     */
    scope: string;
    /**
     * The Salesforce Marketing Cloud endpoint subdomain.
     */
    subdomain: string;
}

export interface ProjectConnectorsSe {
    /**
     * AWS Access key ID.
     */
    accessKeyId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * An optional endpoint URL (hostname only or fully qualified URI).
     */
    endpoint: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * AWS region to send requests to (e.g. `us-west-2`).
     */
    region: string;
    /**
     * AWS Secret Access Key.
     */
    secret: string;
    /**
     * The sender details that should be displayed in the email message.
     */
    sender: outputs.ProjectConnectorsSeSender;
}

export interface ProjectConnectorsSeSender {
    email: string;
    name: string;
}

export interface ProjectConnectorsSegment {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * The base URL of the Segment API, when using a custom domain in Segment.
     */
    host: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Segment Write Key generated for the Descope service.
     */
    writeKey: string;
}

export interface ProjectConnectorsSendgrid {
    authentication: outputs.ProjectConnectorsSendgridAuthentication;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The sender details that should be displayed in the email message.
     */
    sender: outputs.ProjectConnectorsSendgridSender;
}

export interface ProjectConnectorsSendgridAuthentication {
    apiKey: string;
}

export interface ProjectConnectorsSendgridSender {
    email: string;
    name: string;
}

export interface ProjectConnectorsSlack {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The OAuth token for Slack's Bot User, used to authenticate API requests.
     */
    token: string;
}

export interface ProjectConnectorsSmartling {
    /**
     * The account UID for the Smartling account.
     */
    accountUid: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The user identifier for the Smartling account.
     */
    userIdentifier: string;
    /**
     * The user secret for the Smartling account.
     */
    userSecret: string;
}

export interface ProjectConnectorsSmtp {
    authentication: outputs.ProjectConnectorsSmtpAuthentication;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The sender details that should be displayed in the email message.
     */
    sender: outputs.ProjectConnectorsSmtpSender;
    server: outputs.ProjectConnectorsSmtpServer;
}

export interface ProjectConnectorsSmtpAuthentication {
    method: string;
    password: string;
    username: string;
}

export interface ProjectConnectorsSmtpSender {
    email: string;
    name: string;
}

export interface ProjectConnectorsSmtpServer {
    host: string;
    port: number;
}

export interface ProjectConnectorsSn {
    /**
     * AWS Access key ID.
     */
    accessKeyId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * An optional endpoint URL (hostname only or fully qualified URI).
     */
    endpoint: string;
    /**
     * The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
     */
    entityId: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
     */
    organizationNumber: string;
    /**
     * AWS region to send requests to (e.g. `us-west-2`).
     */
    region: string;
    /**
     * AWS Secret Access Key.
     */
    secret: string;
    /**
     * The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
     */
    senderId: string;
    /**
     * The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
     */
    templateId: string;
}

export interface ProjectConnectorsSumologic {
    auditEnabled: boolean;
    auditFilters: outputs.ProjectConnectorsSumologicAuditFilter[];
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * The URL associated with an HTTP Hosted collector
     */
    httpSourceUrl: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsSumologicAuditFilter {
    key: string;
    operator: string;
    values: string[];
}

export interface ProjectConnectorsTelesign {
    /**
     * The unique Telesign API key
     */
    apiKey: string;
    /**
     * The unique Telesign account Customer ID
     */
    customerId: string;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
}

export interface ProjectConnectorsTraceable {
    /**
     * A description of what your connector is used for.
     */
    description: string;
    /**
     * EU(Europe) Region deployment of Traceable platform.
     */
    euRegion: boolean;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    /**
     * The Traceable secret key.
     */
    secretKey: string;
}

export interface ProjectConnectorsTwilioCore {
    accountSid: string;
    authentication: outputs.ProjectConnectorsTwilioCoreAuthentication;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    senders: outputs.ProjectConnectorsTwilioCoreSenders;
}

export interface ProjectConnectorsTwilioCoreAuthentication {
    apiKey: string;
    apiSecret: string;
    authToken: string;
}

export interface ProjectConnectorsTwilioCoreSenders {
    sms: outputs.ProjectConnectorsTwilioCoreSendersSms;
    voice: outputs.ProjectConnectorsTwilioCoreSendersVoice;
}

export interface ProjectConnectorsTwilioCoreSendersSms {
    messagingServiceSid: string;
    phoneNumber: string;
}

export interface ProjectConnectorsTwilioCoreSendersVoice {
    phoneNumber: string;
}

export interface ProjectConnectorsTwilioVerify {
    accountSid: string;
    authentication: outputs.ProjectConnectorsTwilioVerifyAuthentication;
    /**
     * A description of what your connector is used for.
     */
    description: string;
    id: string;
    /**
     * A custom name for your connector.
     */
    name: string;
    sender: string;
    serviceSid: string;
}

export interface ProjectConnectorsTwilioVerifyAuthentication {
    apiKey: string;
    apiSecret: string;
    authToken: string;
}

export interface ProjectFlows {
    data: string;
}

export interface ProjectInviteSettings {
    addMagiclinkToken: boolean;
    inviteUrl: string;
    requireInvitation: boolean;
    sendEmail: boolean;
    sendText: boolean;
}

export interface ProjectJwtTemplates {
    /**
     * A list of `Access Key` type JWT Templates.
     */
    accessKeyTemplates: outputs.ProjectJwtTemplatesAccessKeyTemplate[];
    /**
     * A list of `User` type JWT Templates.
     */
    userTemplates: outputs.ProjectJwtTemplatesUserTemplate[];
}

export interface ProjectJwtTemplatesAccessKeyTemplate {
    /**
     * The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     */
    authSchema: string;
    conformanceIssuer: boolean;
    /**
     * Description of the JWT Template.
     */
    description: string;
    /**
     * Policy for empty claims - `none`, `nil` or `delete`.
     */
    emptyClaimPolicy: string;
    enforceIssuer: boolean;
    id: string;
    /**
     * Name of the JWT Template.
     */
    name: string;
    template: string;
}

export interface ProjectJwtTemplatesUserTemplate {
    /**
     * The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     */
    authSchema: string;
    conformanceIssuer: boolean;
    /**
     * Description of the JWT Template.
     */
    description: string;
    /**
     * Policy for empty claims - `none`, `nil` or `delete`.
     */
    emptyClaimPolicy: string;
    enforceIssuer: boolean;
    id: string;
    /**
     * Name of the JWT Template.
     */
    name: string;
    template: string;
}

export interface ProjectProjectSettings {
    /**
     * Name of the access key JWT Template.
     */
    accessKeyJwtTemplate: string;
    /**
     * The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
     */
    accessKeySessionTokenExpiration: string;
    appUrl: string;
    /**
     * The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
     */
    approvedDomains: string[];
    /**
     * The domain name for custom domain set up. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     */
    cookieDomain: string;
    /**
     * Use "strict", "lax" or "none". To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     */
    cookiePolicy: string;
    customDomain: string;
    /**
     * Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
     */
    enableInactivity: boolean;
    /**
     * The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
     */
    inactivityTime: string;
    /**
     * The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
     */
    refreshTokenExpiration: string;
    /**
     * Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
     */
    refreshTokenRotation: boolean;
    /**
     * The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
     */
    sessionTokenExpiration: string;
    /**
     * The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
     */
    stepUpTokenExpiration: string;
    /**
     * Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
     */
    testUsersLoginidRegexp: string;
    /**
     * A 6 digit static OTP code for use with test users.
     */
    testUsersStaticOtp: string;
    /**
     * The pattern of the verifiers that will be used for testing.
     */
    testUsersVerifierRegexp: string;
    /**
     * Configure how refresh tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
     */
    tokenResponseMethod: string;
    /**
     * The expiry time for the trusted device token. The minimum value is "3 minutes".
     */
    trustedDeviceTokenExpiration: string;
    /**
     * Name of the user JWT Template.
     */
    userJwtTemplate: string;
}

export interface ProjectStyles {
    data: string;
}

