// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProjectApplications {
    oidcs: outputs.ProjectApplicationsOidc[];
    samls: outputs.ProjectApplicationsSaml[];
}

export interface ProjectApplicationsOidc {
    claims: string[];
    description: string;
    disabled: boolean;
    id: string;
    loginPageUrl: string;
    logo: string;
    name: string;
}

export interface ProjectApplicationsSaml {
    acsAllowedCallbackUrls: string[];
    attributeMappings: outputs.ProjectApplicationsSamlAttributeMapping[];
    defaultRelayState: string;
    description: string;
    disabled: boolean;
    dynamicConfiguration: outputs.ProjectApplicationsSamlDynamicConfiguration;
    id: string;
    loginPageUrl: string;
    logo: string;
    manualConfiguration: outputs.ProjectApplicationsSamlManualConfiguration;
    name: string;
    subjectNameIdFormat: string;
    subjectNameIdType: string;
}

export interface ProjectApplicationsSamlAttributeMapping {
    name: string;
    value: string;
}

export interface ProjectApplicationsSamlDynamicConfiguration {
    metadataUrl: string;
}

export interface ProjectApplicationsSamlManualConfiguration {
    acsUrl: string;
    certificate: string;
    entityId: string;
}

export interface ProjectAttributes {
    tenants: outputs.ProjectAttributesTenant[];
    users: outputs.ProjectAttributesUser[];
}

export interface ProjectAttributesTenant {
    name: string;
    selectOptions: string[];
    type: string;
}

export interface ProjectAttributesUser {
    name: string;
    selectOptions: string[];
    type: string;
    widgetAuthorization: outputs.ProjectAttributesUserWidgetAuthorization;
}

export interface ProjectAttributesUserWidgetAuthorization {
    editPermissions: string[];
    viewPermissions: string[];
}

export interface ProjectAuthentication {
    embeddedLink: outputs.ProjectAuthenticationEmbeddedLink;
    enchantedLink: outputs.ProjectAuthenticationEnchantedLink;
    magicLink: outputs.ProjectAuthenticationMagicLink;
    oauth: outputs.ProjectAuthenticationOauth;
    otp: outputs.ProjectAuthenticationOtp;
    password: outputs.ProjectAuthenticationPassword;
    sso: outputs.ProjectAuthenticationSso;
    totp: outputs.ProjectAuthenticationTotp;
    webauthn: outputs.ProjectAuthenticationWebauthn;
}

export interface ProjectAuthenticationEmbeddedLink {
    enabled: boolean;
    expirationTime: number;
    expirationTimeUnit: string;
}

export interface ProjectAuthenticationEnchantedLink {
    emailService: outputs.ProjectAuthenticationEnchantedLinkEmailService;
    enabled: boolean;
    expirationTime: number;
    expirationTimeUnit: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationEnchantedLinkEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationEnchantedLinkEmailServiceTemplate[];
}

export interface ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationMagicLink {
    emailService: outputs.ProjectAuthenticationMagicLinkEmailService;
    enabled: boolean;
    expirationTime: number;
    expirationTimeUnit: string;
    redirectUrl: string;
    textService: outputs.ProjectAuthenticationMagicLinkTextService;
}

export interface ProjectAuthenticationMagicLinkEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationMagicLinkEmailServiceTemplate[];
}

export interface ProjectAuthenticationMagicLinkEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationMagicLinkTextService {
    connector: string;
    templates: outputs.ProjectAuthenticationMagicLinkTextServiceTemplate[];
}

export interface ProjectAuthenticationMagicLinkTextServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationOauth {
    custom: {[key: string]: outputs.ProjectAuthenticationOauthCustom};
    disabled: boolean;
    system: outputs.ProjectAuthenticationOauthSystem;
}

export interface ProjectAuthenticationOauthCustom {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthCustomProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthCustomProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystem {
    apple: outputs.ProjectAuthenticationOauthSystemApple;
    discord: outputs.ProjectAuthenticationOauthSystemDiscord;
    facebook: outputs.ProjectAuthenticationOauthSystemFacebook;
    github: outputs.ProjectAuthenticationOauthSystemGithub;
    gitlab: outputs.ProjectAuthenticationOauthSystemGitlab;
    google: outputs.ProjectAuthenticationOauthSystemGoogle;
    linkedin: outputs.ProjectAuthenticationOauthSystemLinkedin;
    microsoft: outputs.ProjectAuthenticationOauthSystemMicrosoft;
    slack: outputs.ProjectAuthenticationOauthSystemSlack;
}

export interface ProjectAuthenticationOauthSystemApple {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemAppleProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemDiscord {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemDiscordProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemFacebook {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemFacebookProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGithub {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGithubProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGitlab {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGitlabProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemGoogle {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemGoogleProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemLinkedin {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemMicrosoft {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOauthSystemSlack {
    authorizationEndpoint: string;
    claimMapping: {[key: string]: string};
    clientId: string;
    clientSecret: string;
    description: string;
    disabled: boolean;
    grantType: string;
    issuer: string;
    jwksEndpoint: string;
    logo: string;
    mergeUserAccounts: boolean;
    prompts: string[];
    providerTokenManagement: outputs.ProjectAuthenticationOauthSystemSlackProviderTokenManagement;
    scopes: string[];
    tokenEndpoint: string;
    userInfoEndpoint: string;
}

export interface ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
    callbackDomain: string;
    redirectUrl: string;
}

export interface ProjectAuthenticationOtp {
    domain: string;
    emailService: outputs.ProjectAuthenticationOtpEmailService;
    enabled: boolean;
    expirationTime: number;
    expirationTimeUnit: string;
    textService: outputs.ProjectAuthenticationOtpTextService;
    voiceService: outputs.ProjectAuthenticationOtpVoiceService;
}

export interface ProjectAuthenticationOtpEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpEmailServiceTemplate[];
}

export interface ProjectAuthenticationOtpEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationOtpTextService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpTextServiceTemplate[];
}

export interface ProjectAuthenticationOtpTextServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationOtpVoiceService {
    connector: string;
    templates: outputs.ProjectAuthenticationOtpVoiceServiceTemplate[];
}

export interface ProjectAuthenticationOtpVoiceServiceTemplate {
    active: boolean;
    body: string;
    id: string;
    name: string;
}

export interface ProjectAuthenticationPassword {
    emailService: outputs.ProjectAuthenticationPasswordEmailService;
    enabled: boolean;
    expiration: boolean;
    expirationWeeks: number;
    lock: boolean;
    lockAttempts: number;
    lowercase: boolean;
    minLength: number;
    nonAlphanumeric: boolean;
    number: boolean;
    reuse: boolean;
    reuseAmount: number;
    uppercase: boolean;
}

export interface ProjectAuthenticationPasswordEmailService {
    connector: string;
    templates: outputs.ProjectAuthenticationPasswordEmailServiceTemplate[];
}

export interface ProjectAuthenticationPasswordEmailServiceTemplate {
    active: boolean;
    htmlBody: string;
    id: string;
    name: string;
    plainTextBody: string;
    subject: string;
    usePlainTextBody: boolean;
}

export interface ProjectAuthenticationSso {
    enabled: boolean;
    mergeUsers: boolean;
}

export interface ProjectAuthenticationTotp {
    enabled: boolean;
}

export interface ProjectAuthenticationWebauthn {
    enabled: boolean;
    topLevelDomain: string;
}

export interface ProjectAuthorization {
    permissions: outputs.ProjectAuthorizationPermission[];
    roles: outputs.ProjectAuthorizationRole[];
}

export interface ProjectAuthorizationPermission {
    description: string;
    id: string;
    name: string;
}

export interface ProjectAuthorizationRole {
    description: string;
    id: string;
    name: string;
    permissions: string[];
}

export interface ProjectConnectors {
    abuseipdbs: outputs.ProjectConnectorsAbuseipdb[];
    amplitudes: outputs.ProjectConnectorsAmplitude[];
    auditWebhooks: outputs.ProjectConnectorsAuditWebhook[];
    awsS3s: outputs.ProjectConnectorsAwsS3[];
    awsTranslates: outputs.ProjectConnectorsAwsTranslate[];
    clears: outputs.ProjectConnectorsClear[];
    datadogs: outputs.ProjectConnectorsDatadog[];
    devrevGrows: outputs.ProjectConnectorsDevrevGrow[];
    docebos: outputs.ProjectConnectorsDocebo[];
    forters: outputs.ProjectConnectorsForter[];
    googleCloudTranslations: outputs.ProjectConnectorsGoogleCloudTranslation[];
    hibps: outputs.ProjectConnectorsHibp[];
    https: outputs.ProjectConnectorsHttp[];
    hubspots: outputs.ProjectConnectorsHubspot[];
    intercoms: outputs.ProjectConnectorsIntercom[];
    newrelics: outputs.ProjectConnectorsNewrelic[];
    recaptchaEnterprises: outputs.ProjectConnectorsRecaptchaEnterprise[];
    recaptchas: outputs.ProjectConnectorsRecaptcha[];
    rekognitions: outputs.ProjectConnectorsRekognition[];
    salesforces: outputs.ProjectConnectorsSalesforce[];
    segments: outputs.ProjectConnectorsSegment[];
    sendgrids: outputs.ProjectConnectorsSendgrid[];
    smtps: outputs.ProjectConnectorsSmtp[];
    sumologics: outputs.ProjectConnectorsSumologic[];
    telesigns: outputs.ProjectConnectorsTelesign[];
    traceables: outputs.ProjectConnectorsTraceable[];
    twilioCores: outputs.ProjectConnectorsTwilioCore[];
    twilioVerifies: outputs.ProjectConnectorsTwilioVerify[];
    veriffs: outputs.ProjectConnectorsVeriff[];
}

export interface ProjectConnectorsAbuseipdb {
    apiKey: string;
    description: string;
    id: string;
    name: string;
}

export interface ProjectConnectorsAmplitude {
    apiKey: string;
    description: string;
    id: string;
    name: string;
    serverUrl: string;
    serverZone: string;
}

export interface ProjectConnectorsAuditWebhook {
    auditFilters: string;
    authentication: outputs.ProjectConnectorsAuditWebhookAuthentication;
    baseUrl: string;
    description: string;
    headers: {[key: string]: string};
    hmacSecret: string;
    id: string;
    insecure: boolean;
    name: string;
}

export interface ProjectConnectorsAuditWebhookAuthentication {
    apiKey: outputs.ProjectConnectorsAuditWebhookAuthenticationApiKey;
    basic: outputs.ProjectConnectorsAuditWebhookAuthenticationBasic;
    bearerToken: string;
}

export interface ProjectConnectorsAuditWebhookAuthenticationApiKey {
    key: string;
    token: string;
}

export interface ProjectConnectorsAuditWebhookAuthenticationBasic {
    password: string;
    username: string;
}

export interface ProjectConnectorsAwsS3 {
    accessKeyId: string;
    auditFilters: string;
    bucket: string;
    description: string;
    id: string;
    name: string;
    region: string;
    secretAccessKey: string;
}

export interface ProjectConnectorsAwsTranslate {
    accessKeyId: string;
    description: string;
    id: string;
    name: string;
    region: string;
    secretAccessKey: string;
    sessionToken: string;
}

export interface ProjectConnectorsClear {
    apiKey: string;
    description: string;
    id: string;
    name: string;
    projectId: string;
}

export interface ProjectConnectorsDatadog {
    apiKey: string;
    auditEnabled: boolean;
    auditFilters: string;
    description: string;
    id: string;
    name: string;
    site: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsDevrevGrow {
    apiKey: string;
    description: string;
    id: string;
    name: string;
}

export interface ProjectConnectorsDocebo {
    baseUrl: string;
    clientId: string;
    clientSecret: string;
    description: string;
    id: string;
    name: string;
    password: string;
    username: string;
}

export interface ProjectConnectorsForter {
    description: string;
    id: string;
    name: string;
    overrideIpAddress: string;
    overrideUserEmail: string;
    overrides: boolean;
    secretKey: string;
    siteId: string;
}

export interface ProjectConnectorsGoogleCloudTranslation {
    description: string;
    id: string;
    name: string;
    projectId: string;
    serviceAccountJson: string;
}

export interface ProjectConnectorsHibp {
    description: string;
    id: string;
    name: string;
}

export interface ProjectConnectorsHttp {
    authentication: outputs.ProjectConnectorsHttpAuthentication;
    baseUrl: string;
    description: string;
    headers: {[key: string]: string};
    hmacSecret: string;
    id: string;
    includeHeadersInContext: boolean;
    insecure: boolean;
    name: string;
}

export interface ProjectConnectorsHttpAuthentication {
    apiKey: outputs.ProjectConnectorsHttpAuthenticationApiKey;
    basic: outputs.ProjectConnectorsHttpAuthenticationBasic;
    bearerToken: string;
}

export interface ProjectConnectorsHttpAuthenticationApiKey {
    key: string;
    token: string;
}

export interface ProjectConnectorsHttpAuthenticationBasic {
    password: string;
    username: string;
}

export interface ProjectConnectorsHubspot {
    accessToken: string;
    baseUrl: string;
    description: string;
    id: string;
    name: string;
}

export interface ProjectConnectorsIntercom {
    description: string;
    id: string;
    name: string;
    region: string;
    token: string;
}

export interface ProjectConnectorsNewrelic {
    apiKey: string;
    auditEnabled: boolean;
    auditFilters: string;
    dataCenter: string;
    description: string;
    id: string;
    name: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsRecaptcha {
    description: string;
    id: string;
    name: string;
    secretKey: string;
    siteKey: string;
}

export interface ProjectConnectorsRecaptchaEnterprise {
    apiKey: string;
    assessmentScore: number;
    description: string;
    id: string;
    name: string;
    overrideAssessment: boolean;
    projectId: string;
    siteKey: string;
}

export interface ProjectConnectorsRekognition {
    accessKeyId: string;
    collectionId: string;
    description: string;
    id: string;
    name: string;
    secretAccessKey: string;
}

export interface ProjectConnectorsSalesforce {
    baseUrl: string;
    clientId: string;
    clientSecret: string;
    description: string;
    id: string;
    name: string;
    version: string;
}

export interface ProjectConnectorsSegment {
    description: string;
    host: string;
    id: string;
    name: string;
    writeKey: string;
}

export interface ProjectConnectorsSendgrid {
    authentication: outputs.ProjectConnectorsSendgridAuthentication;
    description: string;
    id: string;
    name: string;
    sender: outputs.ProjectConnectorsSendgridSender;
}

export interface ProjectConnectorsSendgridAuthentication {
    apiKey: string;
}

export interface ProjectConnectorsSendgridSender {
    email: string;
    name: string;
}

export interface ProjectConnectorsSmtp {
    authentication: outputs.ProjectConnectorsSmtpAuthentication;
    description: string;
    id: string;
    name: string;
    sender: outputs.ProjectConnectorsSmtpSender;
    server: outputs.ProjectConnectorsSmtpServer;
}

export interface ProjectConnectorsSmtpAuthentication {
    method: string;
    password: string;
    username: string;
}

export interface ProjectConnectorsSmtpSender {
    email: string;
    name: string;
}

export interface ProjectConnectorsSmtpServer {
    host: string;
    port: number;
}

export interface ProjectConnectorsSumologic {
    auditEnabled: boolean;
    auditFilters: string;
    description: string;
    httpSourceUrl: string;
    id: string;
    name: string;
    troubleshootLogEnabled: boolean;
}

export interface ProjectConnectorsTelesign {
    apiKey: string;
    customerId: string;
    description: string;
    id: string;
    name: string;
}

export interface ProjectConnectorsTraceable {
    description: string;
    euRegion: boolean;
    id: string;
    name: string;
    secretKey: string;
}

export interface ProjectConnectorsTwilioCore {
    accountSid: string;
    authentication: outputs.ProjectConnectorsTwilioCoreAuthentication;
    description: string;
    id: string;
    name: string;
    senders: outputs.ProjectConnectorsTwilioCoreSenders;
}

export interface ProjectConnectorsTwilioCoreAuthentication {
    apiKey: string;
    apiSecret: string;
    authToken: string;
}

export interface ProjectConnectorsTwilioCoreSenders {
    sms: outputs.ProjectConnectorsTwilioCoreSendersSms;
    voice: outputs.ProjectConnectorsTwilioCoreSendersVoice;
}

export interface ProjectConnectorsTwilioCoreSendersSms {
    messagingServiceSid: string;
    phoneNumber: string;
}

export interface ProjectConnectorsTwilioCoreSendersVoice {
    phoneNumber: string;
}

export interface ProjectConnectorsTwilioVerify {
    accountSid: string;
    authentication: outputs.ProjectConnectorsTwilioVerifyAuthentication;
    description: string;
    id: string;
    name: string;
    sender: string;
    serviceSid: string;
}

export interface ProjectConnectorsTwilioVerifyAuthentication {
    apiKey: string;
    apiSecret: string;
    authToken: string;
}

export interface ProjectConnectorsVeriff {
    apiKey: string;
    baseUrl: string;
    description: string;
    id: string;
    name: string;
    secretKey: string;
}

export interface ProjectFlows {
    data: string;
}

export interface ProjectJwtTemplates {
    templates: outputs.ProjectJwtTemplatesTemplate[];
}

export interface ProjectJwtTemplatesTemplate {
    authSchema: string;
    conformanceIssuer: boolean;
    description: string;
    id: string;
    name: string;
    template: string;
    type: string;
}

export interface ProjectProjectSettings {
    accessKeyJwtTemplate: string;
    cookiePolicy: number;
    domain: string;
    enableInactivity: boolean;
    inactivityTime: string;
    refreshTokenExpiration: string;
    userJwtTemplate: string;
}

export interface ProjectStyles {
    data: string;
}

