// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ProjectApplicationsSamlApplicationManualConfiguration {
    /**
     * @return Enter the `ACS URL` from the SP.
     * 
     */
    private String acsUrl;
    /**
     * @return Enter the `Certificate` from the SP.
     * 
     */
    private String certificate;
    /**
     * @return Enter the `Entity Id` from the SP.
     * 
     */
    private String entityId;

    private ProjectApplicationsSamlApplicationManualConfiguration() {}
    /**
     * @return Enter the `ACS URL` from the SP.
     * 
     */
    public String acsUrl() {
        return this.acsUrl;
    }
    /**
     * @return Enter the `Certificate` from the SP.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Enter the `Entity Id` from the SP.
     * 
     */
    public String entityId() {
        return this.entityId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectApplicationsSamlApplicationManualConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acsUrl;
        private String certificate;
        private String entityId;
        public Builder() {}
        public Builder(ProjectApplicationsSamlApplicationManualConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsUrl = defaults.acsUrl;
    	      this.certificate = defaults.certificate;
    	      this.entityId = defaults.entityId;
        }

        @CustomType.Setter
        public Builder acsUrl(String acsUrl) {
            if (acsUrl == null) {
              throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfiguration", "acsUrl");
            }
            this.acsUrl = acsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfiguration", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            if (entityId == null) {
              throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfiguration", "entityId");
            }
            this.entityId = entityId;
            return this;
        }
        public ProjectApplicationsSamlApplicationManualConfiguration build() {
            final var _resultValue = new ProjectApplicationsSamlApplicationManualConfiguration();
            _resultValue.acsUrl = acsUrl;
            _resultValue.certificate = certificate;
            _resultValue.entityId = entityId;
            return _resultValue;
        }
    }
}
