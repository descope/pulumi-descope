// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectConnectorsNewrelicAuditFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsNewrelicArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsNewrelicArgs Empty = new ProjectConnectorsNewrelicArgs();

    /**
     * Ingest License Key of the account you want to report data to.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    /**
     * @return Ingest License Key of the account you want to report data to.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }

    /**
     * Whether to enable streaming of audit events.
     * 
     */
    @Import(name="auditEnabled")
    private @Nullable Output<Boolean> auditEnabled;

    /**
     * @return Whether to enable streaming of audit events.
     * 
     */
    public Optional<Output<Boolean>> auditEnabled() {
        return Optional.ofNullable(this.auditEnabled);
    }

    /**
     * Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    @Import(name="auditFilters")
    private @Nullable Output<List<ProjectConnectorsNewrelicAuditFilterArgs>> auditFilters;

    /**
     * @return Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    public Optional<Output<List<ProjectConnectorsNewrelicAuditFilterArgs>>> auditFilters() {
        return Optional.ofNullable(this.auditFilters);
    }

    /**
     * The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
     * 
     */
    @Import(name="dataCenter")
    private @Nullable Output<String> dataCenter;

    /**
     * @return The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
     * 
     */
    public Optional<Output<String>> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Specify a custom prefix for all log fields. The default prefix is `descope.`.
     * 
     */
    @Import(name="logsPrefix")
    private @Nullable Output<String> logsPrefix;

    /**
     * @return Specify a custom prefix for all log fields. The default prefix is `descope.`.
     * 
     */
    public Optional<Output<String>> logsPrefix() {
        return Optional.ofNullable(this.logsPrefix);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Enable this option to use a custom prefix for log fields.
     * 
     */
    @Import(name="overrideLogsPrefix")
    private @Nullable Output<Boolean> overrideLogsPrefix;

    /**
     * @return Enable this option to use a custom prefix for log fields.
     * 
     */
    public Optional<Output<Boolean>> overrideLogsPrefix() {
        return Optional.ofNullable(this.overrideLogsPrefix);
    }

    /**
     * Whether to send troubleshooting events.
     * 
     */
    @Import(name="troubleshootLogEnabled")
    private @Nullable Output<Boolean> troubleshootLogEnabled;

    /**
     * @return Whether to send troubleshooting events.
     * 
     */
    public Optional<Output<Boolean>> troubleshootLogEnabled() {
        return Optional.ofNullable(this.troubleshootLogEnabled);
    }

    private ProjectConnectorsNewrelicArgs() {}

    private ProjectConnectorsNewrelicArgs(ProjectConnectorsNewrelicArgs $) {
        this.apiKey = $.apiKey;
        this.auditEnabled = $.auditEnabled;
        this.auditFilters = $.auditFilters;
        this.dataCenter = $.dataCenter;
        this.description = $.description;
        this.id = $.id;
        this.logsPrefix = $.logsPrefix;
        this.name = $.name;
        this.overrideLogsPrefix = $.overrideLogsPrefix;
        this.troubleshootLogEnabled = $.troubleshootLogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsNewrelicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsNewrelicArgs $;

        public Builder() {
            $ = new ProjectConnectorsNewrelicArgs();
        }

        public Builder(ProjectConnectorsNewrelicArgs defaults) {
            $ = new ProjectConnectorsNewrelicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey Ingest License Key of the account you want to report data to.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey Ingest License Key of the account you want to report data to.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(@Nullable Output<Boolean> auditEnabled) {
            $.auditEnabled = auditEnabled;
            return this;
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(Boolean auditEnabled) {
            return auditEnabled(Output.of(auditEnabled));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(@Nullable Output<List<ProjectConnectorsNewrelicAuditFilterArgs>> auditFilters) {
            $.auditFilters = auditFilters;
            return this;
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(List<ProjectConnectorsNewrelicAuditFilterArgs> auditFilters) {
            return auditFilters(Output.of(auditFilters));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(ProjectConnectorsNewrelicAuditFilterArgs... auditFilters) {
            return auditFilters(List.of(auditFilters));
        }

        /**
         * @param dataCenter The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
         * 
         * @return builder
         * 
         */
        public Builder dataCenter(@Nullable Output<String> dataCenter) {
            $.dataCenter = dataCenter;
            return this;
        }

        /**
         * @param dataCenter The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
         * 
         * @return builder
         * 
         */
        public Builder dataCenter(String dataCenter) {
            return dataCenter(Output.of(dataCenter));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param logsPrefix Specify a custom prefix for all log fields. The default prefix is `descope.`.
         * 
         * @return builder
         * 
         */
        public Builder logsPrefix(@Nullable Output<String> logsPrefix) {
            $.logsPrefix = logsPrefix;
            return this;
        }

        /**
         * @param logsPrefix Specify a custom prefix for all log fields. The default prefix is `descope.`.
         * 
         * @return builder
         * 
         */
        public Builder logsPrefix(String logsPrefix) {
            return logsPrefix(Output.of(logsPrefix));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param overrideLogsPrefix Enable this option to use a custom prefix for log fields.
         * 
         * @return builder
         * 
         */
        public Builder overrideLogsPrefix(@Nullable Output<Boolean> overrideLogsPrefix) {
            $.overrideLogsPrefix = overrideLogsPrefix;
            return this;
        }

        /**
         * @param overrideLogsPrefix Enable this option to use a custom prefix for log fields.
         * 
         * @return builder
         * 
         */
        public Builder overrideLogsPrefix(Boolean overrideLogsPrefix) {
            return overrideLogsPrefix(Output.of(overrideLogsPrefix));
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(@Nullable Output<Boolean> troubleshootLogEnabled) {
            $.troubleshootLogEnabled = troubleshootLogEnabled;
            return this;
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(Boolean troubleshootLogEnabled) {
            return troubleshootLogEnabled(Output.of(troubleshootLogEnabled));
        }

        public ProjectConnectorsNewrelicArgs build() {
            if ($.apiKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsNewrelicArgs", "apiKey");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsNewrelicArgs", "name");
            }
            return $;
        }
    }

}
