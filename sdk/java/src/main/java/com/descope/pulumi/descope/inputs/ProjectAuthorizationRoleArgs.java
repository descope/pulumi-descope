// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthorizationRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthorizationRoleArgs Empty = new ProjectAuthorizationRoleArgs();

    /**
     * Whether this role should automatically be assigned to users that are created without any roles.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Whether this role should automatically be assigned to users that are created without any roles.
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * A description for the role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A name for the role.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A name for the role.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of permissions by name to be included in the role.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return A list of permissions by name to be included in the role.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Whether this role should not be displayed to tenant admins.
     * 
     */
    @Import(name="private")
    private @Nullable Output<Boolean> private_;

    /**
     * @return Whether this role should not be displayed to tenant admins.
     * 
     */
    public Optional<Output<Boolean>> private_() {
        return Optional.ofNullable(this.private_);
    }

    private ProjectAuthorizationRoleArgs() {}

    private ProjectAuthorizationRoleArgs(ProjectAuthorizationRoleArgs $) {
        this.default_ = $.default_;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.permissions = $.permissions;
        this.private_ = $.private_;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthorizationRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthorizationRoleArgs $;

        public Builder() {
            $ = new ProjectAuthorizationRoleArgs();
        }

        public Builder(ProjectAuthorizationRoleArgs defaults) {
            $ = new ProjectAuthorizationRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ Whether this role should automatically be assigned to users that are created without any roles.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Whether this role should automatically be assigned to users that are created without any roles.
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description A description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A name for the role.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions A list of permissions by name to be included in the role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A list of permissions by name to be included in the role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A list of permissions by name to be included in the role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param private_ Whether this role should not be displayed to tenant admins.
         * 
         * @return builder
         * 
         */
        public Builder private_(@Nullable Output<Boolean> private_) {
            $.private_ = private_;
            return this;
        }

        /**
         * @param private_ Whether this role should not be displayed to tenant admins.
         * 
         * @return builder
         * 
         */
        public Builder private_(Boolean private_) {
            return private_(Output.of(private_));
        }

        public ProjectAuthorizationRoleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectAuthorizationRoleArgs", "name");
            }
            return $;
        }
    }

}
