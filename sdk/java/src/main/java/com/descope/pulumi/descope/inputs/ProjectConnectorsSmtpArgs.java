// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectConnectorsSmtpAuthenticationArgs;
import com.descope.pulumi.descope.inputs.ProjectConnectorsSmtpSenderArgs;
import com.descope.pulumi.descope.inputs.ProjectConnectorsSmtpServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSmtpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSmtpArgs Empty = new ProjectConnectorsSmtpArgs();

    /**
     * SMTP server authentication credentials and method.
     * 
     */
    @Import(name="authentication", required=true)
    private Output<ProjectConnectorsSmtpAuthenticationArgs> authentication;

    /**
     * @return SMTP server authentication credentials and method.
     * 
     */
    public Output<ProjectConnectorsSmtpAuthenticationArgs> authentication() {
        return this.authentication;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The sender details that should be displayed in the email message.
     * 
     */
    @Import(name="sender", required=true)
    private Output<ProjectConnectorsSmtpSenderArgs> sender;

    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    public Output<ProjectConnectorsSmtpSenderArgs> sender() {
        return this.sender;
    }

    /**
     * SMTP server connection details including hostname and port.
     * 
     */
    @Import(name="server", required=true)
    private Output<ProjectConnectorsSmtpServerArgs> server;

    /**
     * @return SMTP server connection details including hostname and port.
     * 
     */
    public Output<ProjectConnectorsSmtpServerArgs> server() {
        return this.server;
    }

    /**
     * Whether the connector should send all requests from specific static IPs.
     * 
     */
    @Import(name="useStaticIps")
    private @Nullable Output<Boolean> useStaticIps;

    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Output<Boolean>> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    private ProjectConnectorsSmtpArgs() {}

    private ProjectConnectorsSmtpArgs(ProjectConnectorsSmtpArgs $) {
        this.authentication = $.authentication;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.sender = $.sender;
        this.server = $.server;
        this.useStaticIps = $.useStaticIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSmtpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSmtpArgs $;

        public Builder() {
            $ = new ProjectConnectorsSmtpArgs();
        }

        public Builder(ProjectConnectorsSmtpArgs defaults) {
            $ = new ProjectConnectorsSmtpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication SMTP server authentication credentials and method.
         * 
         * @return builder
         * 
         */
        public Builder authentication(Output<ProjectConnectorsSmtpAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication SMTP server authentication credentials and method.
         * 
         * @return builder
         * 
         */
        public Builder authentication(ProjectConnectorsSmtpAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sender The sender details that should be displayed in the email message.
         * 
         * @return builder
         * 
         */
        public Builder sender(Output<ProjectConnectorsSmtpSenderArgs> sender) {
            $.sender = sender;
            return this;
        }

        /**
         * @param sender The sender details that should be displayed in the email message.
         * 
         * @return builder
         * 
         */
        public Builder sender(ProjectConnectorsSmtpSenderArgs sender) {
            return sender(Output.of(sender));
        }

        /**
         * @param server SMTP server connection details including hostname and port.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<ProjectConnectorsSmtpServerArgs> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server SMTP server connection details including hostname and port.
         * 
         * @return builder
         * 
         */
        public Builder server(ProjectConnectorsSmtpServerArgs server) {
            return server(Output.of(server));
        }

        /**
         * @param useStaticIps Whether the connector should send all requests from specific static IPs.
         * 
         * @return builder
         * 
         */
        public Builder useStaticIps(@Nullable Output<Boolean> useStaticIps) {
            $.useStaticIps = useStaticIps;
            return this;
        }

        /**
         * @param useStaticIps Whether the connector should send all requests from specific static IPs.
         * 
         * @return builder
         * 
         */
        public Builder useStaticIps(Boolean useStaticIps) {
            return useStaticIps(Output.of(useStaticIps));
        }

        public ProjectConnectorsSmtpArgs build() {
            if ($.authentication == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSmtpArgs", "authentication");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSmtpArgs", "name");
            }
            if ($.sender == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSmtpArgs", "sender");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSmtpArgs", "server");
            }
            return $;
        }
    }

}
