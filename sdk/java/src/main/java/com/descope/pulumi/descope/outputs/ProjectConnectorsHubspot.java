// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsHubspot {
    /**
     * @return The HubSpot private API access token generated for the Descope service.
     * 
     */
    private String accessToken;
    /**
     * @return The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
     * 
     */
    private @Nullable String baseUrl;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    private @Nullable Boolean useStaticIps;

    private ProjectConnectorsHubspot() {}
    /**
     * @return The HubSpot private API access token generated for the Descope service.
     * 
     */
    public String accessToken() {
        return this.accessToken;
    }
    /**
     * @return The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
     * 
     */
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Boolean> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsHubspot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessToken;
        private @Nullable String baseUrl;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private @Nullable Boolean useStaticIps;
        public Builder() {}
        public Builder(ProjectConnectorsHubspot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.baseUrl = defaults.baseUrl;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.useStaticIps = defaults.useStaticIps;
        }

        @CustomType.Setter
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsHubspot", "accessToken");
            }
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(@Nullable String baseUrl) {

            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsHubspot", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder useStaticIps(@Nullable Boolean useStaticIps) {

            this.useStaticIps = useStaticIps;
            return this;
        }
        public ProjectConnectorsHubspot build() {
            final var _resultValue = new ProjectConnectorsHubspot();
            _resultValue.accessToken = accessToken;
            _resultValue.baseUrl = baseUrl;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.useStaticIps = useStaticIps;
            return _resultValue;
        }
    }
}
