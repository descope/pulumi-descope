// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsFingerprint {
    /**
     * @return The Cloudflare integration Endpoint URL.
     * 
     */
    private @Nullable String cloudflareEndpointUrl;
    /**
     * @return The Cloudflare integration Script URL.
     * 
     */
    private @Nullable String cloudflareScriptUrl;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return The Fingerprint public API key.
     * 
     */
    private String publicApiKey;
    /**
     * @return The Fingerprint secret API key.
     * 
     */
    private String secretApiKey;
    /**
     * @return Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
     * 
     */
    private @Nullable Boolean useCloudflareIntegration;

    private ProjectConnectorsFingerprint() {}
    /**
     * @return The Cloudflare integration Endpoint URL.
     * 
     */
    public Optional<String> cloudflareEndpointUrl() {
        return Optional.ofNullable(this.cloudflareEndpointUrl);
    }
    /**
     * @return The Cloudflare integration Script URL.
     * 
     */
    public Optional<String> cloudflareScriptUrl() {
        return Optional.ofNullable(this.cloudflareScriptUrl);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Fingerprint public API key.
     * 
     */
    public String publicApiKey() {
        return this.publicApiKey;
    }
    /**
     * @return The Fingerprint secret API key.
     * 
     */
    public String secretApiKey() {
        return this.secretApiKey;
    }
    /**
     * @return Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
     * 
     */
    public Optional<Boolean> useCloudflareIntegration() {
        return Optional.ofNullable(this.useCloudflareIntegration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsFingerprint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cloudflareEndpointUrl;
        private @Nullable String cloudflareScriptUrl;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private String publicApiKey;
        private String secretApiKey;
        private @Nullable Boolean useCloudflareIntegration;
        public Builder() {}
        public Builder(ProjectConnectorsFingerprint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudflareEndpointUrl = defaults.cloudflareEndpointUrl;
    	      this.cloudflareScriptUrl = defaults.cloudflareScriptUrl;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.publicApiKey = defaults.publicApiKey;
    	      this.secretApiKey = defaults.secretApiKey;
    	      this.useCloudflareIntegration = defaults.useCloudflareIntegration;
        }

        @CustomType.Setter
        public Builder cloudflareEndpointUrl(@Nullable String cloudflareEndpointUrl) {

            this.cloudflareEndpointUrl = cloudflareEndpointUrl;
            return this;
        }
        @CustomType.Setter
        public Builder cloudflareScriptUrl(@Nullable String cloudflareScriptUrl) {

            this.cloudflareScriptUrl = cloudflareScriptUrl;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsFingerprint", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publicApiKey(String publicApiKey) {
            if (publicApiKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsFingerprint", "publicApiKey");
            }
            this.publicApiKey = publicApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder secretApiKey(String secretApiKey) {
            if (secretApiKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsFingerprint", "secretApiKey");
            }
            this.secretApiKey = secretApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder useCloudflareIntegration(@Nullable Boolean useCloudflareIntegration) {

            this.useCloudflareIntegration = useCloudflareIntegration;
            return this;
        }
        public ProjectConnectorsFingerprint build() {
            final var _resultValue = new ProjectConnectorsFingerprint();
            _resultValue.cloudflareEndpointUrl = cloudflareEndpointUrl;
            _resultValue.cloudflareScriptUrl = cloudflareScriptUrl;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.publicApiKey = publicApiKey;
            _resultValue.secretApiKey = secretApiKey;
            _resultValue.useCloudflareIntegration = useCloudflareIntegration;
            return _resultValue;
        }
    }
}
