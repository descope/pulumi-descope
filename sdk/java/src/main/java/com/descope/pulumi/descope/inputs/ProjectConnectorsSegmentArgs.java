// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSegmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSegmentArgs Empty = new ProjectConnectorsSegmentArgs();

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The base URL of the Segment API, when using a custom domain in Segment.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The base URL of the Segment API, when using a custom domain in Segment.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Segment Write Key generated for the Descope service.
     * 
     */
    @Import(name="writeKey", required=true)
    private Output<String> writeKey;

    /**
     * @return The Segment Write Key generated for the Descope service.
     * 
     */
    public Output<String> writeKey() {
        return this.writeKey;
    }

    private ProjectConnectorsSegmentArgs() {}

    private ProjectConnectorsSegmentArgs(ProjectConnectorsSegmentArgs $) {
        this.description = $.description;
        this.host = $.host;
        this.id = $.id;
        this.name = $.name;
        this.writeKey = $.writeKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSegmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSegmentArgs $;

        public Builder() {
            $ = new ProjectConnectorsSegmentArgs();
        }

        public Builder(ProjectConnectorsSegmentArgs defaults) {
            $ = new ProjectConnectorsSegmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param host The base URL of the Segment API, when using a custom domain in Segment.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The base URL of the Segment API, when using a custom domain in Segment.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param writeKey The Segment Write Key generated for the Descope service.
         * 
         * @return builder
         * 
         */
        public Builder writeKey(Output<String> writeKey) {
            $.writeKey = writeKey;
            return this;
        }

        /**
         * @param writeKey The Segment Write Key generated for the Descope service.
         * 
         * @return builder
         * 
         */
        public Builder writeKey(String writeKey) {
            return writeKey(Output.of(writeKey));
        }

        public ProjectConnectorsSegmentArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSegmentArgs", "name");
            }
            if ($.writeKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSegmentArgs", "writeKey");
            }
            return $;
        }
    }

}
