// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsIncodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsIncodeArgs Empty = new ProjectConnectorsIncodeArgs();

    /**
     * Your InCode API key.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    /**
     * @return Your InCode API key.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }

    /**
     * The base URL of the Incode API
     * 
     */
    @Import(name="apiUrl", required=true)
    private Output<String> apiUrl;

    /**
     * @return The base URL of the Incode API
     * 
     */
    public Output<String> apiUrl() {
        return this.apiUrl;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Your wanted InCode&#39;s flow ID.
     * 
     */
    @Import(name="flowId", required=true)
    private Output<String> flowId;

    /**
     * @return Your wanted InCode&#39;s flow ID.
     * 
     */
    public Output<String> flowId() {
        return this.flowId;
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ProjectConnectorsIncodeArgs() {}

    private ProjectConnectorsIncodeArgs(ProjectConnectorsIncodeArgs $) {
        this.apiKey = $.apiKey;
        this.apiUrl = $.apiUrl;
        this.description = $.description;
        this.flowId = $.flowId;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsIncodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsIncodeArgs $;

        public Builder() {
            $ = new ProjectConnectorsIncodeArgs();
        }

        public Builder(ProjectConnectorsIncodeArgs defaults) {
            $ = new ProjectConnectorsIncodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey Your InCode API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey Your InCode API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param apiUrl The base URL of the Incode API
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl The base URL of the Incode API
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowId Your wanted InCode&#39;s flow ID.
         * 
         * @return builder
         * 
         */
        public Builder flowId(Output<String> flowId) {
            $.flowId = flowId;
            return this;
        }

        /**
         * @param flowId Your wanted InCode&#39;s flow ID.
         * 
         * @return builder
         * 
         */
        public Builder flowId(String flowId) {
            return flowId(Output.of(flowId));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ProjectConnectorsIncodeArgs build() {
            if ($.apiKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsIncodeArgs", "apiKey");
            }
            if ($.apiUrl == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsIncodeArgs", "apiUrl");
            }
            if ($.flowId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsIncodeArgs", "flowId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsIncodeArgs", "name");
            }
            return $;
        }
    }

}
