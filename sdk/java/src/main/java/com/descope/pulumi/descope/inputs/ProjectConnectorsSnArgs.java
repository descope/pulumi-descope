// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSnArgs Empty = new ProjectConnectorsSnArgs();

    /**
     * AWS Access key ID.
     * 
     */
    @Import(name="accessKeyId", required=true)
    private Output<String> accessKeyId;

    /**
     * @return AWS Access key ID.
     * 
     */
    public Output<String> accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
     * 
     */
    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    /**
     * @return The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
     * 
     */
    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
     * 
     */
    @Import(name="organizationNumber")
    private @Nullable Output<String> organizationNumber;

    /**
     * @return An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
     * 
     */
    public Optional<Output<String>> organizationNumber() {
        return Optional.ofNullable(this.organizationNumber);
    }

    /**
     * AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * AWS Secret Access Key.
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return AWS Secret Access Key.
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    /**
     * The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
     * 
     */
    @Import(name="senderId")
    private @Nullable Output<String> senderId;

    /**
     * @return The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
     * 
     */
    public Optional<Output<String>> senderId() {
        return Optional.ofNullable(this.senderId);
    }

    /**
     * The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    private ProjectConnectorsSnArgs() {}

    private ProjectConnectorsSnArgs(ProjectConnectorsSnArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.entityId = $.entityId;
        this.id = $.id;
        this.name = $.name;
        this.organizationNumber = $.organizationNumber;
        this.region = $.region;
        this.secret = $.secret;
        this.senderId = $.senderId;
        this.templateId = $.templateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSnArgs $;

        public Builder() {
            $ = new ProjectConnectorsSnArgs();
        }

        public Builder(ProjectConnectorsSnArgs defaults) {
            $ = new ProjectConnectorsSnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId AWS Access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId AWS Access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoint An optional endpoint URL (hostname only or fully qualified URI).
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint An optional endpoint URL (hostname only or fully qualified URI).
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param entityId The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationNumber An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
         * 
         * @return builder
         * 
         */
        public Builder organizationNumber(@Nullable Output<String> organizationNumber) {
            $.organizationNumber = organizationNumber;
            return this;
        }

        /**
         * @param organizationNumber An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
         * 
         * @return builder
         * 
         */
        public Builder organizationNumber(String organizationNumber) {
            return organizationNumber(Output.of(organizationNumber));
        }

        /**
         * @param region AWS region to send requests to (e.g. `us-west-2`).
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region to send requests to (e.g. `us-west-2`).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secret AWS Secret Access Key.
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret AWS Secret Access Key.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param senderId The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
         * 
         * @return builder
         * 
         */
        public Builder senderId(@Nullable Output<String> senderId) {
            $.senderId = senderId;
            return this;
        }

        /**
         * @param senderId The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
         * 
         * @return builder
         * 
         */
        public Builder senderId(String senderId) {
            return senderId(Output.of(senderId));
        }

        /**
         * @param templateId The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        public ProjectConnectorsSnArgs build() {
            if ($.accessKeyId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSnArgs", "accessKeyId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSnArgs", "name");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSnArgs", "region");
            }
            if ($.secret == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSnArgs", "secret");
            }
            return $;
        }
    }

}
