// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectProjectSettingsSessionMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectProjectSettingsSessionMigrationArgs Empty = new ProjectProjectSettingsSessionMigrationArgs();

    /**
     * The audience value if needed by the vendor.
     * 
     */
    @Import(name="audience")
    private @Nullable Output<String> audience;

    /**
     * @return The audience value if needed by the vendor.
     * 
     */
    public Optional<Output<String>> audience() {
        return Optional.ofNullable(this.audience);
    }

    /**
     * The unique client ID for the vendor.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The unique client ID for the vendor.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The domain value if needed by the vendor.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain value if needed by the vendor.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * An issuer URL if needed by the vendor.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return An issuer URL if needed by the vendor.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * A set of attributes from the vendor&#39;s user that should be used to match with the Descope user&#39;s login ID.
     * 
     */
    @Import(name="loginidMatchedAttributes")
    private @Nullable Output<List<String>> loginidMatchedAttributes;

    /**
     * @return A set of attributes from the vendor&#39;s user that should be used to match with the Descope user&#39;s login ID.
     * 
     */
    public Optional<Output<List<String>>> loginidMatchedAttributes() {
        return Optional.ofNullable(this.loginidMatchedAttributes);
    }

    /**
     * The name of the vendor the sessions are migrated from, in all lowercase.
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    /**
     * @return The name of the vendor the sessions are migrated from, in all lowercase.
     * 
     */
    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private ProjectProjectSettingsSessionMigrationArgs() {}

    private ProjectProjectSettingsSessionMigrationArgs(ProjectProjectSettingsSessionMigrationArgs $) {
        this.audience = $.audience;
        this.clientId = $.clientId;
        this.domain = $.domain;
        this.issuer = $.issuer;
        this.loginidMatchedAttributes = $.loginidMatchedAttributes;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectProjectSettingsSessionMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectProjectSettingsSessionMigrationArgs $;

        public Builder() {
            $ = new ProjectProjectSettingsSessionMigrationArgs();
        }

        public Builder(ProjectProjectSettingsSessionMigrationArgs defaults) {
            $ = new ProjectProjectSettingsSessionMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audience The audience value if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder audience(@Nullable Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience The audience value if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param clientId The unique client ID for the vendor.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The unique client ID for the vendor.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param domain The domain value if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain value if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param issuer An issuer URL if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer An issuer URL if needed by the vendor.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param loginidMatchedAttributes A set of attributes from the vendor&#39;s user that should be used to match with the Descope user&#39;s login ID.
         * 
         * @return builder
         * 
         */
        public Builder loginidMatchedAttributes(@Nullable Output<List<String>> loginidMatchedAttributes) {
            $.loginidMatchedAttributes = loginidMatchedAttributes;
            return this;
        }

        /**
         * @param loginidMatchedAttributes A set of attributes from the vendor&#39;s user that should be used to match with the Descope user&#39;s login ID.
         * 
         * @return builder
         * 
         */
        public Builder loginidMatchedAttributes(List<String> loginidMatchedAttributes) {
            return loginidMatchedAttributes(Output.of(loginidMatchedAttributes));
        }

        /**
         * @param loginidMatchedAttributes A set of attributes from the vendor&#39;s user that should be used to match with the Descope user&#39;s login ID.
         * 
         * @return builder
         * 
         */
        public Builder loginidMatchedAttributes(String... loginidMatchedAttributes) {
            return loginidMatchedAttributes(List.of(loginidMatchedAttributes));
        }

        /**
         * @param vendor The name of the vendor the sessions are migrated from, in all lowercase.
         * 
         * @return builder
         * 
         */
        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        /**
         * @param vendor The name of the vendor the sessions are migrated from, in all lowercase.
         * 
         * @return builder
         * 
         */
        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public ProjectProjectSettingsSessionMigrationArgs build() {
            return $;
        }
    }

}
