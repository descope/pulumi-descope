// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsAwsTranslateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsAwsTranslateArgs Empty = new ProjectConnectorsAwsTranslateArgs();

    /**
     * AWS access key ID.
     * 
     */
    @Import(name="accessKeyId", required=true)
    private Output<String> accessKeyId;

    /**
     * @return AWS access key ID.
     * 
     */
    public Output<String> accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The AWS region to which this client will send requests. (e.g. us-east-1.)
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The AWS region to which this client will send requests. (e.g. us-east-1.)
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * AWS secret access key.
     * 
     */
    @Import(name="secretAccessKey", required=true)
    private Output<String> secretAccessKey;

    /**
     * @return AWS secret access key.
     * 
     */
    public Output<String> secretAccessKey() {
        return this.secretAccessKey;
    }

    /**
     * (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
     * 
     */
    @Import(name="sessionToken")
    private @Nullable Output<String> sessionToken;

    /**
     * @return (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
     * 
     */
    public Optional<Output<String>> sessionToken() {
        return Optional.ofNullable(this.sessionToken);
    }

    private ProjectConnectorsAwsTranslateArgs() {}

    private ProjectConnectorsAwsTranslateArgs(ProjectConnectorsAwsTranslateArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.region = $.region;
        this.secretAccessKey = $.secretAccessKey;
        this.sessionToken = $.sessionToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsAwsTranslateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsAwsTranslateArgs $;

        public Builder() {
            $ = new ProjectConnectorsAwsTranslateArgs();
        }

        public Builder(ProjectConnectorsAwsTranslateArgs defaults) {
            $ = new ProjectConnectorsAwsTranslateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId AWS access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId AWS access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The AWS region to which this client will send requests. (e.g. us-east-1.)
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS region to which this client will send requests. (e.g. us-east-1.)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretAccessKey AWS secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey AWS secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param sessionToken (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
         * 
         * @return builder
         * 
         */
        public Builder sessionToken(@Nullable Output<String> sessionToken) {
            $.sessionToken = sessionToken;
            return this;
        }

        /**
         * @param sessionToken (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
         * 
         * @return builder
         * 
         */
        public Builder sessionToken(String sessionToken) {
            return sessionToken(Output.of(sessionToken));
        }

        public ProjectConnectorsAwsTranslateArgs build() {
            if ($.accessKeyId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsTranslateArgs", "accessKeyId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsTranslateArgs", "name");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsTranslateArgs", "region");
            }
            if ($.secretAccessKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsTranslateArgs", "secretAccessKey");
            }
            return $;
        }
    }

}
