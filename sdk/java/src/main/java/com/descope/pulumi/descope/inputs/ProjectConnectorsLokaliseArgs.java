// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsLokaliseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsLokaliseArgs Empty = new ProjectConnectorsLokaliseArgs();

    /**
     * Lokalise API token.
     * 
     */
    @Import(name="apiToken", required=true)
    private Output<String> apiToken;

    /**
     * @return Lokalise API token.
     * 
     */
    public Output<String> apiToken() {
        return this.apiToken;
    }

    /**
     * (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
     * 
     */
    @Import(name="cardId")
    private @Nullable Output<String> cardId;

    /**
     * @return (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
     * 
     */
    public Optional<Output<String>> cardId() {
        return Optional.ofNullable(this.cardId);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Lokalise project ID.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Lokalise project ID.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Lokalise team ID. If not provided, the oldest available team will be used.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return Lokalise team ID. If not provided, the oldest available team will be used.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
     * 
     */
    @Import(name="translationProvider")
    private @Nullable Output<String> translationProvider;

    /**
     * @return The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
     * 
     */
    public Optional<Output<String>> translationProvider() {
        return Optional.ofNullable(this.translationProvider);
    }

    private ProjectConnectorsLokaliseArgs() {}

    private ProjectConnectorsLokaliseArgs(ProjectConnectorsLokaliseArgs $) {
        this.apiToken = $.apiToken;
        this.cardId = $.cardId;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.projectId = $.projectId;
        this.teamId = $.teamId;
        this.translationProvider = $.translationProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsLokaliseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsLokaliseArgs $;

        public Builder() {
            $ = new ProjectConnectorsLokaliseArgs();
        }

        public Builder(ProjectConnectorsLokaliseArgs defaults) {
            $ = new ProjectConnectorsLokaliseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Lokalise API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Lokalise API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param cardId (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
         * 
         * @return builder
         * 
         */
        public Builder cardId(@Nullable Output<String> cardId) {
            $.cardId = cardId;
            return this;
        }

        /**
         * @param cardId (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
         * 
         * @return builder
         * 
         */
        public Builder cardId(String cardId) {
            return cardId(Output.of(cardId));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Lokalise project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Lokalise project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param teamId Lokalise team ID. If not provided, the oldest available team will be used.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId Lokalise team ID. If not provided, the oldest available team will be used.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param translationProvider The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
         * 
         * @return builder
         * 
         */
        public Builder translationProvider(@Nullable Output<String> translationProvider) {
            $.translationProvider = translationProvider;
            return this;
        }

        /**
         * @param translationProvider The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
         * 
         * @return builder
         * 
         */
        public Builder translationProvider(String translationProvider) {
            return translationProvider(Output.of(translationProvider));
        }

        public ProjectConnectorsLokaliseArgs build() {
            if ($.apiToken == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsLokaliseArgs", "apiToken");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsLokaliseArgs", "name");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsLokaliseArgs", "projectId");
            }
            return $;
        }
    }

}
