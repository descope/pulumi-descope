// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectJwtTemplatesAccessKeyTemplate {
    /**
     * @return The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     * 
     */
    private @Nullable String authSchema;
    /**
     * @return When a user is associated with a single tenant, the tenant will be set as the user&#39;s active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
     * 
     */
    private @Nullable Boolean autoTenantClaim;
    /**
     * @return Whether to use OIDC conformance for the JWT issuer field.
     * 
     */
    private @Nullable Boolean conformanceIssuer;
    /**
     * @return Description of the JWT Template.
     * 
     */
    private @Nullable String description;
    /**
     * @return Policy for empty claims - `none`, `nil` or `delete`.
     * 
     */
    private @Nullable String emptyClaimPolicy;
    /**
     * @return Whether to enforce that the JWT issuer matches the project configuration.
     * 
     */
    private @Nullable Boolean enforceIssuer;
    private @Nullable String id;
    /**
     * @return Name of the JWT Template.
     * 
     */
    private String name;
    /**
     * @return The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
     * 
     */
    private String template;

    private ProjectJwtTemplatesAccessKeyTemplate() {}
    /**
     * @return The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     * 
     */
    public Optional<String> authSchema() {
        return Optional.ofNullable(this.authSchema);
    }
    /**
     * @return When a user is associated with a single tenant, the tenant will be set as the user&#39;s active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
     * 
     */
    public Optional<Boolean> autoTenantClaim() {
        return Optional.ofNullable(this.autoTenantClaim);
    }
    /**
     * @return Whether to use OIDC conformance for the JWT issuer field.
     * 
     */
    public Optional<Boolean> conformanceIssuer() {
        return Optional.ofNullable(this.conformanceIssuer);
    }
    /**
     * @return Description of the JWT Template.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Policy for empty claims - `none`, `nil` or `delete`.
     * 
     */
    public Optional<String> emptyClaimPolicy() {
        return Optional.ofNullable(this.emptyClaimPolicy);
    }
    /**
     * @return Whether to enforce that the JWT issuer matches the project configuration.
     * 
     */
    public Optional<Boolean> enforceIssuer() {
        return Optional.ofNullable(this.enforceIssuer);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the JWT Template.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
     * 
     */
    public String template() {
        return this.template;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectJwtTemplatesAccessKeyTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authSchema;
        private @Nullable Boolean autoTenantClaim;
        private @Nullable Boolean conformanceIssuer;
        private @Nullable String description;
        private @Nullable String emptyClaimPolicy;
        private @Nullable Boolean enforceIssuer;
        private @Nullable String id;
        private String name;
        private String template;
        public Builder() {}
        public Builder(ProjectJwtTemplatesAccessKeyTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authSchema = defaults.authSchema;
    	      this.autoTenantClaim = defaults.autoTenantClaim;
    	      this.conformanceIssuer = defaults.conformanceIssuer;
    	      this.description = defaults.description;
    	      this.emptyClaimPolicy = defaults.emptyClaimPolicy;
    	      this.enforceIssuer = defaults.enforceIssuer;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.template = defaults.template;
        }

        @CustomType.Setter
        public Builder authSchema(@Nullable String authSchema) {

            this.authSchema = authSchema;
            return this;
        }
        @CustomType.Setter
        public Builder autoTenantClaim(@Nullable Boolean autoTenantClaim) {

            this.autoTenantClaim = autoTenantClaim;
            return this;
        }
        @CustomType.Setter
        public Builder conformanceIssuer(@Nullable Boolean conformanceIssuer) {

            this.conformanceIssuer = conformanceIssuer;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder emptyClaimPolicy(@Nullable String emptyClaimPolicy) {

            this.emptyClaimPolicy = emptyClaimPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enforceIssuer(@Nullable Boolean enforceIssuer) {

            this.enforceIssuer = enforceIssuer;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectJwtTemplatesAccessKeyTemplate", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            if (template == null) {
              throw new MissingRequiredPropertyException("ProjectJwtTemplatesAccessKeyTemplate", "template");
            }
            this.template = template;
            return this;
        }
        public ProjectJwtTemplatesAccessKeyTemplate build() {
            final var _resultValue = new ProjectJwtTemplatesAccessKeyTemplate();
            _resultValue.authSchema = authSchema;
            _resultValue.autoTenantClaim = autoTenantClaim;
            _resultValue.conformanceIssuer = conformanceIssuer;
            _resultValue.description = description;
            _resultValue.emptyClaimPolicy = emptyClaimPolicy;
            _resultValue.enforceIssuer = enforceIssuer;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.template = template;
            return _resultValue;
        }
    }
}
