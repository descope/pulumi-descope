// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectConnectorsSmtpAuthentication;
import com.descope.pulumi.descope.outputs.ProjectConnectorsSmtpSender;
import com.descope.pulumi.descope.outputs.ProjectConnectorsSmtpServer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsSmtp {
    private ProjectConnectorsSmtpAuthentication authentication;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    private ProjectConnectorsSmtpSender sender;
    private ProjectConnectorsSmtpServer server;
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    private @Nullable Boolean useStaticIps;

    private ProjectConnectorsSmtp() {}
    public ProjectConnectorsSmtpAuthentication authentication() {
        return this.authentication;
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    public ProjectConnectorsSmtpSender sender() {
        return this.sender;
    }
    public ProjectConnectorsSmtpServer server() {
        return this.server;
    }
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Boolean> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsSmtp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ProjectConnectorsSmtpAuthentication authentication;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private ProjectConnectorsSmtpSender sender;
        private ProjectConnectorsSmtpServer server;
        private @Nullable Boolean useStaticIps;
        public Builder() {}
        public Builder(ProjectConnectorsSmtp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sender = defaults.sender;
    	      this.server = defaults.server;
    	      this.useStaticIps = defaults.useStaticIps;
        }

        @CustomType.Setter
        public Builder authentication(ProjectConnectorsSmtpAuthentication authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSmtp", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSmtp", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sender(ProjectConnectorsSmtpSender sender) {
            if (sender == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSmtp", "sender");
            }
            this.sender = sender;
            return this;
        }
        @CustomType.Setter
        public Builder server(ProjectConnectorsSmtpServer server) {
            if (server == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSmtp", "server");
            }
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder useStaticIps(@Nullable Boolean useStaticIps) {

            this.useStaticIps = useStaticIps;
            return this;
        }
        public ProjectConnectorsSmtp build() {
            final var _resultValue = new ProjectConnectorsSmtp();
            _resultValue.authentication = authentication;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.sender = sender;
            _resultValue.server = server;
            _resultValue.useStaticIps = useStaticIps;
            return _resultValue;
        }
    }
}
