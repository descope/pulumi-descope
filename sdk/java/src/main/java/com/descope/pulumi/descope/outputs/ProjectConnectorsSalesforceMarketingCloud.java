// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsSalesforceMarketingCloud {
    /**
     * @return Account identifier, or MID, of the target business unit.
     * 
     */
    private @Nullable String accountId;
    /**
     * @return Client ID issued when you create the API integration in Installed Packages.
     * 
     */
    private String clientId;
    /**
     * @return Client secret issued when you create the API integration in Installed Packages.
     * 
     */
    private String clientSecret;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return Space-separated list of data-access permissions for your connector.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The Salesforce Marketing Cloud endpoint subdomain.
     * 
     */
    private String subdomain;

    private ProjectConnectorsSalesforceMarketingCloud() {}
    /**
     * @return Account identifier, or MID, of the target business unit.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return Client ID issued when you create the API integration in Installed Packages.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Client secret issued when you create the API integration in Installed Packages.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Space-separated list of data-access permissions for your connector.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The Salesforce Marketing Cloud endpoint subdomain.
     * 
     */
    public String subdomain() {
        return this.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsSalesforceMarketingCloud defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private String clientId;
        private String clientSecret;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private @Nullable String scope;
        private String subdomain;
        public Builder() {}
        public Builder(ProjectConnectorsSalesforceMarketingCloud defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.scope = defaults.scope;
    	      this.subdomain = defaults.subdomain;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {

            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSalesforceMarketingCloud", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSalesforceMarketingCloud", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSalesforceMarketingCloud", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(String subdomain) {
            if (subdomain == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSalesforceMarketingCloud", "subdomain");
            }
            this.subdomain = subdomain;
            return this;
        }
        public ProjectConnectorsSalesforceMarketingCloud build() {
            final var _resultValue = new ProjectConnectorsSalesforceMarketingCloud();
            _resultValue.accountId = accountId;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.scope = scope;
            _resultValue.subdomain = subdomain;
            return _resultValue;
        }
    }
}
