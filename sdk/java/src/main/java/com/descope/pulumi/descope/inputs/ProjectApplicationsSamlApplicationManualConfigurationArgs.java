// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ProjectApplicationsSamlApplicationManualConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectApplicationsSamlApplicationManualConfigurationArgs Empty = new ProjectApplicationsSamlApplicationManualConfigurationArgs();

    /**
     * Enter the `ACS URL` from the SP.
     * 
     */
    @Import(name="acsUrl", required=true)
    private Output<String> acsUrl;

    /**
     * @return Enter the `ACS URL` from the SP.
     * 
     */
    public Output<String> acsUrl() {
        return this.acsUrl;
    }

    /**
     * Enter the `Certificate` from the SP.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Enter the `Certificate` from the SP.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Enter the `Entity Id` from the SP.
     * 
     */
    @Import(name="entityId", required=true)
    private Output<String> entityId;

    /**
     * @return Enter the `Entity Id` from the SP.
     * 
     */
    public Output<String> entityId() {
        return this.entityId;
    }

    private ProjectApplicationsSamlApplicationManualConfigurationArgs() {}

    private ProjectApplicationsSamlApplicationManualConfigurationArgs(ProjectApplicationsSamlApplicationManualConfigurationArgs $) {
        this.acsUrl = $.acsUrl;
        this.certificate = $.certificate;
        this.entityId = $.entityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectApplicationsSamlApplicationManualConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectApplicationsSamlApplicationManualConfigurationArgs $;

        public Builder() {
            $ = new ProjectApplicationsSamlApplicationManualConfigurationArgs();
        }

        public Builder(ProjectApplicationsSamlApplicationManualConfigurationArgs defaults) {
            $ = new ProjectApplicationsSamlApplicationManualConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acsUrl Enter the `ACS URL` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder acsUrl(Output<String> acsUrl) {
            $.acsUrl = acsUrl;
            return this;
        }

        /**
         * @param acsUrl Enter the `ACS URL` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder acsUrl(String acsUrl) {
            return acsUrl(Output.of(acsUrl));
        }

        /**
         * @param certificate Enter the `Certificate` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Enter the `Certificate` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param entityId Enter the `Entity Id` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder entityId(Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId Enter the `Entity Id` from the SP.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        public ProjectApplicationsSamlApplicationManualConfigurationArgs build() {
            if ($.acsUrl == null) {
                throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfigurationArgs", "acsUrl");
            }
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfigurationArgs", "certificate");
            }
            if ($.entityId == null) {
                throw new MissingRequiredPropertyException("ProjectApplicationsSamlApplicationManualConfigurationArgs", "entityId");
            }
            return $;
        }
    }

}
