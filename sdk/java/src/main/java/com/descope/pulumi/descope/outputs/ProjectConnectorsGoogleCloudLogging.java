// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectConnectorsGoogleCloudLoggingAuditFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsGoogleCloudLogging {
    /**
     * @return Whether to enable streaming of audit events.
     * 
     */
    private @Nullable Boolean auditEnabled;
    /**
     * @return Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    private @Nullable List<ProjectConnectorsGoogleCloudLoggingAuditFilter> auditFilters;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
     * 
     */
    private String serviceAccountKey;
    /**
     * @return Whether to send troubleshooting events.
     * 
     */
    private @Nullable Boolean troubleshootLogEnabled;

    private ProjectConnectorsGoogleCloudLogging() {}
    /**
     * @return Whether to enable streaming of audit events.
     * 
     */
    public Optional<Boolean> auditEnabled() {
        return Optional.ofNullable(this.auditEnabled);
    }
    /**
     * @return Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    public List<ProjectConnectorsGoogleCloudLoggingAuditFilter> auditFilters() {
        return this.auditFilters == null ? List.of() : this.auditFilters;
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
     * 
     */
    public String serviceAccountKey() {
        return this.serviceAccountKey;
    }
    /**
     * @return Whether to send troubleshooting events.
     * 
     */
    public Optional<Boolean> troubleshootLogEnabled() {
        return Optional.ofNullable(this.troubleshootLogEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsGoogleCloudLogging defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean auditEnabled;
        private @Nullable List<ProjectConnectorsGoogleCloudLoggingAuditFilter> auditFilters;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private String serviceAccountKey;
        private @Nullable Boolean troubleshootLogEnabled;
        public Builder() {}
        public Builder(ProjectConnectorsGoogleCloudLogging defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditEnabled = defaults.auditEnabled;
    	      this.auditFilters = defaults.auditFilters;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.serviceAccountKey = defaults.serviceAccountKey;
    	      this.troubleshootLogEnabled = defaults.troubleshootLogEnabled;
        }

        @CustomType.Setter
        public Builder auditEnabled(@Nullable Boolean auditEnabled) {

            this.auditEnabled = auditEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder auditFilters(@Nullable List<ProjectConnectorsGoogleCloudLoggingAuditFilter> auditFilters) {

            this.auditFilters = auditFilters;
            return this;
        }
        public Builder auditFilters(ProjectConnectorsGoogleCloudLoggingAuditFilter... auditFilters) {
            return auditFilters(List.of(auditFilters));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsGoogleCloudLogging", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountKey(String serviceAccountKey) {
            if (serviceAccountKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsGoogleCloudLogging", "serviceAccountKey");
            }
            this.serviceAccountKey = serviceAccountKey;
            return this;
        }
        @CustomType.Setter
        public Builder troubleshootLogEnabled(@Nullable Boolean troubleshootLogEnabled) {

            this.troubleshootLogEnabled = troubleshootLogEnabled;
            return this;
        }
        public ProjectConnectorsGoogleCloudLogging build() {
            final var _resultValue = new ProjectConnectorsGoogleCloudLogging();
            _resultValue.auditEnabled = auditEnabled;
            _resultValue.auditFilters = auditFilters;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.serviceAccountKey = serviceAccountKey;
            _resultValue.troubleshootLogEnabled = troubleshootLogEnabled;
            return _resultValue;
        }
    }
}
