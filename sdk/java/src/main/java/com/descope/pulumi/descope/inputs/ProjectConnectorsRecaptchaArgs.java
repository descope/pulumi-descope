// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsRecaptchaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsRecaptchaArgs Empty = new ProjectConnectorsRecaptchaArgs();

    /**
     * When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
     * 
     */
    @Import(name="assessmentScore")
    private @Nullable Output<Double> assessmentScore;

    /**
     * @return When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
     * 
     */
    public Optional<Output<Double>> assessmentScore() {
        return Optional.ofNullable(this.assessmentScore);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
     * 
     */
    @Import(name="overrideAssessment")
    private @Nullable Output<Boolean> overrideAssessment;

    /**
     * @return Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
     * 
     */
    public Optional<Output<Boolean>> overrideAssessment() {
        return Optional.ofNullable(this.overrideAssessment);
    }

    /**
     * The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user&#39;s response.
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user&#39;s response.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * The site key is used to invoke reCAPTCHA service on your site or mobile application.
     * 
     */
    @Import(name="siteKey", required=true)
    private Output<String> siteKey;

    /**
     * @return The site key is used to invoke reCAPTCHA service on your site or mobile application.
     * 
     */
    public Output<String> siteKey() {
        return this.siteKey;
    }

    private ProjectConnectorsRecaptchaArgs() {}

    private ProjectConnectorsRecaptchaArgs(ProjectConnectorsRecaptchaArgs $) {
        this.assessmentScore = $.assessmentScore;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.overrideAssessment = $.overrideAssessment;
        this.secretKey = $.secretKey;
        this.siteKey = $.siteKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsRecaptchaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsRecaptchaArgs $;

        public Builder() {
            $ = new ProjectConnectorsRecaptchaArgs();
        }

        public Builder(ProjectConnectorsRecaptchaArgs defaults) {
            $ = new ProjectConnectorsRecaptchaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assessmentScore When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
         * 
         * @return builder
         * 
         */
        public Builder assessmentScore(@Nullable Output<Double> assessmentScore) {
            $.assessmentScore = assessmentScore;
            return this;
        }

        /**
         * @param assessmentScore When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
         * 
         * @return builder
         * 
         */
        public Builder assessmentScore(Double assessmentScore) {
            return assessmentScore(Output.of(assessmentScore));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param overrideAssessment Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
         * 
         * @return builder
         * 
         */
        public Builder overrideAssessment(@Nullable Output<Boolean> overrideAssessment) {
            $.overrideAssessment = overrideAssessment;
            return this;
        }

        /**
         * @param overrideAssessment Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
         * 
         * @return builder
         * 
         */
        public Builder overrideAssessment(Boolean overrideAssessment) {
            return overrideAssessment(Output.of(overrideAssessment));
        }

        /**
         * @param secretKey The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user&#39;s response.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user&#39;s response.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param siteKey The site key is used to invoke reCAPTCHA service on your site or mobile application.
         * 
         * @return builder
         * 
         */
        public Builder siteKey(Output<String> siteKey) {
            $.siteKey = siteKey;
            return this;
        }

        /**
         * @param siteKey The site key is used to invoke reCAPTCHA service on your site or mobile application.
         * 
         * @return builder
         * 
         */
        public Builder siteKey(String siteKey) {
            return siteKey(Output.of(siteKey));
        }

        public ProjectConnectorsRecaptchaArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsRecaptchaArgs", "name");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsRecaptchaArgs", "secretKey");
            }
            if ($.siteKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsRecaptchaArgs", "siteKey");
            }
            return $;
        }
    }

}
