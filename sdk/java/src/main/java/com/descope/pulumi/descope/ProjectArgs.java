// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope;

import com.descope.pulumi.descope.inputs.ProjectApplicationsArgs;
import com.descope.pulumi.descope.inputs.ProjectAttributesArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthorizationArgs;
import com.descope.pulumi.descope.inputs.ProjectConnectorsArgs;
import com.descope.pulumi.descope.inputs.ProjectFlowsArgs;
import com.descope.pulumi.descope.inputs.ProjectInviteSettingsArgs;
import com.descope.pulumi.descope.inputs.ProjectJwtTemplatesArgs;
import com.descope.pulumi.descope.inputs.ProjectProjectSettingsArgs;
import com.descope.pulumi.descope.inputs.ProjectStylesArgs;
import com.descope.pulumi.descope.inputs.ProjectWidgetsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Applications that are registered with the project.
     * 
     */
    @Import(name="applications")
    private @Nullable Output<ProjectApplicationsArgs> applications;

    /**
     * @return Applications that are registered with the project.
     * 
     */
    public Optional<Output<ProjectApplicationsArgs>> applications() {
        return Optional.ofNullable(this.applications);
    }

    /**
     * Custom attributes that can be attached to users and tenants.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<ProjectAttributesArgs> attributes;

    /**
     * @return Custom attributes that can be attached to users and tenants.
     * 
     */
    public Optional<Output<ProjectAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Settings for each authentication method.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<ProjectAuthenticationArgs> authentication;

    /**
     * @return Settings for each authentication method.
     * 
     */
    public Optional<Output<ProjectAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<ProjectAuthorizationArgs> authorization;

    /**
     * @return Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
     * 
     */
    public Optional<Output<ProjectAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Enrich your flows by interacting with third party services.
     * 
     */
    @Import(name="connectors")
    private @Nullable Output<ProjectConnectorsArgs> connectors;

    /**
     * @return Enrich your flows by interacting with third party services.
     * 
     */
    public Optional<Output<ProjectConnectorsArgs>> connectors() {
        return Optional.ofNullable(this.connectors);
    }

    /**
     * This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Custom authentication flows to use in this project.
     * 
     */
    @Import(name="flows")
    private @Nullable Output<Map<String,ProjectFlowsArgs>> flows;

    /**
     * @return Custom authentication flows to use in this project.
     * 
     */
    public Optional<Output<Map<String,ProjectFlowsArgs>>> flows() {
        return Optional.ofNullable(this.flows);
    }

    /**
     * User invitation settings and behavior.
     * 
     */
    @Import(name="inviteSettings")
    private @Nullable Output<ProjectInviteSettingsArgs> inviteSettings;

    /**
     * @return User invitation settings and behavior.
     * 
     */
    public Optional<Output<ProjectInviteSettingsArgs>> inviteSettings() {
        return Optional.ofNullable(this.inviteSettings);
    }

    /**
     * Defines templates for JSON Web Tokens (JWT) used for authentication.
     * 
     */
    @Import(name="jwtTemplates")
    private @Nullable Output<ProjectJwtTemplatesArgs> jwtTemplates;

    /**
     * @return Defines templates for JSON Web Tokens (JWT) used for authentication.
     * 
     */
    public Optional<Output<ProjectJwtTemplatesArgs>> jwtTemplates() {
        return Optional.ofNullable(this.jwtTemplates);
    }

    /**
     * The name of the Descope project.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Descope project.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * General settings for the Descope project.
     * 
     */
    @Import(name="projectSettings")
    private @Nullable Output<ProjectProjectSettingsArgs> projectSettings;

    /**
     * @return General settings for the Descope project.
     * 
     */
    public Optional<Output<ProjectProjectSettingsArgs>> projectSettings() {
        return Optional.ofNullable(this.projectSettings);
    }

    /**
     * Custom styles that can be applied to the project&#39;s authentication flows.
     * 
     */
    @Import(name="styles")
    private @Nullable Output<ProjectStylesArgs> styles;

    /**
     * @return Custom styles that can be applied to the project&#39;s authentication flows.
     * 
     */
    public Optional<Output<ProjectStylesArgs>> styles() {
        return Optional.ofNullable(this.styles);
    }

    /**
     * Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Embeddable components designed to facilitate the delegation of operations to tenant admins and end users.
     * 
     */
    @Import(name="widgets")
    private @Nullable Output<Map<String,ProjectWidgetsArgs>> widgets;

    /**
     * @return Embeddable components designed to facilitate the delegation of operations to tenant admins and end users.
     * 
     */
    public Optional<Output<Map<String,ProjectWidgetsArgs>>> widgets() {
        return Optional.ofNullable(this.widgets);
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.applications = $.applications;
        this.attributes = $.attributes;
        this.authentication = $.authentication;
        this.authorization = $.authorization;
        this.connectors = $.connectors;
        this.environment = $.environment;
        this.flows = $.flows;
        this.inviteSettings = $.inviteSettings;
        this.jwtTemplates = $.jwtTemplates;
        this.name = $.name;
        this.projectSettings = $.projectSettings;
        this.styles = $.styles;
        this.tags = $.tags;
        this.widgets = $.widgets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applications Applications that are registered with the project.
         * 
         * @return builder
         * 
         */
        public Builder applications(@Nullable Output<ProjectApplicationsArgs> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications Applications that are registered with the project.
         * 
         * @return builder
         * 
         */
        public Builder applications(ProjectApplicationsArgs applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param attributes Custom attributes that can be attached to users and tenants.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<ProjectAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Custom attributes that can be attached to users and tenants.
         * 
         * @return builder
         * 
         */
        public Builder attributes(ProjectAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param authentication Settings for each authentication method.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<ProjectAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Settings for each authentication method.
         * 
         * @return builder
         * 
         */
        public Builder authentication(ProjectAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param authorization Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<ProjectAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
         * 
         * @return builder
         * 
         */
        public Builder authorization(ProjectAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param connectors Enrich your flows by interacting with third party services.
         * 
         * @return builder
         * 
         */
        public Builder connectors(@Nullable Output<ProjectConnectorsArgs> connectors) {
            $.connectors = connectors;
            return this;
        }

        /**
         * @param connectors Enrich your flows by interacting with third party services.
         * 
         * @return builder
         * 
         */
        public Builder connectors(ProjectConnectorsArgs connectors) {
            return connectors(Output.of(connectors));
        }

        /**
         * @param environment This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param flows Custom authentication flows to use in this project.
         * 
         * @return builder
         * 
         */
        public Builder flows(@Nullable Output<Map<String,ProjectFlowsArgs>> flows) {
            $.flows = flows;
            return this;
        }

        /**
         * @param flows Custom authentication flows to use in this project.
         * 
         * @return builder
         * 
         */
        public Builder flows(Map<String,ProjectFlowsArgs> flows) {
            return flows(Output.of(flows));
        }

        /**
         * @param inviteSettings User invitation settings and behavior.
         * 
         * @return builder
         * 
         */
        public Builder inviteSettings(@Nullable Output<ProjectInviteSettingsArgs> inviteSettings) {
            $.inviteSettings = inviteSettings;
            return this;
        }

        /**
         * @param inviteSettings User invitation settings and behavior.
         * 
         * @return builder
         * 
         */
        public Builder inviteSettings(ProjectInviteSettingsArgs inviteSettings) {
            return inviteSettings(Output.of(inviteSettings));
        }

        /**
         * @param jwtTemplates Defines templates for JSON Web Tokens (JWT) used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder jwtTemplates(@Nullable Output<ProjectJwtTemplatesArgs> jwtTemplates) {
            $.jwtTemplates = jwtTemplates;
            return this;
        }

        /**
         * @param jwtTemplates Defines templates for JSON Web Tokens (JWT) used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder jwtTemplates(ProjectJwtTemplatesArgs jwtTemplates) {
            return jwtTemplates(Output.of(jwtTemplates));
        }

        /**
         * @param name The name of the Descope project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Descope project.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectSettings General settings for the Descope project.
         * 
         * @return builder
         * 
         */
        public Builder projectSettings(@Nullable Output<ProjectProjectSettingsArgs> projectSettings) {
            $.projectSettings = projectSettings;
            return this;
        }

        /**
         * @param projectSettings General settings for the Descope project.
         * 
         * @return builder
         * 
         */
        public Builder projectSettings(ProjectProjectSettingsArgs projectSettings) {
            return projectSettings(Output.of(projectSettings));
        }

        /**
         * @param styles Custom styles that can be applied to the project&#39;s authentication flows.
         * 
         * @return builder
         * 
         */
        public Builder styles(@Nullable Output<ProjectStylesArgs> styles) {
            $.styles = styles;
            return this;
        }

        /**
         * @param styles Custom styles that can be applied to the project&#39;s authentication flows.
         * 
         * @return builder
         * 
         */
        public Builder styles(ProjectStylesArgs styles) {
            return styles(Output.of(styles));
        }

        /**
         * @param tags Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param widgets Embeddable components designed to facilitate the delegation of operations to tenant admins and end users.
         * 
         * @return builder
         * 
         */
        public Builder widgets(@Nullable Output<Map<String,ProjectWidgetsArgs>> widgets) {
            $.widgets = widgets;
            return this;
        }

        /**
         * @param widgets Embeddable components designed to facilitate the delegation of operations to tenant admins and end users.
         * 
         * @return builder
         * 
         */
        public Builder widgets(Map<String,ProjectWidgetsArgs> widgets) {
            return widgets(Output.of(widgets));
        }

        public ProjectArgs build() {
            return $;
        }
    }

}
