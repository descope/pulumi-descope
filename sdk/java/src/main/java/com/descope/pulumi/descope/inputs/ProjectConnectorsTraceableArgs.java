// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsTraceableArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsTraceableArgs Empty = new ProjectConnectorsTraceableArgs();

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * EU(Europe) Region deployment of Traceable platform.
     * 
     */
    @Import(name="euRegion")
    private @Nullable Output<Boolean> euRegion;

    /**
     * @return EU(Europe) Region deployment of Traceable platform.
     * 
     */
    public Optional<Output<Boolean>> euRegion() {
        return Optional.ofNullable(this.euRegion);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Traceable secret key.
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return The Traceable secret key.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    private ProjectConnectorsTraceableArgs() {}

    private ProjectConnectorsTraceableArgs(ProjectConnectorsTraceableArgs $) {
        this.description = $.description;
        this.euRegion = $.euRegion;
        this.id = $.id;
        this.name = $.name;
        this.secretKey = $.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsTraceableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsTraceableArgs $;

        public Builder() {
            $ = new ProjectConnectorsTraceableArgs();
        }

        public Builder(ProjectConnectorsTraceableArgs defaults) {
            $ = new ProjectConnectorsTraceableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param euRegion EU(Europe) Region deployment of Traceable platform.
         * 
         * @return builder
         * 
         */
        public Builder euRegion(@Nullable Output<Boolean> euRegion) {
            $.euRegion = euRegion;
            return this;
        }

        /**
         * @param euRegion EU(Europe) Region deployment of Traceable platform.
         * 
         * @return builder
         * 
         */
        public Builder euRegion(Boolean euRegion) {
            return euRegion(Output.of(euRegion));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretKey The Traceable secret key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The Traceable secret key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public ProjectConnectorsTraceableArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsTraceableArgs", "name");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsTraceableArgs", "secretKey");
            }
            return $;
        }
    }

}
