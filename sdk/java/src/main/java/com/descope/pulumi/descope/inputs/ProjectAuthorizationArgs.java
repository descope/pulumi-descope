// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectAuthorizationPermissionArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthorizationRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthorizationArgs Empty = new ProjectAuthorizationArgs();

    /**
     * A list of `Permission` objects.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<ProjectAuthorizationPermissionArgs>> permissions;

    /**
     * @return A list of `Permission` objects.
     * 
     */
    public Optional<Output<List<ProjectAuthorizationPermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * A list of `Role` objects.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<ProjectAuthorizationRoleArgs>> roles;

    /**
     * @return A list of `Role` objects.
     * 
     */
    public Optional<Output<List<ProjectAuthorizationRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    private ProjectAuthorizationArgs() {}

    private ProjectAuthorizationArgs(ProjectAuthorizationArgs $) {
        this.permissions = $.permissions;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthorizationArgs $;

        public Builder() {
            $ = new ProjectAuthorizationArgs();
        }

        public Builder(ProjectAuthorizationArgs defaults) {
            $ = new ProjectAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions A list of `Permission` objects.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<ProjectAuthorizationPermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A list of `Permission` objects.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<ProjectAuthorizationPermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A list of `Permission` objects.
         * 
         * @return builder
         * 
         */
        public Builder permissions(ProjectAuthorizationPermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param roles A list of `Role` objects.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<ProjectAuthorizationRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles A list of `Role` objects.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<ProjectAuthorizationRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles A list of `Role` objects.
         * 
         * @return builder
         * 
         */
        public Builder roles(ProjectAuthorizationRoleArgs... roles) {
            return roles(List.of(roles));
        }

        public ProjectAuthorizationArgs build() {
            return $;
        }
    }

}
