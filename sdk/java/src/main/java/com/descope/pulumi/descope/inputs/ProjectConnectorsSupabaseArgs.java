// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSupabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSupabaseArgs Empty = new ProjectConnectorsSupabaseArgs();

    /**
     * The authentication type to use.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return The authentication type to use.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
     * 
     */
    @Import(name="createUsers")
    private @Nullable Output<Boolean> createUsers;

    /**
     * @return Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
     * 
     */
    public Optional<Output<Boolean>> createUsers() {
        return Optional.ofNullable(this.createUsers);
    }

    /**
     * A mapping of Descope user fields or JWT claims to Supabase custom claims
     * 
     */
    @Import(name="customClaimsMapping")
    private @Nullable Output<Map<String,String>> customClaimsMapping;

    /**
     * @return A mapping of Descope user fields or JWT claims to Supabase custom claims
     * 
     */
    public Optional<Output<Map<String,String>>> customClaimsMapping() {
        return Optional.ofNullable(this.customClaimsMapping);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The duration in minutes for which the token is valid.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<Double> expirationTime;

    /**
     * @return The duration in minutes for which the token is valid.
     * 
     */
    public Optional<Output<Double>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Your Supabase Project&#39;s API base URL, e.g.: https://\n\n.supabase.co.
     * 
     */
    @Import(name="projectBaseUrl")
    private @Nullable Output<String> projectBaseUrl;

    /**
     * @return Your Supabase Project&#39;s API base URL, e.g.: https://\n\n.supabase.co.
     * 
     */
    public Optional<Output<String>> projectBaseUrl() {
        return Optional.ofNullable(this.projectBaseUrl);
    }

    /**
     * The service role API key for your Supabase project, required to create users.
     * 
     */
    @Import(name="serviceRoleApiKey")
    private @Nullable Output<String> serviceRoleApiKey;

    /**
     * @return The service role API key for your Supabase project, required to create users.
     * 
     */
    public Optional<Output<String>> serviceRoleApiKey() {
        return Optional.ofNullable(this.serviceRoleApiKey);
    }

    /**
     * The signing secret for your Supabase project.
     * 
     */
    @Import(name="signingSecret")
    private @Nullable Output<String> signingSecret;

    /**
     * @return The signing secret for your Supabase project.
     * 
     */
    public Optional<Output<String>> signingSecret() {
        return Optional.ofNullable(this.signingSecret);
    }

    private ProjectConnectorsSupabaseArgs() {}

    private ProjectConnectorsSupabaseArgs(ProjectConnectorsSupabaseArgs $) {
        this.authType = $.authType;
        this.createUsers = $.createUsers;
        this.customClaimsMapping = $.customClaimsMapping;
        this.description = $.description;
        this.expirationTime = $.expirationTime;
        this.id = $.id;
        this.name = $.name;
        this.privateKey = $.privateKey;
        this.projectBaseUrl = $.projectBaseUrl;
        this.serviceRoleApiKey = $.serviceRoleApiKey;
        this.signingSecret = $.signingSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSupabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSupabaseArgs $;

        public Builder() {
            $ = new ProjectConnectorsSupabaseArgs();
        }

        public Builder(ProjectConnectorsSupabaseArgs defaults) {
            $ = new ProjectConnectorsSupabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType The authentication type to use.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The authentication type to use.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param createUsers Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
         * 
         * @return builder
         * 
         */
        public Builder createUsers(@Nullable Output<Boolean> createUsers) {
            $.createUsers = createUsers;
            return this;
        }

        /**
         * @param createUsers Enable to automatically create users in Supabase when generating tokens. Will only create a new user if one does not already exist. When disabled, only JWT tokens will be generated, WITHOUT user creation.
         * 
         * @return builder
         * 
         */
        public Builder createUsers(Boolean createUsers) {
            return createUsers(Output.of(createUsers));
        }

        /**
         * @param customClaimsMapping A mapping of Descope user fields or JWT claims to Supabase custom claims
         * 
         * @return builder
         * 
         */
        public Builder customClaimsMapping(@Nullable Output<Map<String,String>> customClaimsMapping) {
            $.customClaimsMapping = customClaimsMapping;
            return this;
        }

        /**
         * @param customClaimsMapping A mapping of Descope user fields or JWT claims to Supabase custom claims
         * 
         * @return builder
         * 
         */
        public Builder customClaimsMapping(Map<String,String> customClaimsMapping) {
            return customClaimsMapping(Output.of(customClaimsMapping));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expirationTime The duration in minutes for which the token is valid.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(@Nullable Output<Double> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime The duration in minutes for which the token is valid.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(Double expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key in JWK format used to sign the JWT. You can generate a key using tools like `npx supabase gen signing-key --algorithm ES256`. Make sure to use the ES256 algorithm.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectBaseUrl Your Supabase Project&#39;s API base URL, e.g.: https://\n\n.supabase.co.
         * 
         * @return builder
         * 
         */
        public Builder projectBaseUrl(@Nullable Output<String> projectBaseUrl) {
            $.projectBaseUrl = projectBaseUrl;
            return this;
        }

        /**
         * @param projectBaseUrl Your Supabase Project&#39;s API base URL, e.g.: https://\n\n.supabase.co.
         * 
         * @return builder
         * 
         */
        public Builder projectBaseUrl(String projectBaseUrl) {
            return projectBaseUrl(Output.of(projectBaseUrl));
        }

        /**
         * @param serviceRoleApiKey The service role API key for your Supabase project, required to create users.
         * 
         * @return builder
         * 
         */
        public Builder serviceRoleApiKey(@Nullable Output<String> serviceRoleApiKey) {
            $.serviceRoleApiKey = serviceRoleApiKey;
            return this;
        }

        /**
         * @param serviceRoleApiKey The service role API key for your Supabase project, required to create users.
         * 
         * @return builder
         * 
         */
        public Builder serviceRoleApiKey(String serviceRoleApiKey) {
            return serviceRoleApiKey(Output.of(serviceRoleApiKey));
        }

        /**
         * @param signingSecret The signing secret for your Supabase project.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(@Nullable Output<String> signingSecret) {
            $.signingSecret = signingSecret;
            return this;
        }

        /**
         * @param signingSecret The signing secret for your Supabase project.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(String signingSecret) {
            return signingSecret(Output.of(signingSecret));
        }

        public ProjectConnectorsSupabaseArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSupabaseArgs", "name");
            }
            return $;
        }
    }

}
