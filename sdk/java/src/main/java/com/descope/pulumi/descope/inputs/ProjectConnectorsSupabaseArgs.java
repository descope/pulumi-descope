// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSupabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSupabaseArgs Empty = new ProjectConnectorsSupabaseArgs();

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The duration in minutes for which the token is valid.
     * 
     */
    @Import(name="expirationTime")
    private @Nullable Output<Double> expirationTime;

    /**
     * @return The duration in minutes for which the token is valid.
     * 
     */
    public Optional<Output<Double>> expirationTime() {
        return Optional.ofNullable(this.expirationTime);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The signing secret for your Supabase project.
     * 
     */
    @Import(name="signingSecret", required=true)
    private Output<String> signingSecret;

    /**
     * @return The signing secret for your Supabase project.
     * 
     */
    public Output<String> signingSecret() {
        return this.signingSecret;
    }

    private ProjectConnectorsSupabaseArgs() {}

    private ProjectConnectorsSupabaseArgs(ProjectConnectorsSupabaseArgs $) {
        this.description = $.description;
        this.expirationTime = $.expirationTime;
        this.id = $.id;
        this.name = $.name;
        this.signingSecret = $.signingSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSupabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSupabaseArgs $;

        public Builder() {
            $ = new ProjectConnectorsSupabaseArgs();
        }

        public Builder(ProjectConnectorsSupabaseArgs defaults) {
            $ = new ProjectConnectorsSupabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expirationTime The duration in minutes for which the token is valid.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(@Nullable Output<Double> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime The duration in minutes for which the token is valid.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(Double expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signingSecret The signing secret for your Supabase project.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(Output<String> signingSecret) {
            $.signingSecret = signingSecret;
            return this;
        }

        /**
         * @param signingSecret The signing secret for your Supabase project.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(String signingSecret) {
            return signingSecret(Output.of(signingSecret));
        }

        public ProjectConnectorsSupabaseArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSupabaseArgs", "name");
            }
            if ($.signingSecret == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSupabaseArgs", "signingSecret");
            }
            return $;
        }
    }

}
