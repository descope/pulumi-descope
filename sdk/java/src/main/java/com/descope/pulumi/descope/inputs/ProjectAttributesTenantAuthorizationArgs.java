// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAttributesTenantAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAttributesTenantAuthorizationArgs Empty = new ProjectAttributesTenantAuthorizationArgs();

    /**
     * Determines the required permissions for this tenant.
     * 
     */
    @Import(name="viewPermissions")
    private @Nullable Output<List<String>> viewPermissions;

    /**
     * @return Determines the required permissions for this tenant.
     * 
     */
    public Optional<Output<List<String>>> viewPermissions() {
        return Optional.ofNullable(this.viewPermissions);
    }

    private ProjectAttributesTenantAuthorizationArgs() {}

    private ProjectAttributesTenantAuthorizationArgs(ProjectAttributesTenantAuthorizationArgs $) {
        this.viewPermissions = $.viewPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAttributesTenantAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAttributesTenantAuthorizationArgs $;

        public Builder() {
            $ = new ProjectAttributesTenantAuthorizationArgs();
        }

        public Builder(ProjectAttributesTenantAuthorizationArgs defaults) {
            $ = new ProjectAttributesTenantAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param viewPermissions Determines the required permissions for this tenant.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(@Nullable Output<List<String>> viewPermissions) {
            $.viewPermissions = viewPermissions;
            return this;
        }

        /**
         * @param viewPermissions Determines the required permissions for this tenant.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(List<String> viewPermissions) {
            return viewPermissions(Output.of(viewPermissions));
        }

        /**
         * @param viewPermissions Determines the required permissions for this tenant.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(String... viewPermissions) {
            return viewPermissions(List.of(viewPermissions));
        }

        public ProjectAttributesTenantAuthorizationArgs build() {
            return $;
        }
    }

}
