// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectProjectSettingsSessionMigration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectProjectSettings {
    /**
     * @return Name of the access key JWT Template.
     * 
     */
    private @Nullable String accessKeyJwtTemplate;
    /**
     * @return The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
     * 
     */
    private @Nullable String accessKeySessionTokenExpiration;
    /**
     * @return The URL which your application resides on.
     * 
     */
    private @Nullable String appUrl;
    /**
     * @return The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
     * 
     */
    private @Nullable List<String> approvedDomains;
    /**
     * @return A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    private @Nullable String customDomain;
    /**
     * @return Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
     * 
     */
    private @Nullable Boolean defaultNoSsoApps;
    /**
     * @return Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
     * 
     */
    private @Nullable Boolean enableInactivity;
    /**
     * @return The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
     * 
     */
    private @Nullable String inactivityTime;
    /**
     * @return The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    private @Nullable String refreshTokenCookieDomain;
    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    private @Nullable String refreshTokenCookiePolicy;
    /**
     * @return The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    private @Nullable String refreshTokenExpiration;
    /**
     * @return Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    private @Nullable String refreshTokenResponseMethod;
    /**
     * @return Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
     * 
     */
    private @Nullable Boolean refreshTokenRotation;
    /**
     * @return Configure seamless migration of existing user sessions from another vendor to Descope.
     * 
     */
    private @Nullable ProjectProjectSettingsSessionMigration sessionMigration;
    /**
     * @return The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    private @Nullable String sessionTokenCookieDomain;
    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    private @Nullable String sessionTokenCookiePolicy;
    /**
     * @return The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
     * 
     */
    private @Nullable String sessionTokenExpiration;
    /**
     * @return Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    private @Nullable String sessionTokenResponseMethod;
    /**
     * @return The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
     * 
     */
    private @Nullable String stepUpTokenExpiration;
    /**
     * @return Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
     * 
     */
    private @Nullable String testUsersLoginidRegexp;
    /**
     * @return A 6 digit static OTP code for use with test users.
     * 
     */
    private @Nullable String testUsersStaticOtp;
    /**
     * @return The pattern of the verifiers that will be used for testing.
     * 
     */
    private @Nullable String testUsersVerifierRegexp;
    /**
     * @return The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    private @Nullable String trustedDeviceTokenExpiration;
    /**
     * @return Name of the user JWT Template.
     * 
     */
    private @Nullable String userJwtTemplate;

    private ProjectProjectSettings() {}
    /**
     * @return Name of the access key JWT Template.
     * 
     */
    public Optional<String> accessKeyJwtTemplate() {
        return Optional.ofNullable(this.accessKeyJwtTemplate);
    }
    /**
     * @return The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
     * 
     */
    public Optional<String> accessKeySessionTokenExpiration() {
        return Optional.ofNullable(this.accessKeySessionTokenExpiration);
    }
    /**
     * @return The URL which your application resides on.
     * 
     */
    public Optional<String> appUrl() {
        return Optional.ofNullable(this.appUrl);
    }
    /**
     * @return The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
     * 
     */
    public List<String> approvedDomains() {
        return this.approvedDomains == null ? List.of() : this.approvedDomains;
    }
    /**
     * @return A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<String> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
     * 
     */
    public Optional<Boolean> defaultNoSsoApps() {
        return Optional.ofNullable(this.defaultNoSsoApps);
    }
    /**
     * @return Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
     * 
     */
    public Optional<Boolean> enableInactivity() {
        return Optional.ofNullable(this.enableInactivity);
    }
    /**
     * @return The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
     * 
     */
    public Optional<String> inactivityTime() {
        return Optional.ofNullable(this.inactivityTime);
    }
    /**
     * @return The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<String> refreshTokenCookieDomain() {
        return Optional.ofNullable(this.refreshTokenCookieDomain);
    }
    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<String> refreshTokenCookiePolicy() {
        return Optional.ofNullable(this.refreshTokenCookiePolicy);
    }
    /**
     * @return The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    public Optional<String> refreshTokenExpiration() {
        return Optional.ofNullable(this.refreshTokenExpiration);
    }
    /**
     * @return Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    public Optional<String> refreshTokenResponseMethod() {
        return Optional.ofNullable(this.refreshTokenResponseMethod);
    }
    /**
     * @return Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
     * 
     */
    public Optional<Boolean> refreshTokenRotation() {
        return Optional.ofNullable(this.refreshTokenRotation);
    }
    /**
     * @return Configure seamless migration of existing user sessions from another vendor to Descope.
     * 
     */
    public Optional<ProjectProjectSettingsSessionMigration> sessionMigration() {
        return Optional.ofNullable(this.sessionMigration);
    }
    /**
     * @return The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<String> sessionTokenCookieDomain() {
        return Optional.ofNullable(this.sessionTokenCookieDomain);
    }
    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<String> sessionTokenCookiePolicy() {
        return Optional.ofNullable(this.sessionTokenCookiePolicy);
    }
    /**
     * @return The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
     * 
     */
    public Optional<String> sessionTokenExpiration() {
        return Optional.ofNullable(this.sessionTokenExpiration);
    }
    /**
     * @return Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    public Optional<String> sessionTokenResponseMethod() {
        return Optional.ofNullable(this.sessionTokenResponseMethod);
    }
    /**
     * @return The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
     * 
     */
    public Optional<String> stepUpTokenExpiration() {
        return Optional.ofNullable(this.stepUpTokenExpiration);
    }
    /**
     * @return Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
     * 
     */
    public Optional<String> testUsersLoginidRegexp() {
        return Optional.ofNullable(this.testUsersLoginidRegexp);
    }
    /**
     * @return A 6 digit static OTP code for use with test users.
     * 
     */
    public Optional<String> testUsersStaticOtp() {
        return Optional.ofNullable(this.testUsersStaticOtp);
    }
    /**
     * @return The pattern of the verifiers that will be used for testing.
     * 
     */
    public Optional<String> testUsersVerifierRegexp() {
        return Optional.ofNullable(this.testUsersVerifierRegexp);
    }
    /**
     * @return The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    public Optional<String> trustedDeviceTokenExpiration() {
        return Optional.ofNullable(this.trustedDeviceTokenExpiration);
    }
    /**
     * @return Name of the user JWT Template.
     * 
     */
    public Optional<String> userJwtTemplate() {
        return Optional.ofNullable(this.userJwtTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectProjectSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyJwtTemplate;
        private @Nullable String accessKeySessionTokenExpiration;
        private @Nullable String appUrl;
        private @Nullable List<String> approvedDomains;
        private @Nullable String customDomain;
        private @Nullable Boolean defaultNoSsoApps;
        private @Nullable Boolean enableInactivity;
        private @Nullable String inactivityTime;
        private @Nullable String refreshTokenCookieDomain;
        private @Nullable String refreshTokenCookiePolicy;
        private @Nullable String refreshTokenExpiration;
        private @Nullable String refreshTokenResponseMethod;
        private @Nullable Boolean refreshTokenRotation;
        private @Nullable ProjectProjectSettingsSessionMigration sessionMigration;
        private @Nullable String sessionTokenCookieDomain;
        private @Nullable String sessionTokenCookiePolicy;
        private @Nullable String sessionTokenExpiration;
        private @Nullable String sessionTokenResponseMethod;
        private @Nullable String stepUpTokenExpiration;
        private @Nullable String testUsersLoginidRegexp;
        private @Nullable String testUsersStaticOtp;
        private @Nullable String testUsersVerifierRegexp;
        private @Nullable String trustedDeviceTokenExpiration;
        private @Nullable String userJwtTemplate;
        public Builder() {}
        public Builder(ProjectProjectSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyJwtTemplate = defaults.accessKeyJwtTemplate;
    	      this.accessKeySessionTokenExpiration = defaults.accessKeySessionTokenExpiration;
    	      this.appUrl = defaults.appUrl;
    	      this.approvedDomains = defaults.approvedDomains;
    	      this.customDomain = defaults.customDomain;
    	      this.defaultNoSsoApps = defaults.defaultNoSsoApps;
    	      this.enableInactivity = defaults.enableInactivity;
    	      this.inactivityTime = defaults.inactivityTime;
    	      this.refreshTokenCookieDomain = defaults.refreshTokenCookieDomain;
    	      this.refreshTokenCookiePolicy = defaults.refreshTokenCookiePolicy;
    	      this.refreshTokenExpiration = defaults.refreshTokenExpiration;
    	      this.refreshTokenResponseMethod = defaults.refreshTokenResponseMethod;
    	      this.refreshTokenRotation = defaults.refreshTokenRotation;
    	      this.sessionMigration = defaults.sessionMigration;
    	      this.sessionTokenCookieDomain = defaults.sessionTokenCookieDomain;
    	      this.sessionTokenCookiePolicy = defaults.sessionTokenCookiePolicy;
    	      this.sessionTokenExpiration = defaults.sessionTokenExpiration;
    	      this.sessionTokenResponseMethod = defaults.sessionTokenResponseMethod;
    	      this.stepUpTokenExpiration = defaults.stepUpTokenExpiration;
    	      this.testUsersLoginidRegexp = defaults.testUsersLoginidRegexp;
    	      this.testUsersStaticOtp = defaults.testUsersStaticOtp;
    	      this.testUsersVerifierRegexp = defaults.testUsersVerifierRegexp;
    	      this.trustedDeviceTokenExpiration = defaults.trustedDeviceTokenExpiration;
    	      this.userJwtTemplate = defaults.userJwtTemplate;
        }

        @CustomType.Setter
        public Builder accessKeyJwtTemplate(@Nullable String accessKeyJwtTemplate) {

            this.accessKeyJwtTemplate = accessKeyJwtTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder accessKeySessionTokenExpiration(@Nullable String accessKeySessionTokenExpiration) {

            this.accessKeySessionTokenExpiration = accessKeySessionTokenExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder appUrl(@Nullable String appUrl) {

            this.appUrl = appUrl;
            return this;
        }
        @CustomType.Setter
        public Builder approvedDomains(@Nullable List<String> approvedDomains) {

            this.approvedDomains = approvedDomains;
            return this;
        }
        public Builder approvedDomains(String... approvedDomains) {
            return approvedDomains(List.of(approvedDomains));
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable String customDomain) {

            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder defaultNoSsoApps(@Nullable Boolean defaultNoSsoApps) {

            this.defaultNoSsoApps = defaultNoSsoApps;
            return this;
        }
        @CustomType.Setter
        public Builder enableInactivity(@Nullable Boolean enableInactivity) {

            this.enableInactivity = enableInactivity;
            return this;
        }
        @CustomType.Setter
        public Builder inactivityTime(@Nullable String inactivityTime) {

            this.inactivityTime = inactivityTime;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenCookieDomain(@Nullable String refreshTokenCookieDomain) {

            this.refreshTokenCookieDomain = refreshTokenCookieDomain;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenCookiePolicy(@Nullable String refreshTokenCookiePolicy) {

            this.refreshTokenCookiePolicy = refreshTokenCookiePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenExpiration(@Nullable String refreshTokenExpiration) {

            this.refreshTokenExpiration = refreshTokenExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenResponseMethod(@Nullable String refreshTokenResponseMethod) {

            this.refreshTokenResponseMethod = refreshTokenResponseMethod;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenRotation(@Nullable Boolean refreshTokenRotation) {

            this.refreshTokenRotation = refreshTokenRotation;
            return this;
        }
        @CustomType.Setter
        public Builder sessionMigration(@Nullable ProjectProjectSettingsSessionMigration sessionMigration) {

            this.sessionMigration = sessionMigration;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTokenCookieDomain(@Nullable String sessionTokenCookieDomain) {

            this.sessionTokenCookieDomain = sessionTokenCookieDomain;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTokenCookiePolicy(@Nullable String sessionTokenCookiePolicy) {

            this.sessionTokenCookiePolicy = sessionTokenCookiePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTokenExpiration(@Nullable String sessionTokenExpiration) {

            this.sessionTokenExpiration = sessionTokenExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTokenResponseMethod(@Nullable String sessionTokenResponseMethod) {

            this.sessionTokenResponseMethod = sessionTokenResponseMethod;
            return this;
        }
        @CustomType.Setter
        public Builder stepUpTokenExpiration(@Nullable String stepUpTokenExpiration) {

            this.stepUpTokenExpiration = stepUpTokenExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder testUsersLoginidRegexp(@Nullable String testUsersLoginidRegexp) {

            this.testUsersLoginidRegexp = testUsersLoginidRegexp;
            return this;
        }
        @CustomType.Setter
        public Builder testUsersStaticOtp(@Nullable String testUsersStaticOtp) {

            this.testUsersStaticOtp = testUsersStaticOtp;
            return this;
        }
        @CustomType.Setter
        public Builder testUsersVerifierRegexp(@Nullable String testUsersVerifierRegexp) {

            this.testUsersVerifierRegexp = testUsersVerifierRegexp;
            return this;
        }
        @CustomType.Setter
        public Builder trustedDeviceTokenExpiration(@Nullable String trustedDeviceTokenExpiration) {

            this.trustedDeviceTokenExpiration = trustedDeviceTokenExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder userJwtTemplate(@Nullable String userJwtTemplate) {

            this.userJwtTemplate = userJwtTemplate;
            return this;
        }
        public ProjectProjectSettings build() {
            final var _resultValue = new ProjectProjectSettings();
            _resultValue.accessKeyJwtTemplate = accessKeyJwtTemplate;
            _resultValue.accessKeySessionTokenExpiration = accessKeySessionTokenExpiration;
            _resultValue.appUrl = appUrl;
            _resultValue.approvedDomains = approvedDomains;
            _resultValue.customDomain = customDomain;
            _resultValue.defaultNoSsoApps = defaultNoSsoApps;
            _resultValue.enableInactivity = enableInactivity;
            _resultValue.inactivityTime = inactivityTime;
            _resultValue.refreshTokenCookieDomain = refreshTokenCookieDomain;
            _resultValue.refreshTokenCookiePolicy = refreshTokenCookiePolicy;
            _resultValue.refreshTokenExpiration = refreshTokenExpiration;
            _resultValue.refreshTokenResponseMethod = refreshTokenResponseMethod;
            _resultValue.refreshTokenRotation = refreshTokenRotation;
            _resultValue.sessionMigration = sessionMigration;
            _resultValue.sessionTokenCookieDomain = sessionTokenCookieDomain;
            _resultValue.sessionTokenCookiePolicy = sessionTokenCookiePolicy;
            _resultValue.sessionTokenExpiration = sessionTokenExpiration;
            _resultValue.sessionTokenResponseMethod = sessionTokenResponseMethod;
            _resultValue.stepUpTokenExpiration = stepUpTokenExpiration;
            _resultValue.testUsersLoginidRegexp = testUsersLoginidRegexp;
            _resultValue.testUsersStaticOtp = testUsersStaticOtp;
            _resultValue.testUsersVerifierRegexp = testUsersVerifierRegexp;
            _resultValue.trustedDeviceTokenExpiration = trustedDeviceTokenExpiration;
            _resultValue.userJwtTemplate = userJwtTemplate;
            return _resultValue;
        }
    }
}
