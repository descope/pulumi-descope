// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsElephantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsElephantArgs Empty = new ProjectConnectorsElephantArgs();

    /**
     * The Elephant access key.
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return The Elephant access key.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ProjectConnectorsElephantArgs() {}

    private ProjectConnectorsElephantArgs(ProjectConnectorsElephantArgs $) {
        this.accessKey = $.accessKey;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsElephantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsElephantArgs $;

        public Builder() {
            $ = new ProjectConnectorsElephantArgs();
        }

        public Builder(ProjectConnectorsElephantArgs defaults) {
            $ = new ProjectConnectorsElephantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The Elephant access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The Elephant access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ProjectConnectorsElephantArgs build() {
            if ($.accessKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsElephantArgs", "accessKey");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsElephantArgs", "name");
            }
            return $;
        }
    }

}
