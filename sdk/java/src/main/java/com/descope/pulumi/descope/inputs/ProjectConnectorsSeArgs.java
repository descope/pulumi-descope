// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectConnectorsSeSenderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsSeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsSeArgs Empty = new ProjectConnectorsSeArgs();

    /**
     * AWS Access key ID.
     * 
     */
    @Import(name="accessKeyId", required=true)
    private Output<String> accessKeyId;

    /**
     * @return AWS Access key ID.
     * 
     */
    public Output<String> accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * AWS Secret Access Key.
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return AWS Secret Access Key.
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    /**
     * The sender details that should be displayed in the email message.
     * 
     */
    @Import(name="sender", required=true)
    private Output<ProjectConnectorsSeSenderArgs> sender;

    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    public Output<ProjectConnectorsSeSenderArgs> sender() {
        return this.sender;
    }

    private ProjectConnectorsSeArgs() {}

    private ProjectConnectorsSeArgs(ProjectConnectorsSeArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.id = $.id;
        this.name = $.name;
        this.region = $.region;
        this.secret = $.secret;
        this.sender = $.sender;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsSeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsSeArgs $;

        public Builder() {
            $ = new ProjectConnectorsSeArgs();
        }

        public Builder(ProjectConnectorsSeArgs defaults) {
            $ = new ProjectConnectorsSeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId AWS Access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId AWS Access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoint An optional endpoint URL (hostname only or fully qualified URI).
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint An optional endpoint URL (hostname only or fully qualified URI).
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region AWS region to send requests to (e.g. `us-west-2`).
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region to send requests to (e.g. `us-west-2`).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secret AWS Secret Access Key.
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret AWS Secret Access Key.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param sender The sender details that should be displayed in the email message.
         * 
         * @return builder
         * 
         */
        public Builder sender(Output<ProjectConnectorsSeSenderArgs> sender) {
            $.sender = sender;
            return this;
        }

        /**
         * @param sender The sender details that should be displayed in the email message.
         * 
         * @return builder
         * 
         */
        public Builder sender(ProjectConnectorsSeSenderArgs sender) {
            return sender(Output.of(sender));
        }

        public ProjectConnectorsSeArgs build() {
            if ($.accessKeyId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSeArgs", "accessKeyId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSeArgs", "name");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSeArgs", "region");
            }
            if ($.secret == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSeArgs", "secret");
            }
            if ($.sender == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsSeArgs", "sender");
            }
            return $;
        }
    }

}
