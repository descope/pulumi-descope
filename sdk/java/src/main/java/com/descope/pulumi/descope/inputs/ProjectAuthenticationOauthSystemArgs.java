// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemAppleArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemDiscordArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemFacebookArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemGithubArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemGitlabArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemGoogleArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemLinkedinArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemMicrosoftArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemSlackArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthenticationOauthSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthenticationOauthSystemArgs Empty = new ProjectAuthenticationOauthSystemArgs();

    /**
     * Apple&#39;s OAuth provider, allowing users to authenticate with their Apple Account.
     * 
     */
    @Import(name="apple")
    private @Nullable Output<ProjectAuthenticationOauthSystemAppleArgs> apple;

    /**
     * @return Apple&#39;s OAuth provider, allowing users to authenticate with their Apple Account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemAppleArgs>> apple() {
        return Optional.ofNullable(this.apple);
    }

    /**
     * Discord&#39;s OAuth provider, allowing users to authenticate with their Discord account.
     * 
     */
    @Import(name="discord")
    private @Nullable Output<ProjectAuthenticationOauthSystemDiscordArgs> discord;

    /**
     * @return Discord&#39;s OAuth provider, allowing users to authenticate with their Discord account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemDiscordArgs>> discord() {
        return Optional.ofNullable(this.discord);
    }

    /**
     * Facebook&#39;s OAuth provider, allowing users to authenticate with their Facebook account.
     * 
     */
    @Import(name="facebook")
    private @Nullable Output<ProjectAuthenticationOauthSystemFacebookArgs> facebook;

    /**
     * @return Facebook&#39;s OAuth provider, allowing users to authenticate with their Facebook account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemFacebookArgs>> facebook() {
        return Optional.ofNullable(this.facebook);
    }

    /**
     * GitHub&#39;s OAuth provider, allowing users to authenticate with their GitHub account.
     * 
     */
    @Import(name="github")
    private @Nullable Output<ProjectAuthenticationOauthSystemGithubArgs> github;

    /**
     * @return GitHub&#39;s OAuth provider, allowing users to authenticate with their GitHub account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemGithubArgs>> github() {
        return Optional.ofNullable(this.github);
    }

    /**
     * GitLab&#39;s OAuth provider, allowing users to authenticate with their GitLab account.
     * 
     */
    @Import(name="gitlab")
    private @Nullable Output<ProjectAuthenticationOauthSystemGitlabArgs> gitlab;

    /**
     * @return GitLab&#39;s OAuth provider, allowing users to authenticate with their GitLab account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemGitlabArgs>> gitlab() {
        return Optional.ofNullable(this.gitlab);
    }

    /**
     * Google&#39;s OAuth provider, allowing users to authenticate with their Google account.
     * 
     */
    @Import(name="google")
    private @Nullable Output<ProjectAuthenticationOauthSystemGoogleArgs> google;

    /**
     * @return Google&#39;s OAuth provider, allowing users to authenticate with their Google account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemGoogleArgs>> google() {
        return Optional.ofNullable(this.google);
    }

    /**
     * LinkedIn&#39;s OAuth provider, allowing users to authenticate with their LinkedIn account.
     * 
     */
    @Import(name="linkedin")
    private @Nullable Output<ProjectAuthenticationOauthSystemLinkedinArgs> linkedin;

    /**
     * @return LinkedIn&#39;s OAuth provider, allowing users to authenticate with their LinkedIn account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemLinkedinArgs>> linkedin() {
        return Optional.ofNullable(this.linkedin);
    }

    /**
     * Microsoft&#39;s OAuth provider, allowing users to authenticate with their Microsoft account.
     * 
     */
    @Import(name="microsoft")
    private @Nullable Output<ProjectAuthenticationOauthSystemMicrosoftArgs> microsoft;

    /**
     * @return Microsoft&#39;s OAuth provider, allowing users to authenticate with their Microsoft account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemMicrosoftArgs>> microsoft() {
        return Optional.ofNullable(this.microsoft);
    }

    /**
     * Slack&#39;s OAuth provider, allowing users to authenticate with their Slack account.
     * 
     */
    @Import(name="slack")
    private @Nullable Output<ProjectAuthenticationOauthSystemSlackArgs> slack;

    /**
     * @return Slack&#39;s OAuth provider, allowing users to authenticate with their Slack account.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemSlackArgs>> slack() {
        return Optional.ofNullable(this.slack);
    }

    private ProjectAuthenticationOauthSystemArgs() {}

    private ProjectAuthenticationOauthSystemArgs(ProjectAuthenticationOauthSystemArgs $) {
        this.apple = $.apple;
        this.discord = $.discord;
        this.facebook = $.facebook;
        this.github = $.github;
        this.gitlab = $.gitlab;
        this.google = $.google;
        this.linkedin = $.linkedin;
        this.microsoft = $.microsoft;
        this.slack = $.slack;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthenticationOauthSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthenticationOauthSystemArgs $;

        public Builder() {
            $ = new ProjectAuthenticationOauthSystemArgs();
        }

        public Builder(ProjectAuthenticationOauthSystemArgs defaults) {
            $ = new ProjectAuthenticationOauthSystemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apple Apple&#39;s OAuth provider, allowing users to authenticate with their Apple Account.
         * 
         * @return builder
         * 
         */
        public Builder apple(@Nullable Output<ProjectAuthenticationOauthSystemAppleArgs> apple) {
            $.apple = apple;
            return this;
        }

        /**
         * @param apple Apple&#39;s OAuth provider, allowing users to authenticate with their Apple Account.
         * 
         * @return builder
         * 
         */
        public Builder apple(ProjectAuthenticationOauthSystemAppleArgs apple) {
            return apple(Output.of(apple));
        }

        /**
         * @param discord Discord&#39;s OAuth provider, allowing users to authenticate with their Discord account.
         * 
         * @return builder
         * 
         */
        public Builder discord(@Nullable Output<ProjectAuthenticationOauthSystemDiscordArgs> discord) {
            $.discord = discord;
            return this;
        }

        /**
         * @param discord Discord&#39;s OAuth provider, allowing users to authenticate with their Discord account.
         * 
         * @return builder
         * 
         */
        public Builder discord(ProjectAuthenticationOauthSystemDiscordArgs discord) {
            return discord(Output.of(discord));
        }

        /**
         * @param facebook Facebook&#39;s OAuth provider, allowing users to authenticate with their Facebook account.
         * 
         * @return builder
         * 
         */
        public Builder facebook(@Nullable Output<ProjectAuthenticationOauthSystemFacebookArgs> facebook) {
            $.facebook = facebook;
            return this;
        }

        /**
         * @param facebook Facebook&#39;s OAuth provider, allowing users to authenticate with their Facebook account.
         * 
         * @return builder
         * 
         */
        public Builder facebook(ProjectAuthenticationOauthSystemFacebookArgs facebook) {
            return facebook(Output.of(facebook));
        }

        /**
         * @param github GitHub&#39;s OAuth provider, allowing users to authenticate with their GitHub account.
         * 
         * @return builder
         * 
         */
        public Builder github(@Nullable Output<ProjectAuthenticationOauthSystemGithubArgs> github) {
            $.github = github;
            return this;
        }

        /**
         * @param github GitHub&#39;s OAuth provider, allowing users to authenticate with their GitHub account.
         * 
         * @return builder
         * 
         */
        public Builder github(ProjectAuthenticationOauthSystemGithubArgs github) {
            return github(Output.of(github));
        }

        /**
         * @param gitlab GitLab&#39;s OAuth provider, allowing users to authenticate with their GitLab account.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(@Nullable Output<ProjectAuthenticationOauthSystemGitlabArgs> gitlab) {
            $.gitlab = gitlab;
            return this;
        }

        /**
         * @param gitlab GitLab&#39;s OAuth provider, allowing users to authenticate with their GitLab account.
         * 
         * @return builder
         * 
         */
        public Builder gitlab(ProjectAuthenticationOauthSystemGitlabArgs gitlab) {
            return gitlab(Output.of(gitlab));
        }

        /**
         * @param google Google&#39;s OAuth provider, allowing users to authenticate with their Google account.
         * 
         * @return builder
         * 
         */
        public Builder google(@Nullable Output<ProjectAuthenticationOauthSystemGoogleArgs> google) {
            $.google = google;
            return this;
        }

        /**
         * @param google Google&#39;s OAuth provider, allowing users to authenticate with their Google account.
         * 
         * @return builder
         * 
         */
        public Builder google(ProjectAuthenticationOauthSystemGoogleArgs google) {
            return google(Output.of(google));
        }

        /**
         * @param linkedin LinkedIn&#39;s OAuth provider, allowing users to authenticate with their LinkedIn account.
         * 
         * @return builder
         * 
         */
        public Builder linkedin(@Nullable Output<ProjectAuthenticationOauthSystemLinkedinArgs> linkedin) {
            $.linkedin = linkedin;
            return this;
        }

        /**
         * @param linkedin LinkedIn&#39;s OAuth provider, allowing users to authenticate with their LinkedIn account.
         * 
         * @return builder
         * 
         */
        public Builder linkedin(ProjectAuthenticationOauthSystemLinkedinArgs linkedin) {
            return linkedin(Output.of(linkedin));
        }

        /**
         * @param microsoft Microsoft&#39;s OAuth provider, allowing users to authenticate with their Microsoft account.
         * 
         * @return builder
         * 
         */
        public Builder microsoft(@Nullable Output<ProjectAuthenticationOauthSystemMicrosoftArgs> microsoft) {
            $.microsoft = microsoft;
            return this;
        }

        /**
         * @param microsoft Microsoft&#39;s OAuth provider, allowing users to authenticate with their Microsoft account.
         * 
         * @return builder
         * 
         */
        public Builder microsoft(ProjectAuthenticationOauthSystemMicrosoftArgs microsoft) {
            return microsoft(Output.of(microsoft));
        }

        /**
         * @param slack Slack&#39;s OAuth provider, allowing users to authenticate with their Slack account.
         * 
         * @return builder
         * 
         */
        public Builder slack(@Nullable Output<ProjectAuthenticationOauthSystemSlackArgs> slack) {
            $.slack = slack;
            return this;
        }

        /**
         * @param slack Slack&#39;s OAuth provider, allowing users to authenticate with their Slack account.
         * 
         * @return builder
         * 
         */
        public Builder slack(ProjectAuthenticationOauthSystemSlackArgs slack) {
            return slack(Output.of(slack));
        }

        public ProjectAuthenticationOauthSystemArgs build() {
            return $;
        }
    }

}
