// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectProjectSettingsSessionMigrationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectProjectSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectProjectSettingsArgs Empty = new ProjectProjectSettingsArgs();

    /**
     * Name of the access key JWT Template.
     * 
     */
    @Import(name="accessKeyJwtTemplate")
    private @Nullable Output<String> accessKeyJwtTemplate;

    /**
     * @return Name of the access key JWT Template.
     * 
     */
    public Optional<Output<String>> accessKeyJwtTemplate() {
        return Optional.ofNullable(this.accessKeyJwtTemplate);
    }

    /**
     * The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
     * 
     */
    @Import(name="accessKeySessionTokenExpiration")
    private @Nullable Output<String> accessKeySessionTokenExpiration;

    /**
     * @return The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
     * 
     */
    public Optional<Output<String>> accessKeySessionTokenExpiration() {
        return Optional.ofNullable(this.accessKeySessionTokenExpiration);
    }

    /**
     * The URL which your application resides on.
     * 
     */
    @Import(name="appUrl")
    private @Nullable Output<String> appUrl;

    /**
     * @return The URL which your application resides on.
     * 
     */
    public Optional<Output<String>> appUrl() {
        return Optional.ofNullable(this.appUrl);
    }

    /**
     * The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
     * 
     */
    @Import(name="approvedDomains")
    private @Nullable Output<List<String>> approvedDomains;

    /**
     * @return The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
     * 
     */
    public Optional<Output<List<String>>> approvedDomains() {
        return Optional.ofNullable(this.approvedDomains);
    }

    /**
     * A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<String> customDomain;

    /**
     * @return A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<Output<String>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
     * 
     */
    @Import(name="defaultNoSsoApps")
    private @Nullable Output<Boolean> defaultNoSsoApps;

    /**
     * @return Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
     * 
     */
    public Optional<Output<Boolean>> defaultNoSsoApps() {
        return Optional.ofNullable(this.defaultNoSsoApps);
    }

    /**
     * Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
     * 
     */
    @Import(name="enableInactivity")
    private @Nullable Output<Boolean> enableInactivity;

    /**
     * @return Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
     * 
     */
    public Optional<Output<Boolean>> enableInactivity() {
        return Optional.ofNullable(this.enableInactivity);
    }

    /**
     * The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
     * 
     */
    @Import(name="inactivityTime")
    private @Nullable Output<String> inactivityTime;

    /**
     * @return The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
     * 
     */
    public Optional<Output<String>> inactivityTime() {
        return Optional.ofNullable(this.inactivityTime);
    }

    /**
     * The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    @Import(name="refreshTokenCookieDomain")
    private @Nullable Output<String> refreshTokenCookieDomain;

    /**
     * @return The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<Output<String>> refreshTokenCookieDomain() {
        return Optional.ofNullable(this.refreshTokenCookieDomain);
    }

    /**
     * Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    @Import(name="refreshTokenCookiePolicy")
    private @Nullable Output<String> refreshTokenCookiePolicy;

    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<Output<String>> refreshTokenCookiePolicy() {
        return Optional.ofNullable(this.refreshTokenCookiePolicy);
    }

    /**
     * The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    @Import(name="refreshTokenExpiration")
    private @Nullable Output<String> refreshTokenExpiration;

    /**
     * @return The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    public Optional<Output<String>> refreshTokenExpiration() {
        return Optional.ofNullable(this.refreshTokenExpiration);
    }

    /**
     * Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    @Import(name="refreshTokenResponseMethod")
    private @Nullable Output<String> refreshTokenResponseMethod;

    /**
     * @return Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    public Optional<Output<String>> refreshTokenResponseMethod() {
        return Optional.ofNullable(this.refreshTokenResponseMethod);
    }

    /**
     * Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
     * 
     */
    @Import(name="refreshTokenRotation")
    private @Nullable Output<Boolean> refreshTokenRotation;

    /**
     * @return Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
     * 
     */
    public Optional<Output<Boolean>> refreshTokenRotation() {
        return Optional.ofNullable(this.refreshTokenRotation);
    }

    /**
     * Configure seamless migration of existing user sessions from another vendor to Descope.
     * 
     */
    @Import(name="sessionMigration")
    private @Nullable Output<ProjectProjectSettingsSessionMigrationArgs> sessionMigration;

    /**
     * @return Configure seamless migration of existing user sessions from another vendor to Descope.
     * 
     */
    public Optional<Output<ProjectProjectSettingsSessionMigrationArgs>> sessionMigration() {
        return Optional.ofNullable(this.sessionMigration);
    }

    /**
     * The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    @Import(name="sessionTokenCookieDomain")
    private @Nullable Output<String> sessionTokenCookieDomain;

    /**
     * @return The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<Output<String>> sessionTokenCookieDomain() {
        return Optional.ofNullable(this.sessionTokenCookieDomain);
    }

    /**
     * Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    @Import(name="sessionTokenCookiePolicy")
    private @Nullable Output<String> sessionTokenCookiePolicy;

    /**
     * @return Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
     * 
     */
    public Optional<Output<String>> sessionTokenCookiePolicy() {
        return Optional.ofNullable(this.sessionTokenCookiePolicy);
    }

    /**
     * The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
     * 
     */
    @Import(name="sessionTokenExpiration")
    private @Nullable Output<String> sessionTokenExpiration;

    /**
     * @return The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
     * 
     */
    public Optional<Output<String>> sessionTokenExpiration() {
        return Optional.ofNullable(this.sessionTokenExpiration);
    }

    /**
     * Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    @Import(name="sessionTokenResponseMethod")
    private @Nullable Output<String> sessionTokenResponseMethod;

    /**
     * @return Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
     * 
     */
    public Optional<Output<String>> sessionTokenResponseMethod() {
        return Optional.ofNullable(this.sessionTokenResponseMethod);
    }

    /**
     * The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
     * 
     */
    @Import(name="stepUpTokenExpiration")
    private @Nullable Output<String> stepUpTokenExpiration;

    /**
     * @return The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
     * 
     */
    public Optional<Output<String>> stepUpTokenExpiration() {
        return Optional.ofNullable(this.stepUpTokenExpiration);
    }

    /**
     * Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
     * 
     */
    @Import(name="testUsersLoginidRegexp")
    private @Nullable Output<String> testUsersLoginidRegexp;

    /**
     * @return Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
     * 
     */
    public Optional<Output<String>> testUsersLoginidRegexp() {
        return Optional.ofNullable(this.testUsersLoginidRegexp);
    }

    /**
     * A 6 digit static OTP code for use with test users.
     * 
     */
    @Import(name="testUsersStaticOtp")
    private @Nullable Output<String> testUsersStaticOtp;

    /**
     * @return A 6 digit static OTP code for use with test users.
     * 
     */
    public Optional<Output<String>> testUsersStaticOtp() {
        return Optional.ofNullable(this.testUsersStaticOtp);
    }

    /**
     * The pattern of the verifiers that will be used for testing.
     * 
     */
    @Import(name="testUsersVerifierRegexp")
    private @Nullable Output<String> testUsersVerifierRegexp;

    /**
     * @return The pattern of the verifiers that will be used for testing.
     * 
     */
    public Optional<Output<String>> testUsersVerifierRegexp() {
        return Optional.ofNullable(this.testUsersVerifierRegexp);
    }

    /**
     * The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    @Import(name="trustedDeviceTokenExpiration")
    private @Nullable Output<String> trustedDeviceTokenExpiration;

    /**
     * @return The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
     * 
     */
    public Optional<Output<String>> trustedDeviceTokenExpiration() {
        return Optional.ofNullable(this.trustedDeviceTokenExpiration);
    }

    /**
     * Name of the user JWT Template.
     * 
     */
    @Import(name="userJwtTemplate")
    private @Nullable Output<String> userJwtTemplate;

    /**
     * @return Name of the user JWT Template.
     * 
     */
    public Optional<Output<String>> userJwtTemplate() {
        return Optional.ofNullable(this.userJwtTemplate);
    }

    private ProjectProjectSettingsArgs() {}

    private ProjectProjectSettingsArgs(ProjectProjectSettingsArgs $) {
        this.accessKeyJwtTemplate = $.accessKeyJwtTemplate;
        this.accessKeySessionTokenExpiration = $.accessKeySessionTokenExpiration;
        this.appUrl = $.appUrl;
        this.approvedDomains = $.approvedDomains;
        this.customDomain = $.customDomain;
        this.defaultNoSsoApps = $.defaultNoSsoApps;
        this.enableInactivity = $.enableInactivity;
        this.inactivityTime = $.inactivityTime;
        this.refreshTokenCookieDomain = $.refreshTokenCookieDomain;
        this.refreshTokenCookiePolicy = $.refreshTokenCookiePolicy;
        this.refreshTokenExpiration = $.refreshTokenExpiration;
        this.refreshTokenResponseMethod = $.refreshTokenResponseMethod;
        this.refreshTokenRotation = $.refreshTokenRotation;
        this.sessionMigration = $.sessionMigration;
        this.sessionTokenCookieDomain = $.sessionTokenCookieDomain;
        this.sessionTokenCookiePolicy = $.sessionTokenCookiePolicy;
        this.sessionTokenExpiration = $.sessionTokenExpiration;
        this.sessionTokenResponseMethod = $.sessionTokenResponseMethod;
        this.stepUpTokenExpiration = $.stepUpTokenExpiration;
        this.testUsersLoginidRegexp = $.testUsersLoginidRegexp;
        this.testUsersStaticOtp = $.testUsersStaticOtp;
        this.testUsersVerifierRegexp = $.testUsersVerifierRegexp;
        this.trustedDeviceTokenExpiration = $.trustedDeviceTokenExpiration;
        this.userJwtTemplate = $.userJwtTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectProjectSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectProjectSettingsArgs $;

        public Builder() {
            $ = new ProjectProjectSettingsArgs();
        }

        public Builder(ProjectProjectSettingsArgs defaults) {
            $ = new ProjectProjectSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyJwtTemplate Name of the access key JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyJwtTemplate(@Nullable Output<String> accessKeyJwtTemplate) {
            $.accessKeyJwtTemplate = accessKeyJwtTemplate;
            return this;
        }

        /**
         * @param accessKeyJwtTemplate Name of the access key JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyJwtTemplate(String accessKeyJwtTemplate) {
            return accessKeyJwtTemplate(Output.of(accessKeyJwtTemplate));
        }

        /**
         * @param accessKeySessionTokenExpiration The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
         * 
         * @return builder
         * 
         */
        public Builder accessKeySessionTokenExpiration(@Nullable Output<String> accessKeySessionTokenExpiration) {
            $.accessKeySessionTokenExpiration = accessKeySessionTokenExpiration;
            return this;
        }

        /**
         * @param accessKeySessionTokenExpiration The expiry time for access key session tokens. Use values such as &#34;10 minutes&#34;, &#34;4 hours&#34;, etc. The value needs to be at least 3 minutes and can&#39;t be longer than 4 weeks.
         * 
         * @return builder
         * 
         */
        public Builder accessKeySessionTokenExpiration(String accessKeySessionTokenExpiration) {
            return accessKeySessionTokenExpiration(Output.of(accessKeySessionTokenExpiration));
        }

        /**
         * @param appUrl The URL which your application resides on.
         * 
         * @return builder
         * 
         */
        public Builder appUrl(@Nullable Output<String> appUrl) {
            $.appUrl = appUrl;
            return this;
        }

        /**
         * @param appUrl The URL which your application resides on.
         * 
         * @return builder
         * 
         */
        public Builder appUrl(String appUrl) {
            return appUrl(Output.of(appUrl));
        }

        /**
         * @param approvedDomains The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(@Nullable Output<List<String>> approvedDomains) {
            $.approvedDomains = approvedDomains;
            return this;
        }

        /**
         * @param approvedDomains The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(List<String> approvedDomains) {
            return approvedDomains(Output.of(approvedDomains));
        }

        /**
         * @param approvedDomains The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(String... approvedDomains) {
            return approvedDomains(List.of(approvedDomains));
        }

        /**
         * @param customDomain A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<String> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain A custom CNAME that&#39;s configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder customDomain(String customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param defaultNoSsoApps Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
         * 
         * @return builder
         * 
         */
        public Builder defaultNoSsoApps(@Nullable Output<Boolean> defaultNoSsoApps) {
            $.defaultNoSsoApps = defaultNoSsoApps;
            return this;
        }

        /**
         * @param defaultNoSsoApps Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
         * 
         * @return builder
         * 
         */
        public Builder defaultNoSsoApps(Boolean defaultNoSsoApps) {
            return defaultNoSsoApps(Output.of(defaultNoSsoApps));
        }

        /**
         * @param enableInactivity Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
         * 
         * @return builder
         * 
         */
        public Builder enableInactivity(@Nullable Output<Boolean> enableInactivity) {
            $.enableInactivity = enableInactivity;
            return this;
        }

        /**
         * @param enableInactivity Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
         * 
         * @return builder
         * 
         */
        public Builder enableInactivity(Boolean enableInactivity) {
            return enableInactivity(Output.of(enableInactivity));
        }

        /**
         * @param inactivityTime The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder inactivityTime(@Nullable Output<String> inactivityTime) {
            $.inactivityTime = inactivityTime;
            return this;
        }

        /**
         * @param inactivityTime The session inactivity time. Use values such as &#34;15 minutes&#34;, &#34;1 hour&#34;, etc. The minimum value is &#34;10 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder inactivityTime(String inactivityTime) {
            return inactivityTime(Output.of(inactivityTime));
        }

        /**
         * @param refreshTokenCookieDomain The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenCookieDomain(@Nullable Output<String> refreshTokenCookieDomain) {
            $.refreshTokenCookieDomain = refreshTokenCookieDomain;
            return this;
        }

        /**
         * @param refreshTokenCookieDomain The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenCookieDomain(String refreshTokenCookieDomain) {
            return refreshTokenCookieDomain(Output.of(refreshTokenCookieDomain));
        }

        /**
         * @param refreshTokenCookiePolicy Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenCookiePolicy(@Nullable Output<String> refreshTokenCookiePolicy) {
            $.refreshTokenCookiePolicy = refreshTokenCookiePolicy;
            return this;
        }

        /**
         * @param refreshTokenCookiePolicy Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenCookiePolicy(String refreshTokenCookiePolicy) {
            return refreshTokenCookiePolicy(Output.of(refreshTokenCookiePolicy));
        }

        /**
         * @param refreshTokenExpiration The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenExpiration(@Nullable Output<String> refreshTokenExpiration) {
            $.refreshTokenExpiration = refreshTokenExpiration;
            return this;
        }

        /**
         * @param refreshTokenExpiration The expiry time for the refresh token, after which the user must log in again. Use values such as &#34;4 weeks&#34;, &#34;14 days&#34;, etc. The minimum value is &#34;3 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenExpiration(String refreshTokenExpiration) {
            return refreshTokenExpiration(Output.of(refreshTokenExpiration));
        }

        /**
         * @param refreshTokenResponseMethod Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenResponseMethod(@Nullable Output<String> refreshTokenResponseMethod) {
            $.refreshTokenResponseMethod = refreshTokenResponseMethod;
            return this;
        }

        /**
         * @param refreshTokenResponseMethod Configure how refresh tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenResponseMethod(String refreshTokenResponseMethod) {
            return refreshTokenResponseMethod(Output.of(refreshTokenResponseMethod));
        }

        /**
         * @param refreshTokenRotation Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenRotation(@Nullable Output<Boolean> refreshTokenRotation) {
            $.refreshTokenRotation = refreshTokenRotation;
            return this;
        }

        /**
         * @param refreshTokenRotation Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
         * 
         * @return builder
         * 
         */
        public Builder refreshTokenRotation(Boolean refreshTokenRotation) {
            return refreshTokenRotation(Output.of(refreshTokenRotation));
        }

        /**
         * @param sessionMigration Configure seamless migration of existing user sessions from another vendor to Descope.
         * 
         * @return builder
         * 
         */
        public Builder sessionMigration(@Nullable Output<ProjectProjectSettingsSessionMigrationArgs> sessionMigration) {
            $.sessionMigration = sessionMigration;
            return this;
        }

        /**
         * @param sessionMigration Configure seamless migration of existing user sessions from another vendor to Descope.
         * 
         * @return builder
         * 
         */
        public Builder sessionMigration(ProjectProjectSettingsSessionMigrationArgs sessionMigration) {
            return sessionMigration(Output.of(sessionMigration));
        }

        /**
         * @param sessionTokenCookieDomain The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenCookieDomain(@Nullable Output<String> sessionTokenCookieDomain) {
            $.sessionTokenCookieDomain = sessionTokenCookieDomain;
            return this;
        }

        /**
         * @param sessionTokenCookieDomain The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenCookieDomain(String sessionTokenCookieDomain) {
            return sessionTokenCookieDomain(Output.of(sessionTokenCookieDomain));
        }

        /**
         * @param sessionTokenCookiePolicy Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenCookiePolicy(@Nullable Output<String> sessionTokenCookiePolicy) {
            $.sessionTokenCookiePolicy = sessionTokenCookiePolicy;
            return this;
        }

        /**
         * @param sessionTokenCookiePolicy Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenCookiePolicy(String sessionTokenCookiePolicy) {
            return sessionTokenCookiePolicy(Output.of(sessionTokenCookiePolicy));
        }

        /**
         * @param sessionTokenExpiration The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenExpiration(@Nullable Output<String> sessionTokenExpiration) {
            $.sessionTokenExpiration = sessionTokenExpiration;
            return this;
        }

        /**
         * @param sessionTokenExpiration The expiry time of the session token, used for accessing the application&#39;s resources. The value needs to be at least 3 minutes and can&#39;t be longer than the refresh token expiration.
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenExpiration(String sessionTokenExpiration) {
            return sessionTokenExpiration(Output.of(sessionTokenExpiration));
        }

        /**
         * @param sessionTokenResponseMethod Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenResponseMethod(@Nullable Output<String> sessionTokenResponseMethod) {
            $.sessionTokenResponseMethod = sessionTokenResponseMethod;
            return this;
        }

        /**
         * @param sessionTokenResponseMethod Configure how sessions tokens are managed by the Descope SDKs. Must be either `response_body` or `cookies`. The default value is `response_body`.
         * 
         * @return builder
         * 
         */
        public Builder sessionTokenResponseMethod(String sessionTokenResponseMethod) {
            return sessionTokenResponseMethod(Output.of(sessionTokenResponseMethod));
        }

        /**
         * @param stepUpTokenExpiration The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
         * 
         * @return builder
         * 
         */
        public Builder stepUpTokenExpiration(@Nullable Output<String> stepUpTokenExpiration) {
            $.stepUpTokenExpiration = stepUpTokenExpiration;
            return this;
        }

        /**
         * @param stepUpTokenExpiration The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
         * 
         * @return builder
         * 
         */
        public Builder stepUpTokenExpiration(String stepUpTokenExpiration) {
            return stepUpTokenExpiration(Output.of(stepUpTokenExpiration));
        }

        /**
         * @param testUsersLoginidRegexp Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
         * 
         * @return builder
         * 
         */
        public Builder testUsersLoginidRegexp(@Nullable Output<String> testUsersLoginidRegexp) {
            $.testUsersLoginidRegexp = testUsersLoginidRegexp;
            return this;
        }

        /**
         * @param testUsersLoginidRegexp Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
         * 
         * @return builder
         * 
         */
        public Builder testUsersLoginidRegexp(String testUsersLoginidRegexp) {
            return testUsersLoginidRegexp(Output.of(testUsersLoginidRegexp));
        }

        /**
         * @param testUsersStaticOtp A 6 digit static OTP code for use with test users.
         * 
         * @return builder
         * 
         */
        public Builder testUsersStaticOtp(@Nullable Output<String> testUsersStaticOtp) {
            $.testUsersStaticOtp = testUsersStaticOtp;
            return this;
        }

        /**
         * @param testUsersStaticOtp A 6 digit static OTP code for use with test users.
         * 
         * @return builder
         * 
         */
        public Builder testUsersStaticOtp(String testUsersStaticOtp) {
            return testUsersStaticOtp(Output.of(testUsersStaticOtp));
        }

        /**
         * @param testUsersVerifierRegexp The pattern of the verifiers that will be used for testing.
         * 
         * @return builder
         * 
         */
        public Builder testUsersVerifierRegexp(@Nullable Output<String> testUsersVerifierRegexp) {
            $.testUsersVerifierRegexp = testUsersVerifierRegexp;
            return this;
        }

        /**
         * @param testUsersVerifierRegexp The pattern of the verifiers that will be used for testing.
         * 
         * @return builder
         * 
         */
        public Builder testUsersVerifierRegexp(String testUsersVerifierRegexp) {
            return testUsersVerifierRegexp(Output.of(testUsersVerifierRegexp));
        }

        /**
         * @param trustedDeviceTokenExpiration The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trustedDeviceTokenExpiration(@Nullable Output<String> trustedDeviceTokenExpiration) {
            $.trustedDeviceTokenExpiration = trustedDeviceTokenExpiration;
            return this;
        }

        /**
         * @param trustedDeviceTokenExpiration The expiry time for the trusted device token. The minimum value is &#34;3 minutes&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trustedDeviceTokenExpiration(String trustedDeviceTokenExpiration) {
            return trustedDeviceTokenExpiration(Output.of(trustedDeviceTokenExpiration));
        }

        /**
         * @param userJwtTemplate Name of the user JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder userJwtTemplate(@Nullable Output<String> userJwtTemplate) {
            $.userJwtTemplate = userJwtTemplate;
            return this;
        }

        /**
         * @param userJwtTemplate Name of the user JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder userJwtTemplate(String userJwtTemplate) {
            return userJwtTemplate(Output.of(userJwtTemplate));
        }

        public ProjectProjectSettingsArgs build() {
            return $;
        }
    }

}
