// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsEightByEightWhatsapp {
    /**
     * @return The 8x8 API key for authentication.
     * 
     */
    private String apiKey;
    /**
     * @return The country code or region where your Viber messaging service is configured.
     * 
     */
    private @Nullable String country;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return The 8x8 sub-account ID is required for the Messaging API.
     * 
     */
    private String subAccountId;
    /**
     * @return The ID of a WhatsApp message template.
     * 
     */
    private String templateId;
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    private @Nullable Boolean useStaticIps;

    private ProjectConnectorsEightByEightWhatsapp() {}
    /**
     * @return The 8x8 API key for authentication.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    /**
     * @return The country code or region where your Viber messaging service is configured.
     * 
     */
    public Optional<String> country() {
        return Optional.ofNullable(this.country);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The 8x8 sub-account ID is required for the Messaging API.
     * 
     */
    public String subAccountId() {
        return this.subAccountId;
    }
    /**
     * @return The ID of a WhatsApp message template.
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Boolean> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsEightByEightWhatsapp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private @Nullable String country;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private String subAccountId;
        private String templateId;
        private @Nullable Boolean useStaticIps;
        public Builder() {}
        public Builder(ProjectConnectorsEightByEightWhatsapp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.country = defaults.country;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.subAccountId = defaults.subAccountId;
    	      this.templateId = defaults.templateId;
    	      this.useStaticIps = defaults.useStaticIps;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsEightByEightWhatsapp", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder country(@Nullable String country) {

            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsEightByEightWhatsapp", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder subAccountId(String subAccountId) {
            if (subAccountId == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsEightByEightWhatsapp", "subAccountId");
            }
            this.subAccountId = subAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsEightByEightWhatsapp", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder useStaticIps(@Nullable Boolean useStaticIps) {

            this.useStaticIps = useStaticIps;
            return this;
        }
        public ProjectConnectorsEightByEightWhatsapp build() {
            final var _resultValue = new ProjectConnectorsEightByEightWhatsapp();
            _resultValue.apiKey = apiKey;
            _resultValue.country = country;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.subAccountId = subAccountId;
            _resultValue.templateId = templateId;
            _resultValue.useStaticIps = useStaticIps;
            return _resultValue;
        }
    }
}
