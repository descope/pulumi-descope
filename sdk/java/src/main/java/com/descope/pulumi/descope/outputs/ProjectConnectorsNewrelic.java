// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectConnectorsNewrelicAuditFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsNewrelic {
    /**
     * @return Ingest License Key of the account you want to report data to.
     * 
     */
    private String apiKey;
    private @Nullable Boolean auditEnabled;
    private @Nullable List<ProjectConnectorsNewrelicAuditFilter> auditFilters;
    /**
     * @return The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
     * 
     */
    private @Nullable String dataCenter;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return Specify a custom prefix for all log fields. The default prefix is `descope.`.
     * 
     */
    private @Nullable String logsPrefix;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return Enable this option to use a custom prefix for log fields.
     * 
     */
    private @Nullable Boolean overrideLogsPrefix;
    private @Nullable Boolean troubleshootLogEnabled;

    private ProjectConnectorsNewrelic() {}
    /**
     * @return Ingest License Key of the account you want to report data to.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    public Optional<Boolean> auditEnabled() {
        return Optional.ofNullable(this.auditEnabled);
    }
    public List<ProjectConnectorsNewrelicAuditFilter> auditFilters() {
        return this.auditFilters == null ? List.of() : this.auditFilters;
    }
    /**
     * @return The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
     * 
     */
    public Optional<String> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specify a custom prefix for all log fields. The default prefix is `descope.`.
     * 
     */
    public Optional<String> logsPrefix() {
        return Optional.ofNullable(this.logsPrefix);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable this option to use a custom prefix for log fields.
     * 
     */
    public Optional<Boolean> overrideLogsPrefix() {
        return Optional.ofNullable(this.overrideLogsPrefix);
    }
    public Optional<Boolean> troubleshootLogEnabled() {
        return Optional.ofNullable(this.troubleshootLogEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsNewrelic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private @Nullable Boolean auditEnabled;
        private @Nullable List<ProjectConnectorsNewrelicAuditFilter> auditFilters;
        private @Nullable String dataCenter;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable String logsPrefix;
        private String name;
        private @Nullable Boolean overrideLogsPrefix;
        private @Nullable Boolean troubleshootLogEnabled;
        public Builder() {}
        public Builder(ProjectConnectorsNewrelic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.auditEnabled = defaults.auditEnabled;
    	      this.auditFilters = defaults.auditFilters;
    	      this.dataCenter = defaults.dataCenter;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.logsPrefix = defaults.logsPrefix;
    	      this.name = defaults.name;
    	      this.overrideLogsPrefix = defaults.overrideLogsPrefix;
    	      this.troubleshootLogEnabled = defaults.troubleshootLogEnabled;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsNewrelic", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder auditEnabled(@Nullable Boolean auditEnabled) {

            this.auditEnabled = auditEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder auditFilters(@Nullable List<ProjectConnectorsNewrelicAuditFilter> auditFilters) {

            this.auditFilters = auditFilters;
            return this;
        }
        public Builder auditFilters(ProjectConnectorsNewrelicAuditFilter... auditFilters) {
            return auditFilters(List.of(auditFilters));
        }
        @CustomType.Setter
        public Builder dataCenter(@Nullable String dataCenter) {

            this.dataCenter = dataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logsPrefix(@Nullable String logsPrefix) {

            this.logsPrefix = logsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsNewrelic", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder overrideLogsPrefix(@Nullable Boolean overrideLogsPrefix) {

            this.overrideLogsPrefix = overrideLogsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder troubleshootLogEnabled(@Nullable Boolean troubleshootLogEnabled) {

            this.troubleshootLogEnabled = troubleshootLogEnabled;
            return this;
        }
        public ProjectConnectorsNewrelic build() {
            final var _resultValue = new ProjectConnectorsNewrelic();
            _resultValue.apiKey = apiKey;
            _resultValue.auditEnabled = auditEnabled;
            _resultValue.auditFilters = auditFilters;
            _resultValue.dataCenter = dataCenter;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.logsPrefix = logsPrefix;
            _resultValue.name = name;
            _resultValue.overrideLogsPrefix = overrideLogsPrefix;
            _resultValue.troubleshootLogEnabled = troubleshootLogEnabled;
            return _resultValue;
        }
    }
}
