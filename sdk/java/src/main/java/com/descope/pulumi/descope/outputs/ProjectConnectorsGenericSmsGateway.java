// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectConnectorsGenericSmsGatewayAuthentication;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsGenericSmsGateway {
    /**
     * @return Authentication Information
     * 
     */
    private @Nullable ProjectConnectorsGenericSmsGatewayAuthentication authentication;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    /**
     * @return The headers to send with the request
     * 
     */
    private @Nullable Map<String,String> headers;
    /**
     * @return HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
     * 
     */
    private @Nullable String hmacSecret;
    private @Nullable String id;
    /**
     * @return Will ignore certificate errors raised by the client
     * 
     */
    private @Nullable Boolean insecure;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return The URL of the post message request
     * 
     */
    private String postUrl;
    /**
     * @return The sender number
     * 
     */
    private @Nullable String sender;
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    private @Nullable Boolean useStaticIps;

    private ProjectConnectorsGenericSmsGateway() {}
    /**
     * @return Authentication Information
     * 
     */
    public Optional<ProjectConnectorsGenericSmsGatewayAuthentication> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The headers to send with the request
     * 
     */
    public Map<String,String> headers() {
        return this.headers == null ? Map.of() : this.headers;
    }
    /**
     * @return HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
     * 
     */
    public Optional<String> hmacSecret() {
        return Optional.ofNullable(this.hmacSecret);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Will ignore certificate errors raised by the client
     * 
     */
    public Optional<Boolean> insecure() {
        return Optional.ofNullable(this.insecure);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL of the post message request
     * 
     */
    public String postUrl() {
        return this.postUrl;
    }
    /**
     * @return The sender number
     * 
     */
    public Optional<String> sender() {
        return Optional.ofNullable(this.sender);
    }
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Boolean> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsGenericSmsGateway defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ProjectConnectorsGenericSmsGatewayAuthentication authentication;
        private @Nullable String description;
        private @Nullable Map<String,String> headers;
        private @Nullable String hmacSecret;
        private @Nullable String id;
        private @Nullable Boolean insecure;
        private String name;
        private String postUrl;
        private @Nullable String sender;
        private @Nullable Boolean useStaticIps;
        public Builder() {}
        public Builder(ProjectConnectorsGenericSmsGateway defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.description = defaults.description;
    	      this.headers = defaults.headers;
    	      this.hmacSecret = defaults.hmacSecret;
    	      this.id = defaults.id;
    	      this.insecure = defaults.insecure;
    	      this.name = defaults.name;
    	      this.postUrl = defaults.postUrl;
    	      this.sender = defaults.sender;
    	      this.useStaticIps = defaults.useStaticIps;
        }

        @CustomType.Setter
        public Builder authentication(@Nullable ProjectConnectorsGenericSmsGatewayAuthentication authentication) {

            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable Map<String,String> headers) {

            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder hmacSecret(@Nullable String hmacSecret) {

            this.hmacSecret = hmacSecret;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder insecure(@Nullable Boolean insecure) {

            this.insecure = insecure;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsGenericSmsGateway", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder postUrl(String postUrl) {
            if (postUrl == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsGenericSmsGateway", "postUrl");
            }
            this.postUrl = postUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sender(@Nullable String sender) {

            this.sender = sender;
            return this;
        }
        @CustomType.Setter
        public Builder useStaticIps(@Nullable Boolean useStaticIps) {

            this.useStaticIps = useStaticIps;
            return this;
        }
        public ProjectConnectorsGenericSmsGateway build() {
            final var _resultValue = new ProjectConnectorsGenericSmsGateway();
            _resultValue.authentication = authentication;
            _resultValue.description = description;
            _resultValue.headers = headers;
            _resultValue.hmacSecret = hmacSecret;
            _resultValue.id = id;
            _resultValue.insecure = insecure;
            _resultValue.name = name;
            _resultValue.postUrl = postUrl;
            _resultValue.sender = sender;
            _resultValue.useStaticIps = useStaticIps;
            return _resultValue;
        }
    }
}
