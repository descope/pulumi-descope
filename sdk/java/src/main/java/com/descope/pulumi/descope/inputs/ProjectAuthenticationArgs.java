// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectAuthenticationEmbeddedLinkArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationEnchantedLinkArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationMagicLinkArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationOtpArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationPasskeysArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationPasswordArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationSsoArgs;
import com.descope.pulumi.descope.inputs.ProjectAuthenticationTotpArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthenticationArgs Empty = new ProjectAuthenticationArgs();

    /**
     * Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
     * 
     */
    @Import(name="embeddedLink")
    private @Nullable Output<ProjectAuthenticationEmbeddedLinkArgs> embeddedLink;

    /**
     * @return Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
     * 
     */
    public Optional<Output<ProjectAuthenticationEmbeddedLinkArgs>> embeddedLink() {
        return Optional.ofNullable(this.embeddedLink);
    }

    /**
     * An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
     * 
     */
    @Import(name="enchantedLink")
    private @Nullable Output<ProjectAuthenticationEnchantedLinkArgs> enchantedLink;

    /**
     * @return An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
     * 
     */
    public Optional<Output<ProjectAuthenticationEnchantedLinkArgs>> enchantedLink() {
        return Optional.ofNullable(this.enchantedLink);
    }

    /**
     * An authentication method where a user receives a unique link via email to log in.
     * 
     */
    @Import(name="magicLink")
    private @Nullable Output<ProjectAuthenticationMagicLinkArgs> magicLink;

    /**
     * @return An authentication method where a user receives a unique link via email to log in.
     * 
     */
    public Optional<Output<ProjectAuthenticationMagicLinkArgs>> magicLink() {
        return Optional.ofNullable(this.magicLink);
    }

    /**
     * Authentication using Open Authorization, which allows users to authenticate with various external services.
     * 
     */
    @Import(name="oauth")
    private @Nullable Output<ProjectAuthenticationOauthArgs> oauth;

    /**
     * @return Authentication using Open Authorization, which allows users to authenticate with various external services.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthArgs>> oauth() {
        return Optional.ofNullable(this.oauth);
    }

    /**
     * A dynamically generated set of numbers, granting the user one-time access.
     * 
     */
    @Import(name="otp")
    private @Nullable Output<ProjectAuthenticationOtpArgs> otp;

    /**
     * @return A dynamically generated set of numbers, granting the user one-time access.
     * 
     */
    public Optional<Output<ProjectAuthenticationOtpArgs>> otp() {
        return Optional.ofNullable(this.otp);
    }

    /**
     * Device-based passwordless authentication, using fingerprint, face scan, and more.
     * 
     */
    @Import(name="passkeys")
    private @Nullable Output<ProjectAuthenticationPasskeysArgs> passkeys;

    /**
     * @return Device-based passwordless authentication, using fingerprint, face scan, and more.
     * 
     */
    public Optional<Output<ProjectAuthenticationPasskeysArgs>> passkeys() {
        return Optional.ofNullable(this.passkeys);
    }

    /**
     * The classic username and password combination used for authentication.
     * 
     */
    @Import(name="password")
    private @Nullable Output<ProjectAuthenticationPasswordArgs> password;

    /**
     * @return The classic username and password combination used for authentication.
     * 
     */
    public Optional<Output<ProjectAuthenticationPasswordArgs>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
     * 
     */
    @Import(name="sso")
    private @Nullable Output<ProjectAuthenticationSsoArgs> sso;

    /**
     * @return Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
     * 
     */
    public Optional<Output<ProjectAuthenticationSsoArgs>> sso() {
        return Optional.ofNullable(this.sso);
    }

    /**
     * A one-time code generated for the user using a shared secret and time.
     * 
     */
    @Import(name="totp")
    private @Nullable Output<ProjectAuthenticationTotpArgs> totp;

    /**
     * @return A one-time code generated for the user using a shared secret and time.
     * 
     */
    public Optional<Output<ProjectAuthenticationTotpArgs>> totp() {
        return Optional.ofNullable(this.totp);
    }

    private ProjectAuthenticationArgs() {}

    private ProjectAuthenticationArgs(ProjectAuthenticationArgs $) {
        this.embeddedLink = $.embeddedLink;
        this.enchantedLink = $.enchantedLink;
        this.magicLink = $.magicLink;
        this.oauth = $.oauth;
        this.otp = $.otp;
        this.passkeys = $.passkeys;
        this.password = $.password;
        this.sso = $.sso;
        this.totp = $.totp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthenticationArgs $;

        public Builder() {
            $ = new ProjectAuthenticationArgs();
        }

        public Builder(ProjectAuthenticationArgs defaults) {
            $ = new ProjectAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param embeddedLink Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
         * 
         * @return builder
         * 
         */
        public Builder embeddedLink(@Nullable Output<ProjectAuthenticationEmbeddedLinkArgs> embeddedLink) {
            $.embeddedLink = embeddedLink;
            return this;
        }

        /**
         * @param embeddedLink Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
         * 
         * @return builder
         * 
         */
        public Builder embeddedLink(ProjectAuthenticationEmbeddedLinkArgs embeddedLink) {
            return embeddedLink(Output.of(embeddedLink));
        }

        /**
         * @param enchantedLink An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
         * 
         * @return builder
         * 
         */
        public Builder enchantedLink(@Nullable Output<ProjectAuthenticationEnchantedLinkArgs> enchantedLink) {
            $.enchantedLink = enchantedLink;
            return this;
        }

        /**
         * @param enchantedLink An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
         * 
         * @return builder
         * 
         */
        public Builder enchantedLink(ProjectAuthenticationEnchantedLinkArgs enchantedLink) {
            return enchantedLink(Output.of(enchantedLink));
        }

        /**
         * @param magicLink An authentication method where a user receives a unique link via email to log in.
         * 
         * @return builder
         * 
         */
        public Builder magicLink(@Nullable Output<ProjectAuthenticationMagicLinkArgs> magicLink) {
            $.magicLink = magicLink;
            return this;
        }

        /**
         * @param magicLink An authentication method where a user receives a unique link via email to log in.
         * 
         * @return builder
         * 
         */
        public Builder magicLink(ProjectAuthenticationMagicLinkArgs magicLink) {
            return magicLink(Output.of(magicLink));
        }

        /**
         * @param oauth Authentication using Open Authorization, which allows users to authenticate with various external services.
         * 
         * @return builder
         * 
         */
        public Builder oauth(@Nullable Output<ProjectAuthenticationOauthArgs> oauth) {
            $.oauth = oauth;
            return this;
        }

        /**
         * @param oauth Authentication using Open Authorization, which allows users to authenticate with various external services.
         * 
         * @return builder
         * 
         */
        public Builder oauth(ProjectAuthenticationOauthArgs oauth) {
            return oauth(Output.of(oauth));
        }

        /**
         * @param otp A dynamically generated set of numbers, granting the user one-time access.
         * 
         * @return builder
         * 
         */
        public Builder otp(@Nullable Output<ProjectAuthenticationOtpArgs> otp) {
            $.otp = otp;
            return this;
        }

        /**
         * @param otp A dynamically generated set of numbers, granting the user one-time access.
         * 
         * @return builder
         * 
         */
        public Builder otp(ProjectAuthenticationOtpArgs otp) {
            return otp(Output.of(otp));
        }

        /**
         * @param passkeys Device-based passwordless authentication, using fingerprint, face scan, and more.
         * 
         * @return builder
         * 
         */
        public Builder passkeys(@Nullable Output<ProjectAuthenticationPasskeysArgs> passkeys) {
            $.passkeys = passkeys;
            return this;
        }

        /**
         * @param passkeys Device-based passwordless authentication, using fingerprint, face scan, and more.
         * 
         * @return builder
         * 
         */
        public Builder passkeys(ProjectAuthenticationPasskeysArgs passkeys) {
            return passkeys(Output.of(passkeys));
        }

        /**
         * @param password The classic username and password combination used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<ProjectAuthenticationPasswordArgs> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The classic username and password combination used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(ProjectAuthenticationPasswordArgs password) {
            return password(Output.of(password));
        }

        /**
         * @param sso Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
         * 
         * @return builder
         * 
         */
        public Builder sso(@Nullable Output<ProjectAuthenticationSsoArgs> sso) {
            $.sso = sso;
            return this;
        }

        /**
         * @param sso Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
         * 
         * @return builder
         * 
         */
        public Builder sso(ProjectAuthenticationSsoArgs sso) {
            return sso(Output.of(sso));
        }

        /**
         * @param totp A one-time code generated for the user using a shared secret and time.
         * 
         * @return builder
         * 
         */
        public Builder totp(@Nullable Output<ProjectAuthenticationTotpArgs> totp) {
            $.totp = totp;
            return this;
        }

        /**
         * @param totp A one-time code generated for the user using a shared secret and time.
         * 
         * @return builder
         * 
         */
        public Builder totp(ProjectAuthenticationTotpArgs totp) {
            return totp(Output.of(totp));
        }

        public ProjectAuthenticationArgs build() {
            return $;
        }
    }

}
