// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectAttributesUserWidgetAuthorization;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectAttributesUser {
    /**
     * @return An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the attribute. This value is called `Display Name` in the Descope console.
     * 
     */
    private String name;
    /**
     * @return When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
     * 
     */
    private @Nullable List<String> selectOptions;
    /**
     * @return The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
     * 
     */
    private String type;
    /**
     * @return Determines the permissions users are required to have to access this attribute in the user management widget.
     * 
     */
    private @Nullable ProjectAttributesUserWidgetAuthorization widgetAuthorization;

    private ProjectAttributesUser() {}
    /**
     * @return An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the attribute. This value is called `Display Name` in the Descope console.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
     * 
     */
    public List<String> selectOptions() {
        return this.selectOptions == null ? List.of() : this.selectOptions;
    }
    /**
     * @return The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Determines the permissions users are required to have to access this attribute in the user management widget.
     * 
     */
    public Optional<ProjectAttributesUserWidgetAuthorization> widgetAuthorization() {
        return Optional.ofNullable(this.widgetAuthorization);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectAttributesUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private String name;
        private @Nullable List<String> selectOptions;
        private String type;
        private @Nullable ProjectAttributesUserWidgetAuthorization widgetAuthorization;
        public Builder() {}
        public Builder(ProjectAttributesUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.selectOptions = defaults.selectOptions;
    	      this.type = defaults.type;
    	      this.widgetAuthorization = defaults.widgetAuthorization;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectAttributesUser", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder selectOptions(@Nullable List<String> selectOptions) {

            this.selectOptions = selectOptions;
            return this;
        }
        public Builder selectOptions(String... selectOptions) {
            return selectOptions(List.of(selectOptions));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("ProjectAttributesUser", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder widgetAuthorization(@Nullable ProjectAttributesUserWidgetAuthorization widgetAuthorization) {

            this.widgetAuthorization = widgetAuthorization;
            return this;
        }
        public ProjectAttributesUser build() {
            final var _resultValue = new ProjectAttributesUser();
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.selectOptions = selectOptions;
            _resultValue.type = type;
            _resultValue.widgetAuthorization = widgetAuthorization;
            return _resultValue;
        }
    }
}
