// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsLokalise {
    /**
     * @return Lokalise API token.
     * 
     */
    private String apiToken;
    /**
     * @return (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
     * 
     */
    private @Nullable String cardId;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return Lokalise project ID.
     * 
     */
    private String projectId;
    /**
     * @return Lokalise team ID. If not provided, the oldest available team will be used.
     * 
     */
    private @Nullable String teamId;
    /**
     * @return The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
     * 
     */
    private @Nullable String translationProvider;

    private ProjectConnectorsLokalise() {}
    /**
     * @return Lokalise API token.
     * 
     */
    public String apiToken() {
        return this.apiToken;
    }
    /**
     * @return (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
     * 
     */
    public Optional<String> cardId() {
        return Optional.ofNullable(this.cardId);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Lokalise project ID.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Lokalise team ID. If not provided, the oldest available team will be used.
     * 
     */
    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }
    /**
     * @return The translation provider to use (&#39;gengo&#39;, &#39;google&#39;, &#39;lokalise&#39;, &#39;deepl&#39;), default is &#39;deepl&#39;.
     * 
     */
    public Optional<String> translationProvider() {
        return Optional.ofNullable(this.translationProvider);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsLokalise defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiToken;
        private @Nullable String cardId;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private String projectId;
        private @Nullable String teamId;
        private @Nullable String translationProvider;
        public Builder() {}
        public Builder(ProjectConnectorsLokalise defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiToken = defaults.apiToken;
    	      this.cardId = defaults.cardId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.teamId = defaults.teamId;
    	      this.translationProvider = defaults.translationProvider;
        }

        @CustomType.Setter
        public Builder apiToken(String apiToken) {
            if (apiToken == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsLokalise", "apiToken");
            }
            this.apiToken = apiToken;
            return this;
        }
        @CustomType.Setter
        public Builder cardId(@Nullable String cardId) {

            this.cardId = cardId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsLokalise", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsLokalise", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(@Nullable String teamId) {

            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder translationProvider(@Nullable String translationProvider) {

            this.translationProvider = translationProvider;
            return this;
        }
        public ProjectConnectorsLokalise build() {
            final var _resultValue = new ProjectConnectorsLokalise();
            _resultValue.apiToken = apiToken;
            _resultValue.cardId = cardId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.teamId = teamId;
            _resultValue.translationProvider = translationProvider;
            return _resultValue;
        }
    }
}
