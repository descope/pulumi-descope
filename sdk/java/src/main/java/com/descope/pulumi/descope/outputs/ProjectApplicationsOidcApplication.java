// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectApplicationsOidcApplication {
    /**
     * @return A list of supported claims. e.g. `sub`, `email`, `exp`.
     * 
     */
    private @Nullable List<String> claims;
    /**
     * @return A description for the OIDC application.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether the application should be enabled or disabled.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP&#39;s request.
     * 
     */
    private @Nullable Boolean forceAuthentication;
    /**
     * @return An optional identifier for the OIDC application.
     * 
     */
    private @Nullable String id;
    /**
     * @return The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     * 
     */
    private @Nullable String loginPageUrl;
    /**
     * @return A logo for the OIDC application. Should be a hosted image URL.
     * 
     */
    private @Nullable String logo;
    /**
     * @return A name for the OIDC application.
     * 
     */
    private String name;

    private ProjectApplicationsOidcApplication() {}
    /**
     * @return A list of supported claims. e.g. `sub`, `email`, `exp`.
     * 
     */
    public List<String> claims() {
        return this.claims == null ? List.of() : this.claims;
    }
    /**
     * @return A description for the OIDC application.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether the application should be enabled or disabled.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP&#39;s request.
     * 
     */
    public Optional<Boolean> forceAuthentication() {
        return Optional.ofNullable(this.forceAuthentication);
    }
    /**
     * @return An optional identifier for the OIDC application.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
     * 
     */
    public Optional<String> loginPageUrl() {
        return Optional.ofNullable(this.loginPageUrl);
    }
    /**
     * @return A logo for the OIDC application. Should be a hosted image URL.
     * 
     */
    public Optional<String> logo() {
        return Optional.ofNullable(this.logo);
    }
    /**
     * @return A name for the OIDC application.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectApplicationsOidcApplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> claims;
        private @Nullable String description;
        private @Nullable Boolean disabled;
        private @Nullable Boolean forceAuthentication;
        private @Nullable String id;
        private @Nullable String loginPageUrl;
        private @Nullable String logo;
        private String name;
        public Builder() {}
        public Builder(ProjectApplicationsOidcApplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.claims = defaults.claims;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.forceAuthentication = defaults.forceAuthentication;
    	      this.id = defaults.id;
    	      this.loginPageUrl = defaults.loginPageUrl;
    	      this.logo = defaults.logo;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder claims(@Nullable List<String> claims) {

            this.claims = claims;
            return this;
        }
        public Builder claims(String... claims) {
            return claims(List.of(claims));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder forceAuthentication(@Nullable Boolean forceAuthentication) {

            this.forceAuthentication = forceAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loginPageUrl(@Nullable String loginPageUrl) {

            this.loginPageUrl = loginPageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder logo(@Nullable String logo) {

            this.logo = logo;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectApplicationsOidcApplication", "name");
            }
            this.name = name;
            return this;
        }
        public ProjectApplicationsOidcApplication build() {
            final var _resultValue = new ProjectApplicationsOidcApplication();
            _resultValue.claims = claims;
            _resultValue.description = description;
            _resultValue.disabled = disabled;
            _resultValue.forceAuthentication = forceAuthentication;
            _resultValue.id = id;
            _resultValue.loginPageUrl = loginPageUrl;
            _resultValue.logo = logo;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
