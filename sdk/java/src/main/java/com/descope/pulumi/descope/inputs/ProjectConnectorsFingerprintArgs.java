// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsFingerprintArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsFingerprintArgs Empty = new ProjectConnectorsFingerprintArgs();

    /**
     * The Cloudflare integration Endpoint URL.
     * 
     */
    @Import(name="cloudflareEndpointUrl")
    private @Nullable Output<String> cloudflareEndpointUrl;

    /**
     * @return The Cloudflare integration Endpoint URL.
     * 
     */
    public Optional<Output<String>> cloudflareEndpointUrl() {
        return Optional.ofNullable(this.cloudflareEndpointUrl);
    }

    /**
     * The Cloudflare integration Script URL.
     * 
     */
    @Import(name="cloudflareScriptUrl")
    private @Nullable Output<String> cloudflareScriptUrl;

    /**
     * @return The Cloudflare integration Script URL.
     * 
     */
    public Optional<Output<String>> cloudflareScriptUrl() {
        return Optional.ofNullable(this.cloudflareScriptUrl);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Fingerprint public API key.
     * 
     */
    @Import(name="publicApiKey", required=true)
    private Output<String> publicApiKey;

    /**
     * @return The Fingerprint public API key.
     * 
     */
    public Output<String> publicApiKey() {
        return this.publicApiKey;
    }

    /**
     * The Fingerprint secret API key.
     * 
     */
    @Import(name="secretApiKey", required=true)
    private Output<String> secretApiKey;

    /**
     * @return The Fingerprint secret API key.
     * 
     */
    public Output<String> secretApiKey() {
        return this.secretApiKey;
    }

    /**
     * Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
     * 
     */
    @Import(name="useCloudflareIntegration")
    private @Nullable Output<Boolean> useCloudflareIntegration;

    /**
     * @return Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
     * 
     */
    public Optional<Output<Boolean>> useCloudflareIntegration() {
        return Optional.ofNullable(this.useCloudflareIntegration);
    }

    private ProjectConnectorsFingerprintArgs() {}

    private ProjectConnectorsFingerprintArgs(ProjectConnectorsFingerprintArgs $) {
        this.cloudflareEndpointUrl = $.cloudflareEndpointUrl;
        this.cloudflareScriptUrl = $.cloudflareScriptUrl;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.publicApiKey = $.publicApiKey;
        this.secretApiKey = $.secretApiKey;
        this.useCloudflareIntegration = $.useCloudflareIntegration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsFingerprintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsFingerprintArgs $;

        public Builder() {
            $ = new ProjectConnectorsFingerprintArgs();
        }

        public Builder(ProjectConnectorsFingerprintArgs defaults) {
            $ = new ProjectConnectorsFingerprintArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudflareEndpointUrl The Cloudflare integration Endpoint URL.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpointUrl(@Nullable Output<String> cloudflareEndpointUrl) {
            $.cloudflareEndpointUrl = cloudflareEndpointUrl;
            return this;
        }

        /**
         * @param cloudflareEndpointUrl The Cloudflare integration Endpoint URL.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpointUrl(String cloudflareEndpointUrl) {
            return cloudflareEndpointUrl(Output.of(cloudflareEndpointUrl));
        }

        /**
         * @param cloudflareScriptUrl The Cloudflare integration Script URL.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareScriptUrl(@Nullable Output<String> cloudflareScriptUrl) {
            $.cloudflareScriptUrl = cloudflareScriptUrl;
            return this;
        }

        /**
         * @param cloudflareScriptUrl The Cloudflare integration Script URL.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareScriptUrl(String cloudflareScriptUrl) {
            return cloudflareScriptUrl(Output.of(cloudflareScriptUrl));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicApiKey The Fingerprint public API key.
         * 
         * @return builder
         * 
         */
        public Builder publicApiKey(Output<String> publicApiKey) {
            $.publicApiKey = publicApiKey;
            return this;
        }

        /**
         * @param publicApiKey The Fingerprint public API key.
         * 
         * @return builder
         * 
         */
        public Builder publicApiKey(String publicApiKey) {
            return publicApiKey(Output.of(publicApiKey));
        }

        /**
         * @param secretApiKey The Fingerprint secret API key.
         * 
         * @return builder
         * 
         */
        public Builder secretApiKey(Output<String> secretApiKey) {
            $.secretApiKey = secretApiKey;
            return this;
        }

        /**
         * @param secretApiKey The Fingerprint secret API key.
         * 
         * @return builder
         * 
         */
        public Builder secretApiKey(String secretApiKey) {
            return secretApiKey(Output.of(secretApiKey));
        }

        /**
         * @param useCloudflareIntegration Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
         * 
         * @return builder
         * 
         */
        public Builder useCloudflareIntegration(@Nullable Output<Boolean> useCloudflareIntegration) {
            $.useCloudflareIntegration = useCloudflareIntegration;
            return this;
        }

        /**
         * @param useCloudflareIntegration Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
         * 
         * @return builder
         * 
         */
        public Builder useCloudflareIntegration(Boolean useCloudflareIntegration) {
            return useCloudflareIntegration(Output.of(useCloudflareIntegration));
        }

        public ProjectConnectorsFingerprintArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsFingerprintArgs", "name");
            }
            if ($.publicApiKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsFingerprintArgs", "publicApiKey");
            }
            if ($.secretApiKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsFingerprintArgs", "secretApiKey");
            }
            return $;
        }
    }

}
