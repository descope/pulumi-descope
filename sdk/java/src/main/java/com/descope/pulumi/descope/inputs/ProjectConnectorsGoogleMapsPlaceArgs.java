// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsGoogleMapsPlaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsGoogleMapsPlaceArgs Empty = new ProjectConnectorsGoogleMapsPlaceArgs();

    /**
     * The address types to return.
     * 
     */
    @Import(name="addressTypes")
    private @Nullable Output<String> addressTypes;

    /**
     * @return The address types to return.
     * 
     */
    public Optional<Output<String>> addressTypes() {
        return Optional.ofNullable(this.addressTypes);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The language in which to return results.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return The language in which to return results.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Google Maps Places public API key.
     * 
     */
    @Import(name="publicApiKey", required=true)
    private Output<String> publicApiKey;

    /**
     * @return The Google Maps Places public API key.
     * 
     */
    public Output<String> publicApiKey() {
        return this.publicApiKey;
    }

    /**
     * The region code, specified as a CLDR two-character region code.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region code, specified as a CLDR two-character region code.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private ProjectConnectorsGoogleMapsPlaceArgs() {}

    private ProjectConnectorsGoogleMapsPlaceArgs(ProjectConnectorsGoogleMapsPlaceArgs $) {
        this.addressTypes = $.addressTypes;
        this.description = $.description;
        this.id = $.id;
        this.language = $.language;
        this.name = $.name;
        this.publicApiKey = $.publicApiKey;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsGoogleMapsPlaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsGoogleMapsPlaceArgs $;

        public Builder() {
            $ = new ProjectConnectorsGoogleMapsPlaceArgs();
        }

        public Builder(ProjectConnectorsGoogleMapsPlaceArgs defaults) {
            $ = new ProjectConnectorsGoogleMapsPlaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressTypes The address types to return.
         * 
         * @return builder
         * 
         */
        public Builder addressTypes(@Nullable Output<String> addressTypes) {
            $.addressTypes = addressTypes;
            return this;
        }

        /**
         * @param addressTypes The address types to return.
         * 
         * @return builder
         * 
         */
        public Builder addressTypes(String addressTypes) {
            return addressTypes(Output.of(addressTypes));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param language The language in which to return results.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language The language in which to return results.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicApiKey The Google Maps Places public API key.
         * 
         * @return builder
         * 
         */
        public Builder publicApiKey(Output<String> publicApiKey) {
            $.publicApiKey = publicApiKey;
            return this;
        }

        /**
         * @param publicApiKey The Google Maps Places public API key.
         * 
         * @return builder
         * 
         */
        public Builder publicApiKey(String publicApiKey) {
            return publicApiKey(Output.of(publicApiKey));
        }

        /**
         * @param region The region code, specified as a CLDR two-character region code.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region code, specified as a CLDR two-character region code.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ProjectConnectorsGoogleMapsPlaceArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsGoogleMapsPlaceArgs", "name");
            }
            if ($.publicApiKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsGoogleMapsPlaceArgs", "publicApiKey");
            }
            return $;
        }
    }

}
