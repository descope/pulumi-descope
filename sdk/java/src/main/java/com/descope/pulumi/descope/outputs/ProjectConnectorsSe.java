// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectConnectorsSeSender;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsSe {
    /**
     * @return AWS Access key ID.
     * 
     */
    private @Nullable String accessKeyId;
    /**
     * @return The authentication type to use.
     * 
     */
    private @Nullable String authType;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    /**
     * @return An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return The external ID to use when assuming the role.
     * 
     */
    private @Nullable String externalId;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    private String region;
    /**
     * @return The Amazon Resource Name (ARN) of the role to assume.
     * 
     */
    private @Nullable String roleArn;
    /**
     * @return AWS Secret Access Key.
     * 
     */
    private @Nullable String secret;
    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    private ProjectConnectorsSeSender sender;

    private ProjectConnectorsSe() {}
    /**
     * @return AWS Access key ID.
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    /**
     * @return The authentication type to use.
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return An optional endpoint URL (hostname only or fully qualified URI).
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return The external ID to use when assuming the role.
     * 
     */
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return AWS region to send requests to (e.g. `us-west-2`).
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The Amazon Resource Name (ARN) of the role to assume.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }
    /**
     * @return AWS Secret Access Key.
     * 
     */
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }
    /**
     * @return The sender details that should be displayed in the email message.
     * 
     */
    public ProjectConnectorsSeSender sender() {
        return this.sender;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsSe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String authType;
        private @Nullable String description;
        private @Nullable String endpoint;
        private @Nullable String externalId;
        private @Nullable String id;
        private String name;
        private String region;
        private @Nullable String roleArn;
        private @Nullable String secret;
        private ProjectConnectorsSeSender sender;
        public Builder() {}
        public Builder(ProjectConnectorsSe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.authType = defaults.authType;
    	      this.description = defaults.description;
    	      this.endpoint = defaults.endpoint;
    	      this.externalId = defaults.externalId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.roleArn = defaults.roleArn;
    	      this.secret = defaults.secret;
    	      this.sender = defaults.sender;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {

            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder authType(@Nullable String authType) {

            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {

            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable String externalId) {

            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSe", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSe", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(@Nullable String roleArn) {

            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder secret(@Nullable String secret) {

            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder sender(ProjectConnectorsSeSender sender) {
            if (sender == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsSe", "sender");
            }
            this.sender = sender;
            return this;
        }
        public ProjectConnectorsSe build() {
            final var _resultValue = new ProjectConnectorsSe();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.authType = authType;
            _resultValue.description = description;
            _resultValue.endpoint = endpoint;
            _resultValue.externalId = externalId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.roleArn = roleArn;
            _resultValue.secret = secret;
            _resultValue.sender = sender;
            return _resultValue;
        }
    }
}
