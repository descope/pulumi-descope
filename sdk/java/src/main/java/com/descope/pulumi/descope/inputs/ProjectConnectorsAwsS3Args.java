// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectConnectorsAwsS3AuditFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsAwsS3Args extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsAwsS3Args Empty = new ProjectConnectorsAwsS3Args();

    /**
     * The unique AWS access key ID.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return The unique AWS access key ID.
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * Whether to enable streaming of audit events.
     * 
     */
    @Import(name="auditEnabled")
    private @Nullable Output<Boolean> auditEnabled;

    /**
     * @return Whether to enable streaming of audit events.
     * 
     */
    public Optional<Output<Boolean>> auditEnabled() {
        return Optional.ofNullable(this.auditEnabled);
    }

    /**
     * Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    @Import(name="auditFilters")
    private @Nullable Output<List<ProjectConnectorsAwsS3AuditFilterArgs>> auditFilters;

    /**
     * @return Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    public Optional<Output<List<ProjectConnectorsAwsS3AuditFilterArgs>>> auditFilters() {
        return Optional.ofNullable(this.auditFilters);
    }

    /**
     * The authentication type to use.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return The authentication type to use.
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * The AWS S3 bucket. This bucket should already exist for the connector to work.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The AWS S3 bucket. This bucket should already exist for the connector to work.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The external ID to use when assuming the role.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return The external ID to use when assuming the role.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The AWS S3 region, e.g. `us-east-1`.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The AWS S3 region, e.g. `us-east-1`.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The Amazon Resource Name (ARN) of the role to assume.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the role to assume.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The secret AWS access key.
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return The secret AWS access key.
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    /**
     * Whether to send troubleshooting events.
     * 
     */
    @Import(name="troubleshootLogEnabled")
    private @Nullable Output<Boolean> troubleshootLogEnabled;

    /**
     * @return Whether to send troubleshooting events.
     * 
     */
    public Optional<Output<Boolean>> troubleshootLogEnabled() {
        return Optional.ofNullable(this.troubleshootLogEnabled);
    }

    private ProjectConnectorsAwsS3Args() {}

    private ProjectConnectorsAwsS3Args(ProjectConnectorsAwsS3Args $) {
        this.accessKeyId = $.accessKeyId;
        this.auditEnabled = $.auditEnabled;
        this.auditFilters = $.auditFilters;
        this.authType = $.authType;
        this.bucket = $.bucket;
        this.description = $.description;
        this.externalId = $.externalId;
        this.id = $.id;
        this.name = $.name;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.secretAccessKey = $.secretAccessKey;
        this.troubleshootLogEnabled = $.troubleshootLogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsAwsS3Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsAwsS3Args $;

        public Builder() {
            $ = new ProjectConnectorsAwsS3Args();
        }

        public Builder(ProjectConnectorsAwsS3Args defaults) {
            $ = new ProjectConnectorsAwsS3Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The unique AWS access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId The unique AWS access key ID.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(@Nullable Output<Boolean> auditEnabled) {
            $.auditEnabled = auditEnabled;
            return this;
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(Boolean auditEnabled) {
            return auditEnabled(Output.of(auditEnabled));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(@Nullable Output<List<ProjectConnectorsAwsS3AuditFilterArgs>> auditFilters) {
            $.auditFilters = auditFilters;
            return this;
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(List<ProjectConnectorsAwsS3AuditFilterArgs> auditFilters) {
            return auditFilters(Output.of(auditFilters));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(ProjectConnectorsAwsS3AuditFilterArgs... auditFilters) {
            return auditFilters(List.of(auditFilters));
        }

        /**
         * @param authType The authentication type to use.
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The authentication type to use.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param bucket The AWS S3 bucket. This bucket should already exist for the connector to work.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The AWS S3 bucket. This bucket should already exist for the connector to work.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalId The external ID to use when assuming the role.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId The external ID to use when assuming the role.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The AWS S3 region, e.g. `us-east-1`.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS S3 region, e.g. `us-east-1`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param secretAccessKey The secret AWS access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey The secret AWS access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(@Nullable Output<Boolean> troubleshootLogEnabled) {
            $.troubleshootLogEnabled = troubleshootLogEnabled;
            return this;
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(Boolean troubleshootLogEnabled) {
            return troubleshootLogEnabled(Output.of(troubleshootLogEnabled));
        }

        public ProjectConnectorsAwsS3Args build() {
            if ($.authType == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsS3Args", "authType");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsS3Args", "bucket");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsS3Args", "name");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsAwsS3Args", "region");
            }
            return $;
        }
    }

}
