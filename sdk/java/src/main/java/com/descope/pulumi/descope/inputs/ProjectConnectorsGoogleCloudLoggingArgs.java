// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectConnectorsGoogleCloudLoggingAuditFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsGoogleCloudLoggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsGoogleCloudLoggingArgs Empty = new ProjectConnectorsGoogleCloudLoggingArgs();

    /**
     * Whether to enable streaming of audit events.
     * 
     */
    @Import(name="auditEnabled")
    private @Nullable Output<Boolean> auditEnabled;

    /**
     * @return Whether to enable streaming of audit events.
     * 
     */
    public Optional<Output<Boolean>> auditEnabled() {
        return Optional.ofNullable(this.auditEnabled);
    }

    /**
     * Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    @Import(name="auditFilters")
    private @Nullable Output<List<ProjectConnectorsGoogleCloudLoggingAuditFilterArgs>> auditFilters;

    /**
     * @return Specify which events will be sent to the external audit service (including tenant selection).
     * 
     */
    public Optional<Output<List<ProjectConnectorsGoogleCloudLoggingAuditFilterArgs>>> auditFilters() {
        return Optional.ofNullable(this.auditFilters);
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
     * 
     */
    @Import(name="serviceAccountKey", required=true)
    private Output<String> serviceAccountKey;

    /**
     * @return A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
     * 
     */
    public Output<String> serviceAccountKey() {
        return this.serviceAccountKey;
    }

    /**
     * Whether to send troubleshooting events.
     * 
     */
    @Import(name="troubleshootLogEnabled")
    private @Nullable Output<Boolean> troubleshootLogEnabled;

    /**
     * @return Whether to send troubleshooting events.
     * 
     */
    public Optional<Output<Boolean>> troubleshootLogEnabled() {
        return Optional.ofNullable(this.troubleshootLogEnabled);
    }

    private ProjectConnectorsGoogleCloudLoggingArgs() {}

    private ProjectConnectorsGoogleCloudLoggingArgs(ProjectConnectorsGoogleCloudLoggingArgs $) {
        this.auditEnabled = $.auditEnabled;
        this.auditFilters = $.auditFilters;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.serviceAccountKey = $.serviceAccountKey;
        this.troubleshootLogEnabled = $.troubleshootLogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsGoogleCloudLoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsGoogleCloudLoggingArgs $;

        public Builder() {
            $ = new ProjectConnectorsGoogleCloudLoggingArgs();
        }

        public Builder(ProjectConnectorsGoogleCloudLoggingArgs defaults) {
            $ = new ProjectConnectorsGoogleCloudLoggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(@Nullable Output<Boolean> auditEnabled) {
            $.auditEnabled = auditEnabled;
            return this;
        }

        /**
         * @param auditEnabled Whether to enable streaming of audit events.
         * 
         * @return builder
         * 
         */
        public Builder auditEnabled(Boolean auditEnabled) {
            return auditEnabled(Output.of(auditEnabled));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(@Nullable Output<List<ProjectConnectorsGoogleCloudLoggingAuditFilterArgs>> auditFilters) {
            $.auditFilters = auditFilters;
            return this;
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(List<ProjectConnectorsGoogleCloudLoggingAuditFilterArgs> auditFilters) {
            return auditFilters(Output.of(auditFilters));
        }

        /**
         * @param auditFilters Specify which events will be sent to the external audit service (including tenant selection).
         * 
         * @return builder
         * 
         */
        public Builder auditFilters(ProjectConnectorsGoogleCloudLoggingAuditFilterArgs... auditFilters) {
            return auditFilters(List.of(auditFilters));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceAccountKey A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKey(Output<String> serviceAccountKey) {
            $.serviceAccountKey = serviceAccountKey;
            return this;
        }

        /**
         * @param serviceAccountKey A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountKey(String serviceAccountKey) {
            return serviceAccountKey(Output.of(serviceAccountKey));
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(@Nullable Output<Boolean> troubleshootLogEnabled) {
            $.troubleshootLogEnabled = troubleshootLogEnabled;
            return this;
        }

        /**
         * @param troubleshootLogEnabled Whether to send troubleshooting events.
         * 
         * @return builder
         * 
         */
        public Builder troubleshootLogEnabled(Boolean troubleshootLogEnabled) {
            return troubleshootLogEnabled(Output.of(troubleshootLogEnabled));
        }

        public ProjectConnectorsGoogleCloudLoggingArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsGoogleCloudLoggingArgs", "name");
            }
            if ($.serviceAccountKey == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsGoogleCloudLoggingArgs", "serviceAccountKey");
            }
            return $;
        }
    }

}
