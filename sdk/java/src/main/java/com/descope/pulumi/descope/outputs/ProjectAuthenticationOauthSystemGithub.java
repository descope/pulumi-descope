// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectAuthenticationOauthSystemGithubProviderTokenManagement;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectAuthenticationOauthSystemGithub {
    /**
     * @return The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     * 
     */
    private @Nullable List<String> allowedGrantTypes;
    /**
     * @return The URL that users are redirected to for authorization with the OAuth provider.
     * 
     */
    private @Nullable String authorizationEndpoint;
    private @Nullable Map<String,String> claimMapping;
    /**
     * @return The client ID for the OAuth provider, used to identify the application to the provider.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return The client secret for the OAuth provider, used to authenticate the application with the provider.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return A brief description of the OAuth provider.
     * 
     */
    private @Nullable String description;
    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    private @Nullable Boolean disabled;
    private @Nullable String issuer;
    /**
     * @return The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     * 
     */
    private @Nullable String jwksEndpoint;
    /**
     * @return The URL of the logo associated with the OAuth provider.
     * 
     */
    private @Nullable String logo;
    /**
     * @return Whether to merge existing user accounts with new ones created through OAuth authentication.
     * 
     */
    private @Nullable Boolean mergeUserAccounts;
    /**
     * @return Custom prompts or consent screens that users may see during OAuth authentication.
     * 
     */
    private @Nullable List<String> prompts;
    /**
     * @return Settings related to token management for the OAuth provider.
     * 
     */
    private @Nullable ProjectAuthenticationOauthSystemGithubProviderTokenManagement providerTokenManagement;
    /**
     * @return Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return The URL where the application requests an access token from the OAuth provider.
     * 
     */
    private @Nullable String tokenEndpoint;
    /**
     * @return The URL where the application retrieves user information from the OAuth provider.
     * 
     */
    private @Nullable String userInfoEndpoint;

    private ProjectAuthenticationOauthSystemGithub() {}
    /**
     * @return The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     * 
     */
    public List<String> allowedGrantTypes() {
        return this.allowedGrantTypes == null ? List.of() : this.allowedGrantTypes;
    }
    /**
     * @return The URL that users are redirected to for authorization with the OAuth provider.
     * 
     */
    public Optional<String> authorizationEndpoint() {
        return Optional.ofNullable(this.authorizationEndpoint);
    }
    public Map<String,String> claimMapping() {
        return this.claimMapping == null ? Map.of() : this.claimMapping;
    }
    /**
     * @return The client ID for the OAuth provider, used to identify the application to the provider.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The client secret for the OAuth provider, used to authenticate the application with the provider.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return A brief description of the OAuth provider.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     * 
     */
    public Optional<String> jwksEndpoint() {
        return Optional.ofNullable(this.jwksEndpoint);
    }
    /**
     * @return The URL of the logo associated with the OAuth provider.
     * 
     */
    public Optional<String> logo() {
        return Optional.ofNullable(this.logo);
    }
    /**
     * @return Whether to merge existing user accounts with new ones created through OAuth authentication.
     * 
     */
    public Optional<Boolean> mergeUserAccounts() {
        return Optional.ofNullable(this.mergeUserAccounts);
    }
    /**
     * @return Custom prompts or consent screens that users may see during OAuth authentication.
     * 
     */
    public List<String> prompts() {
        return this.prompts == null ? List.of() : this.prompts;
    }
    /**
     * @return Settings related to token management for the OAuth provider.
     * 
     */
    public Optional<ProjectAuthenticationOauthSystemGithubProviderTokenManagement> providerTokenManagement() {
        return Optional.ofNullable(this.providerTokenManagement);
    }
    /**
     * @return Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return The URL where the application requests an access token from the OAuth provider.
     * 
     */
    public Optional<String> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }
    /**
     * @return The URL where the application retrieves user information from the OAuth provider.
     * 
     */
    public Optional<String> userInfoEndpoint() {
        return Optional.ofNullable(this.userInfoEndpoint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectAuthenticationOauthSystemGithub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedGrantTypes;
        private @Nullable String authorizationEndpoint;
        private @Nullable Map<String,String> claimMapping;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String description;
        private @Nullable Boolean disabled;
        private @Nullable String issuer;
        private @Nullable String jwksEndpoint;
        private @Nullable String logo;
        private @Nullable Boolean mergeUserAccounts;
        private @Nullable List<String> prompts;
        private @Nullable ProjectAuthenticationOauthSystemGithubProviderTokenManagement providerTokenManagement;
        private @Nullable List<String> scopes;
        private @Nullable String tokenEndpoint;
        private @Nullable String userInfoEndpoint;
        public Builder() {}
        public Builder(ProjectAuthenticationOauthSystemGithub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedGrantTypes = defaults.allowedGrantTypes;
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.claimMapping = defaults.claimMapping;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.issuer = defaults.issuer;
    	      this.jwksEndpoint = defaults.jwksEndpoint;
    	      this.logo = defaults.logo;
    	      this.mergeUserAccounts = defaults.mergeUserAccounts;
    	      this.prompts = defaults.prompts;
    	      this.providerTokenManagement = defaults.providerTokenManagement;
    	      this.scopes = defaults.scopes;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.userInfoEndpoint = defaults.userInfoEndpoint;
        }

        @CustomType.Setter
        public Builder allowedGrantTypes(@Nullable List<String> allowedGrantTypes) {

            this.allowedGrantTypes = allowedGrantTypes;
            return this;
        }
        public Builder allowedGrantTypes(String... allowedGrantTypes) {
            return allowedGrantTypes(List.of(allowedGrantTypes));
        }
        @CustomType.Setter
        public Builder authorizationEndpoint(@Nullable String authorizationEndpoint) {

            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder claimMapping(@Nullable Map<String,String> claimMapping) {

            this.claimMapping = claimMapping;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder jwksEndpoint(@Nullable String jwksEndpoint) {

            this.jwksEndpoint = jwksEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder logo(@Nullable String logo) {

            this.logo = logo;
            return this;
        }
        @CustomType.Setter
        public Builder mergeUserAccounts(@Nullable Boolean mergeUserAccounts) {

            this.mergeUserAccounts = mergeUserAccounts;
            return this;
        }
        @CustomType.Setter
        public Builder prompts(@Nullable List<String> prompts) {

            this.prompts = prompts;
            return this;
        }
        public Builder prompts(String... prompts) {
            return prompts(List.of(prompts));
        }
        @CustomType.Setter
        public Builder providerTokenManagement(@Nullable ProjectAuthenticationOauthSystemGithubProviderTokenManagement providerTokenManagement) {

            this.providerTokenManagement = providerTokenManagement;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {

            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder tokenEndpoint(@Nullable String tokenEndpoint) {

            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder userInfoEndpoint(@Nullable String userInfoEndpoint) {

            this.userInfoEndpoint = userInfoEndpoint;
            return this;
        }
        public ProjectAuthenticationOauthSystemGithub build() {
            final var _resultValue = new ProjectAuthenticationOauthSystemGithub();
            _resultValue.allowedGrantTypes = allowedGrantTypes;
            _resultValue.authorizationEndpoint = authorizationEndpoint;
            _resultValue.claimMapping = claimMapping;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.description = description;
            _resultValue.disabled = disabled;
            _resultValue.issuer = issuer;
            _resultValue.jwksEndpoint = jwksEndpoint;
            _resultValue.logo = logo;
            _resultValue.mergeUserAccounts = mergeUserAccounts;
            _resultValue.prompts = prompts;
            _resultValue.providerTokenManagement = providerTokenManagement;
            _resultValue.scopes = scopes;
            _resultValue.tokenEndpoint = tokenEndpoint;
            _resultValue.userInfoEndpoint = userInfoEndpoint;
            return _resultValue;
        }
    }
}
