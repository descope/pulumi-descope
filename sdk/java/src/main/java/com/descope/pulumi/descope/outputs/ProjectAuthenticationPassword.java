// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectAuthenticationPasswordEmailService;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectAuthenticationPassword {
    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return Settings related to sending password reset emails as part of the password feature.
     * 
     */
    private @Nullable ProjectAuthenticationPasswordEmailService emailService;
    /**
     * @return Whether users are required to change their password periodically.
     * 
     */
    private @Nullable Boolean expiration;
    /**
     * @return The number of weeks after which a user&#39;s password expires and they need to replace it.
     * 
     */
    private @Nullable Integer expirationWeeks;
    /**
     * @return Whether the user account should be locked after a specified number of failed login attempts.
     * 
     */
    private @Nullable Boolean lock;
    /**
     * @return The number of failed login attempts allowed before an account is locked.
     * 
     */
    private @Nullable Integer lockAttempts;
    /**
     * @return Whether passwords must contain at least one lowercase letter.
     * 
     */
    private @Nullable Boolean lowercase;
    /**
     * @return The minimum length of the password that users are required to use. The maximum length is always `64`.
     * 
     */
    private @Nullable Integer minLength;
    /**
     * @return Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `{@literal @}`, `#`).
     * 
     */
    private @Nullable Boolean nonAlphanumeric;
    /**
     * @return Whether passwords must contain at least one number.
     * 
     */
    private @Nullable Boolean number;
    /**
     * @return Whether to forbid password reuse when users change their password.
     * 
     */
    private @Nullable Boolean reuse;
    /**
     * @return The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
     * 
     */
    private @Nullable Integer reuseAmount;
    /**
     * @return Whether passwords must contain at least one uppercase letter.
     * 
     */
    private @Nullable Boolean uppercase;

    private ProjectAuthenticationPassword() {}
    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return Settings related to sending password reset emails as part of the password feature.
     * 
     */
    public Optional<ProjectAuthenticationPasswordEmailService> emailService() {
        return Optional.ofNullable(this.emailService);
    }
    /**
     * @return Whether users are required to change their password periodically.
     * 
     */
    public Optional<Boolean> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return The number of weeks after which a user&#39;s password expires and they need to replace it.
     * 
     */
    public Optional<Integer> expirationWeeks() {
        return Optional.ofNullable(this.expirationWeeks);
    }
    /**
     * @return Whether the user account should be locked after a specified number of failed login attempts.
     * 
     */
    public Optional<Boolean> lock() {
        return Optional.ofNullable(this.lock);
    }
    /**
     * @return The number of failed login attempts allowed before an account is locked.
     * 
     */
    public Optional<Integer> lockAttempts() {
        return Optional.ofNullable(this.lockAttempts);
    }
    /**
     * @return Whether passwords must contain at least one lowercase letter.
     * 
     */
    public Optional<Boolean> lowercase() {
        return Optional.ofNullable(this.lowercase);
    }
    /**
     * @return The minimum length of the password that users are required to use. The maximum length is always `64`.
     * 
     */
    public Optional<Integer> minLength() {
        return Optional.ofNullable(this.minLength);
    }
    /**
     * @return Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `{@literal @}`, `#`).
     * 
     */
    public Optional<Boolean> nonAlphanumeric() {
        return Optional.ofNullable(this.nonAlphanumeric);
    }
    /**
     * @return Whether passwords must contain at least one number.
     * 
     */
    public Optional<Boolean> number() {
        return Optional.ofNullable(this.number);
    }
    /**
     * @return Whether to forbid password reuse when users change their password.
     * 
     */
    public Optional<Boolean> reuse() {
        return Optional.ofNullable(this.reuse);
    }
    /**
     * @return The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
     * 
     */
    public Optional<Integer> reuseAmount() {
        return Optional.ofNullable(this.reuseAmount);
    }
    /**
     * @return Whether passwords must contain at least one uppercase letter.
     * 
     */
    public Optional<Boolean> uppercase() {
        return Optional.ofNullable(this.uppercase);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectAuthenticationPassword defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean disabled;
        private @Nullable ProjectAuthenticationPasswordEmailService emailService;
        private @Nullable Boolean expiration;
        private @Nullable Integer expirationWeeks;
        private @Nullable Boolean lock;
        private @Nullable Integer lockAttempts;
        private @Nullable Boolean lowercase;
        private @Nullable Integer minLength;
        private @Nullable Boolean nonAlphanumeric;
        private @Nullable Boolean number;
        private @Nullable Boolean reuse;
        private @Nullable Integer reuseAmount;
        private @Nullable Boolean uppercase;
        public Builder() {}
        public Builder(ProjectAuthenticationPassword defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.emailService = defaults.emailService;
    	      this.expiration = defaults.expiration;
    	      this.expirationWeeks = defaults.expirationWeeks;
    	      this.lock = defaults.lock;
    	      this.lockAttempts = defaults.lockAttempts;
    	      this.lowercase = defaults.lowercase;
    	      this.minLength = defaults.minLength;
    	      this.nonAlphanumeric = defaults.nonAlphanumeric;
    	      this.number = defaults.number;
    	      this.reuse = defaults.reuse;
    	      this.reuseAmount = defaults.reuseAmount;
    	      this.uppercase = defaults.uppercase;
        }

        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder emailService(@Nullable ProjectAuthenticationPasswordEmailService emailService) {

            this.emailService = emailService;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable Boolean expiration) {

            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder expirationWeeks(@Nullable Integer expirationWeeks) {

            this.expirationWeeks = expirationWeeks;
            return this;
        }
        @CustomType.Setter
        public Builder lock(@Nullable Boolean lock) {

            this.lock = lock;
            return this;
        }
        @CustomType.Setter
        public Builder lockAttempts(@Nullable Integer lockAttempts) {

            this.lockAttempts = lockAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder lowercase(@Nullable Boolean lowercase) {

            this.lowercase = lowercase;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(@Nullable Integer minLength) {

            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder nonAlphanumeric(@Nullable Boolean nonAlphanumeric) {

            this.nonAlphanumeric = nonAlphanumeric;
            return this;
        }
        @CustomType.Setter
        public Builder number(@Nullable Boolean number) {

            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder reuse(@Nullable Boolean reuse) {

            this.reuse = reuse;
            return this;
        }
        @CustomType.Setter
        public Builder reuseAmount(@Nullable Integer reuseAmount) {

            this.reuseAmount = reuseAmount;
            return this;
        }
        @CustomType.Setter
        public Builder uppercase(@Nullable Boolean uppercase) {

            this.uppercase = uppercase;
            return this;
        }
        public ProjectAuthenticationPassword build() {
            final var _resultValue = new ProjectAuthenticationPassword();
            _resultValue.disabled = disabled;
            _resultValue.emailService = emailService;
            _resultValue.expiration = expiration;
            _resultValue.expirationWeeks = expirationWeeks;
            _resultValue.lock = lock;
            _resultValue.lockAttempts = lockAttempts;
            _resultValue.lowercase = lowercase;
            _resultValue.minLength = minLength;
            _resultValue.nonAlphanumeric = nonAlphanumeric;
            _resultValue.number = number;
            _resultValue.reuse = reuse;
            _resultValue.reuseAmount = reuseAmount;
            _resultValue.uppercase = uppercase;
            return _resultValue;
        }
    }
}
