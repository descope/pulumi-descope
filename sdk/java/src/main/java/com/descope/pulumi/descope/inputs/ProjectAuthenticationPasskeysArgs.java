// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthenticationPasskeysArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthenticationPasskeysArgs Empty = new ProjectAuthenticationPasskeysArgs();

    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Passkeys will be usable in the following domain and all its subdomains.
     * 
     */
    @Import(name="topLevelDomain")
    private @Nullable Output<String> topLevelDomain;

    /**
     * @return Passkeys will be usable in the following domain and all its subdomains.
     * 
     */
    public Optional<Output<String>> topLevelDomain() {
        return Optional.ofNullable(this.topLevelDomain);
    }

    private ProjectAuthenticationPasskeysArgs() {}

    private ProjectAuthenticationPasskeysArgs(ProjectAuthenticationPasskeysArgs $) {
        this.disabled = $.disabled;
        this.topLevelDomain = $.topLevelDomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthenticationPasskeysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthenticationPasskeysArgs $;

        public Builder() {
            $ = new ProjectAuthenticationPasskeysArgs();
        }

        public Builder(ProjectAuthenticationPasskeysArgs defaults) {
            $ = new ProjectAuthenticationPasskeysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param topLevelDomain Passkeys will be usable in the following domain and all its subdomains.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(@Nullable Output<String> topLevelDomain) {
            $.topLevelDomain = topLevelDomain;
            return this;
        }

        /**
         * @param topLevelDomain Passkeys will be usable in the following domain and all its subdomains.
         * 
         * @return builder
         * 
         */
        public Builder topLevelDomain(String topLevelDomain) {
            return topLevelDomain(Output.of(topLevelDomain));
        }

        public ProjectAuthenticationPasskeysArgs build() {
            return $;
        }
    }

}
