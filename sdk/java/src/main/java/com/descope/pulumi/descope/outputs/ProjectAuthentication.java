// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.descope.pulumi.descope.outputs.ProjectAuthenticationEmbeddedLink;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationEnchantedLink;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationMagicLink;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationOauth;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationOtp;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationPasskeys;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationPassword;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationSso;
import com.descope.pulumi.descope.outputs.ProjectAuthenticationTotp;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectAuthentication {
    /**
     * @return Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
     * 
     */
    private @Nullable ProjectAuthenticationEmbeddedLink embeddedLink;
    /**
     * @return An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
     * 
     */
    private @Nullable ProjectAuthenticationEnchantedLink enchantedLink;
    /**
     * @return An authentication method where a user receives a unique link via email to log in.
     * 
     */
    private @Nullable ProjectAuthenticationMagicLink magicLink;
    /**
     * @return Authentication using Open Authorization, which allows users to authenticate with various external services.
     * 
     */
    private @Nullable ProjectAuthenticationOauth oauth;
    /**
     * @return A dynamically generated set of numbers, granting the user one-time access.
     * 
     */
    private @Nullable ProjectAuthenticationOtp otp;
    /**
     * @return Device-based passwordless authentication, using fingerprint, face scan, and more.
     * 
     */
    private @Nullable ProjectAuthenticationPasskeys passkeys;
    /**
     * @return The classic username and password combination used for authentication.
     * 
     */
    private @Nullable ProjectAuthenticationPassword password;
    /**
     * @return Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
     * 
     */
    private @Nullable ProjectAuthenticationSso sso;
    /**
     * @return A one-time code generated for the user using a shared secret and time.
     * 
     */
    private @Nullable ProjectAuthenticationTotp totp;

    private ProjectAuthentication() {}
    /**
     * @return Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
     * 
     */
    public Optional<ProjectAuthenticationEmbeddedLink> embeddedLink() {
        return Optional.ofNullable(this.embeddedLink);
    }
    /**
     * @return An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
     * 
     */
    public Optional<ProjectAuthenticationEnchantedLink> enchantedLink() {
        return Optional.ofNullable(this.enchantedLink);
    }
    /**
     * @return An authentication method where a user receives a unique link via email to log in.
     * 
     */
    public Optional<ProjectAuthenticationMagicLink> magicLink() {
        return Optional.ofNullable(this.magicLink);
    }
    /**
     * @return Authentication using Open Authorization, which allows users to authenticate with various external services.
     * 
     */
    public Optional<ProjectAuthenticationOauth> oauth() {
        return Optional.ofNullable(this.oauth);
    }
    /**
     * @return A dynamically generated set of numbers, granting the user one-time access.
     * 
     */
    public Optional<ProjectAuthenticationOtp> otp() {
        return Optional.ofNullable(this.otp);
    }
    /**
     * @return Device-based passwordless authentication, using fingerprint, face scan, and more.
     * 
     */
    public Optional<ProjectAuthenticationPasskeys> passkeys() {
        return Optional.ofNullable(this.passkeys);
    }
    /**
     * @return The classic username and password combination used for authentication.
     * 
     */
    public Optional<ProjectAuthenticationPassword> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
     * 
     */
    public Optional<ProjectAuthenticationSso> sso() {
        return Optional.ofNullable(this.sso);
    }
    /**
     * @return A one-time code generated for the user using a shared secret and time.
     * 
     */
    public Optional<ProjectAuthenticationTotp> totp() {
        return Optional.ofNullable(this.totp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ProjectAuthenticationEmbeddedLink embeddedLink;
        private @Nullable ProjectAuthenticationEnchantedLink enchantedLink;
        private @Nullable ProjectAuthenticationMagicLink magicLink;
        private @Nullable ProjectAuthenticationOauth oauth;
        private @Nullable ProjectAuthenticationOtp otp;
        private @Nullable ProjectAuthenticationPasskeys passkeys;
        private @Nullable ProjectAuthenticationPassword password;
        private @Nullable ProjectAuthenticationSso sso;
        private @Nullable ProjectAuthenticationTotp totp;
        public Builder() {}
        public Builder(ProjectAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.embeddedLink = defaults.embeddedLink;
    	      this.enchantedLink = defaults.enchantedLink;
    	      this.magicLink = defaults.magicLink;
    	      this.oauth = defaults.oauth;
    	      this.otp = defaults.otp;
    	      this.passkeys = defaults.passkeys;
    	      this.password = defaults.password;
    	      this.sso = defaults.sso;
    	      this.totp = defaults.totp;
        }

        @CustomType.Setter
        public Builder embeddedLink(@Nullable ProjectAuthenticationEmbeddedLink embeddedLink) {

            this.embeddedLink = embeddedLink;
            return this;
        }
        @CustomType.Setter
        public Builder enchantedLink(@Nullable ProjectAuthenticationEnchantedLink enchantedLink) {

            this.enchantedLink = enchantedLink;
            return this;
        }
        @CustomType.Setter
        public Builder magicLink(@Nullable ProjectAuthenticationMagicLink magicLink) {

            this.magicLink = magicLink;
            return this;
        }
        @CustomType.Setter
        public Builder oauth(@Nullable ProjectAuthenticationOauth oauth) {

            this.oauth = oauth;
            return this;
        }
        @CustomType.Setter
        public Builder otp(@Nullable ProjectAuthenticationOtp otp) {

            this.otp = otp;
            return this;
        }
        @CustomType.Setter
        public Builder passkeys(@Nullable ProjectAuthenticationPasskeys passkeys) {

            this.passkeys = passkeys;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable ProjectAuthenticationPassword password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sso(@Nullable ProjectAuthenticationSso sso) {

            this.sso = sso;
            return this;
        }
        @CustomType.Setter
        public Builder totp(@Nullable ProjectAuthenticationTotp totp) {

            this.totp = totp;
            return this;
        }
        public ProjectAuthentication build() {
            final var _resultValue = new ProjectAuthentication();
            _resultValue.embeddedLink = embeddedLink;
            _resultValue.enchantedLink = enchantedLink;
            _resultValue.magicLink = magicLink;
            _resultValue.oauth = oauth;
            _resultValue.otp = otp;
            _resultValue.passkeys = passkeys;
            _resultValue.password = password;
            _resultValue.sso = sso;
            _resultValue.totp = totp;
            return _resultValue;
        }
    }
}
