// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectJwtTemplatesAccessKeyTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectJwtTemplatesAccessKeyTemplateArgs Empty = new ProjectJwtTemplatesAccessKeyTemplateArgs();

    /**
     * The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     * 
     */
    @Import(name="authSchema")
    private @Nullable Output<String> authSchema;

    /**
     * @return The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
     * 
     */
    public Optional<Output<String>> authSchema() {
        return Optional.ofNullable(this.authSchema);
    }

    @Import(name="conformanceIssuer")
    private @Nullable Output<Boolean> conformanceIssuer;

    public Optional<Output<Boolean>> conformanceIssuer() {
        return Optional.ofNullable(this.conformanceIssuer);
    }

    /**
     * Description of the JWT Template.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the JWT Template.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Policy for empty claims - `none`, `nil` or `delete`.
     * 
     */
    @Import(name="emptyClaimPolicy")
    private @Nullable Output<String> emptyClaimPolicy;

    /**
     * @return Policy for empty claims - `none`, `nil` or `delete`.
     * 
     */
    public Optional<Output<String>> emptyClaimPolicy() {
        return Optional.ofNullable(this.emptyClaimPolicy);
    }

    @Import(name="enforceIssuer")
    private @Nullable Output<Boolean> enforceIssuer;

    public Optional<Output<Boolean>> enforceIssuer() {
        return Optional.ofNullable(this.enforceIssuer);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the JWT Template.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the JWT Template.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="template", required=true)
    private Output<String> template;

    public Output<String> template() {
        return this.template;
    }

    private ProjectJwtTemplatesAccessKeyTemplateArgs() {}

    private ProjectJwtTemplatesAccessKeyTemplateArgs(ProjectJwtTemplatesAccessKeyTemplateArgs $) {
        this.authSchema = $.authSchema;
        this.conformanceIssuer = $.conformanceIssuer;
        this.description = $.description;
        this.emptyClaimPolicy = $.emptyClaimPolicy;
        this.enforceIssuer = $.enforceIssuer;
        this.id = $.id;
        this.name = $.name;
        this.template = $.template;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectJwtTemplatesAccessKeyTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectJwtTemplatesAccessKeyTemplateArgs $;

        public Builder() {
            $ = new ProjectJwtTemplatesAccessKeyTemplateArgs();
        }

        public Builder(ProjectJwtTemplatesAccessKeyTemplateArgs defaults) {
            $ = new ProjectJwtTemplatesAccessKeyTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authSchema The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
         * 
         * @return builder
         * 
         */
        public Builder authSchema(@Nullable Output<String> authSchema) {
            $.authSchema = authSchema;
            return this;
        }

        /**
         * @param authSchema The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
         * 
         * @return builder
         * 
         */
        public Builder authSchema(String authSchema) {
            return authSchema(Output.of(authSchema));
        }

        public Builder conformanceIssuer(@Nullable Output<Boolean> conformanceIssuer) {
            $.conformanceIssuer = conformanceIssuer;
            return this;
        }

        public Builder conformanceIssuer(Boolean conformanceIssuer) {
            return conformanceIssuer(Output.of(conformanceIssuer));
        }

        /**
         * @param description Description of the JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param emptyClaimPolicy Policy for empty claims - `none`, `nil` or `delete`.
         * 
         * @return builder
         * 
         */
        public Builder emptyClaimPolicy(@Nullable Output<String> emptyClaimPolicy) {
            $.emptyClaimPolicy = emptyClaimPolicy;
            return this;
        }

        /**
         * @param emptyClaimPolicy Policy for empty claims - `none`, `nil` or `delete`.
         * 
         * @return builder
         * 
         */
        public Builder emptyClaimPolicy(String emptyClaimPolicy) {
            return emptyClaimPolicy(Output.of(emptyClaimPolicy));
        }

        public Builder enforceIssuer(@Nullable Output<Boolean> enforceIssuer) {
            $.enforceIssuer = enforceIssuer;
            return this;
        }

        public Builder enforceIssuer(Boolean enforceIssuer) {
            return enforceIssuer(Output.of(enforceIssuer));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the JWT Template.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder template(Output<String> template) {
            $.template = template;
            return this;
        }

        public Builder template(String template) {
            return template(Output.of(template));
        }

        public ProjectJwtTemplatesAccessKeyTemplateArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectJwtTemplatesAccessKeyTemplateArgs", "name");
            }
            if ($.template == null) {
                throw new MissingRequiredPropertyException("ProjectJwtTemplatesAccessKeyTemplateArgs", "template");
            }
            return $;
        }
    }

}
