// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProjectConnectorsMparticle {
    /**
     * @return The mParticle Server to Server Key generated for the Descope service.
     * 
     */
    private String apiKey;
    /**
     * @return The mParticle Server to Server Secret generated for the Descope service.
     * 
     */
    private String apiSecret;
    /**
     * @return The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
     * 
     */
    private @Nullable String baseUrl;
    /**
     * @return The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
     * 
     */
    private @Nullable String defaultEnvironment;
    /**
     * @return A description of what your connector is used for.
     * 
     */
    private @Nullable String description;
    private @Nullable String id;
    /**
     * @return A custom name for your connector.
     * 
     */
    private String name;
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    private @Nullable Boolean useStaticIps;

    private ProjectConnectorsMparticle() {}
    /**
     * @return The mParticle Server to Server Key generated for the Descope service.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    /**
     * @return The mParticle Server to Server Secret generated for the Descope service.
     * 
     */
    public String apiSecret() {
        return this.apiSecret;
    }
    /**
     * @return The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
     * 
     */
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    /**
     * @return The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
     * 
     */
    public Optional<String> defaultEnvironment() {
        return Optional.ofNullable(this.defaultEnvironment);
    }
    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A custom name for your connector.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether the connector should send all requests from specific static IPs.
     * 
     */
    public Optional<Boolean> useStaticIps() {
        return Optional.ofNullable(this.useStaticIps);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectConnectorsMparticle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private String apiSecret;
        private @Nullable String baseUrl;
        private @Nullable String defaultEnvironment;
        private @Nullable String description;
        private @Nullable String id;
        private String name;
        private @Nullable Boolean useStaticIps;
        public Builder() {}
        public Builder(ProjectConnectorsMparticle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.apiSecret = defaults.apiSecret;
    	      this.baseUrl = defaults.baseUrl;
    	      this.defaultEnvironment = defaults.defaultEnvironment;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.useStaticIps = defaults.useStaticIps;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsMparticle", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder apiSecret(String apiSecret) {
            if (apiSecret == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsMparticle", "apiSecret");
            }
            this.apiSecret = apiSecret;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(@Nullable String baseUrl) {

            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder defaultEnvironment(@Nullable String defaultEnvironment) {

            this.defaultEnvironment = defaultEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ProjectConnectorsMparticle", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder useStaticIps(@Nullable Boolean useStaticIps) {

            this.useStaticIps = useStaticIps;
            return this;
        }
        public ProjectConnectorsMparticle build() {
            final var _resultValue = new ProjectConnectorsMparticle();
            _resultValue.apiKey = apiKey;
            _resultValue.apiSecret = apiSecret;
            _resultValue.baseUrl = baseUrl;
            _resultValue.defaultEnvironment = defaultEnvironment;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.useStaticIps = useStaticIps;
            return _resultValue;
        }
    }
}
