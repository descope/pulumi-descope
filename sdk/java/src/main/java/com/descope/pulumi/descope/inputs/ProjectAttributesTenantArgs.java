// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectAttributesTenantAuthorizationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAttributesTenantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAttributesTenantArgs Empty = new ProjectAttributesTenantArgs();

    /**
     * Determines the required permissions for this tenant.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<ProjectAttributesTenantAuthorizationArgs> authorization;

    /**
     * @return Determines the required permissions for this tenant.
     * 
     */
    public Optional<Output<ProjectAttributesTenantAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the attribute. This value is called `Display Name` in the Descope console.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the attribute. This value is called `Display Name` in the Descope console.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
     * 
     */
    @Import(name="selectOptions")
    private @Nullable Output<List<String>> selectOptions;

    /**
     * @return When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
     * 
     */
    public Optional<Output<List<String>>> selectOptions() {
        return Optional.ofNullable(this.selectOptions);
    }

    /**
     * The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ProjectAttributesTenantArgs() {}

    private ProjectAttributesTenantArgs(ProjectAttributesTenantArgs $) {
        this.authorization = $.authorization;
        this.id = $.id;
        this.name = $.name;
        this.selectOptions = $.selectOptions;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAttributesTenantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAttributesTenantArgs $;

        public Builder() {
            $ = new ProjectAttributesTenantArgs();
        }

        public Builder(ProjectAttributesTenantArgs defaults) {
            $ = new ProjectAttributesTenantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorization Determines the required permissions for this tenant.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<ProjectAttributesTenantAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization Determines the required permissions for this tenant.
         * 
         * @return builder
         * 
         */
        public Builder authorization(ProjectAttributesTenantAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param id An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id An optional identifier for the attribute. This value is called `Machine Name` in the Descope console. If a value is not provided then an appropriate one will be created from the value of `name`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the attribute. This value is called `Display Name` in the Descope console.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute. This value is called `Display Name` in the Descope console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param selectOptions When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
         * 
         * @return builder
         * 
         */
        public Builder selectOptions(@Nullable Output<List<String>> selectOptions) {
            $.selectOptions = selectOptions;
            return this;
        }

        /**
         * @param selectOptions When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
         * 
         * @return builder
         * 
         */
        public Builder selectOptions(List<String> selectOptions) {
            return selectOptions(Output.of(selectOptions));
        }

        /**
         * @param selectOptions When the attribute type is &#34;multiselect&#34;. A list of options to choose from.
         * 
         * @return builder
         * 
         */
        public Builder selectOptions(String... selectOptions) {
            return selectOptions(List.of(selectOptions));
        }

        /**
         * @param type The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the attribute. Choose one of &#34;string&#34;, &#34;number&#34;, &#34;boolean&#34;, &#34;singleselect&#34;, &#34;multiselect&#34;, &#34;date&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ProjectAttributesTenantArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectAttributesTenantArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ProjectAttributesTenantArgs", "type");
            }
            return $;
        }
    }

}
