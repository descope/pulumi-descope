// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.descope.pulumi.descope.inputs.ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAuthenticationOauthSystemGithubArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAuthenticationOauthSystemGithubArgs Empty = new ProjectAuthenticationOauthSystemGithubArgs();

    /**
     * The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     * 
     */
    @Import(name="allowedGrantTypes")
    private @Nullable Output<List<String>> allowedGrantTypes;

    /**
     * @return The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
     * 
     */
    public Optional<Output<List<String>>> allowedGrantTypes() {
        return Optional.ofNullable(this.allowedGrantTypes);
    }

    /**
     * The URL that users are redirected to for authorization with the OAuth provider.
     * 
     */
    @Import(name="authorizationEndpoint")
    private @Nullable Output<String> authorizationEndpoint;

    /**
     * @return The URL that users are redirected to for authorization with the OAuth provider.
     * 
     */
    public Optional<Output<String>> authorizationEndpoint() {
        return Optional.ofNullable(this.authorizationEndpoint);
    }

    /**
     * Use a custom domain in your OAuth verification screen.
     * 
     */
    @Import(name="callbackDomain")
    private @Nullable Output<String> callbackDomain;

    /**
     * @return Use a custom domain in your OAuth verification screen.
     * 
     */
    public Optional<Output<String>> callbackDomain() {
        return Optional.ofNullable(this.callbackDomain);
    }

    /**
     * Maps OAuth provider claims to Descope user attributes.
     * 
     */
    @Import(name="claimMapping")
    private @Nullable Output<Map<String,String>> claimMapping;

    /**
     * @return Maps OAuth provider claims to Descope user attributes.
     * 
     */
    public Optional<Output<Map<String,String>>> claimMapping() {
        return Optional.ofNullable(this.claimMapping);
    }

    /**
     * The client ID for the OAuth provider, used to identify the application to the provider.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The client ID for the OAuth provider, used to identify the application to the provider.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret for the OAuth provider, used to authenticate the application with the provider.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The client secret for the OAuth provider, used to authenticate the application with the provider.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * A brief description of the OAuth provider.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A brief description of the OAuth provider.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The issuer identifier for the OAuth provider.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The issuer identifier for the OAuth provider.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     * 
     */
    @Import(name="jwksEndpoint")
    private @Nullable Output<String> jwksEndpoint;

    /**
     * @return The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
     * 
     */
    public Optional<Output<String>> jwksEndpoint() {
        return Optional.ofNullable(this.jwksEndpoint);
    }

    /**
     * The URL of the logo associated with the OAuth provider.
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return The URL of the logo associated with the OAuth provider.
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * Whether to enable provider token management for this OAuth provider.
     * 
     */
    @Import(name="manageProviderTokens")
    private @Nullable Output<Boolean> manageProviderTokens;

    /**
     * @return Whether to enable provider token management for this OAuth provider.
     * 
     */
    public Optional<Output<Boolean>> manageProviderTokens() {
        return Optional.ofNullable(this.manageProviderTokens);
    }

    /**
     * Whether to merge existing user accounts with new ones created through OAuth authentication.
     * 
     */
    @Import(name="mergeUserAccounts")
    private @Nullable Output<Boolean> mergeUserAccounts;

    /**
     * @return Whether to merge existing user accounts with new ones created through OAuth authentication.
     * 
     */
    public Optional<Output<Boolean>> mergeUserAccounts() {
        return Optional.ofNullable(this.mergeUserAccounts);
    }

    /**
     * Custom prompts or consent screens that users may see during OAuth authentication.
     * 
     */
    @Import(name="prompts")
    private @Nullable Output<List<String>> prompts;

    /**
     * @return Custom prompts or consent screens that users may see during OAuth authentication.
     * 
     */
    public Optional<Output<List<String>>> prompts() {
        return Optional.ofNullable(this.prompts);
    }

    /**
     * This attribute is deprecated, use the `manage_provider_tokens`, `callback_domain`, and `redirect_url` fields instead.
     * 
     */
    @Import(name="providerTokenManagement")
    private @Nullable Output<ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs> providerTokenManagement;

    /**
     * @return This attribute is deprecated, use the `manage_provider_tokens`, `callback_domain`, and `redirect_url` fields instead.
     * 
     */
    public Optional<Output<ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs>> providerTokenManagement() {
        return Optional.ofNullable(this.providerTokenManagement);
    }

    /**
     * Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
     * 
     */
    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    /**
     * @return Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
     * 
     */
    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    /**
     * Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The URL where the application requests an access token from the OAuth provider.
     * 
     */
    @Import(name="tokenEndpoint")
    private @Nullable Output<String> tokenEndpoint;

    /**
     * @return The URL where the application requests an access token from the OAuth provider.
     * 
     */
    public Optional<Output<String>> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    /**
     * Use private key JWT (client assertion) instead of client secret.
     * 
     */
    @Import(name="useClientAssertion")
    private @Nullable Output<Boolean> useClientAssertion;

    /**
     * @return Use private key JWT (client assertion) instead of client secret.
     * 
     */
    public Optional<Output<Boolean>> useClientAssertion() {
        return Optional.ofNullable(this.useClientAssertion);
    }

    /**
     * The URL where the application retrieves user information from the OAuth provider.
     * 
     */
    @Import(name="userInfoEndpoint")
    private @Nullable Output<String> userInfoEndpoint;

    /**
     * @return The URL where the application retrieves user information from the OAuth provider.
     * 
     */
    public Optional<Output<String>> userInfoEndpoint() {
        return Optional.ofNullable(this.userInfoEndpoint);
    }

    private ProjectAuthenticationOauthSystemGithubArgs() {}

    private ProjectAuthenticationOauthSystemGithubArgs(ProjectAuthenticationOauthSystemGithubArgs $) {
        this.allowedGrantTypes = $.allowedGrantTypes;
        this.authorizationEndpoint = $.authorizationEndpoint;
        this.callbackDomain = $.callbackDomain;
        this.claimMapping = $.claimMapping;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.disabled = $.disabled;
        this.issuer = $.issuer;
        this.jwksEndpoint = $.jwksEndpoint;
        this.logo = $.logo;
        this.manageProviderTokens = $.manageProviderTokens;
        this.mergeUserAccounts = $.mergeUserAccounts;
        this.prompts = $.prompts;
        this.providerTokenManagement = $.providerTokenManagement;
        this.redirectUrl = $.redirectUrl;
        this.scopes = $.scopes;
        this.tokenEndpoint = $.tokenEndpoint;
        this.useClientAssertion = $.useClientAssertion;
        this.userInfoEndpoint = $.userInfoEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAuthenticationOauthSystemGithubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAuthenticationOauthSystemGithubArgs $;

        public Builder() {
            $ = new ProjectAuthenticationOauthSystemGithubArgs();
        }

        public Builder(ProjectAuthenticationOauthSystemGithubArgs defaults) {
            $ = new ProjectAuthenticationOauthSystemGithubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedGrantTypes The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder allowedGrantTypes(@Nullable Output<List<String>> allowedGrantTypes) {
            $.allowedGrantTypes = allowedGrantTypes;
            return this;
        }

        /**
         * @param allowedGrantTypes The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder allowedGrantTypes(List<String> allowedGrantTypes) {
            return allowedGrantTypes(Output.of(allowedGrantTypes));
        }

        /**
         * @param allowedGrantTypes The type of grants (`authorization_code` or `implicit`) to allow when requesting access tokens from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder allowedGrantTypes(String... allowedGrantTypes) {
            return allowedGrantTypes(List.of(allowedGrantTypes));
        }

        /**
         * @param authorizationEndpoint The URL that users are redirected to for authorization with the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(@Nullable Output<String> authorizationEndpoint) {
            $.authorizationEndpoint = authorizationEndpoint;
            return this;
        }

        /**
         * @param authorizationEndpoint The URL that users are redirected to for authorization with the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            return authorizationEndpoint(Output.of(authorizationEndpoint));
        }

        /**
         * @param callbackDomain Use a custom domain in your OAuth verification screen.
         * 
         * @return builder
         * 
         */
        public Builder callbackDomain(@Nullable Output<String> callbackDomain) {
            $.callbackDomain = callbackDomain;
            return this;
        }

        /**
         * @param callbackDomain Use a custom domain in your OAuth verification screen.
         * 
         * @return builder
         * 
         */
        public Builder callbackDomain(String callbackDomain) {
            return callbackDomain(Output.of(callbackDomain));
        }

        /**
         * @param claimMapping Maps OAuth provider claims to Descope user attributes.
         * 
         * @return builder
         * 
         */
        public Builder claimMapping(@Nullable Output<Map<String,String>> claimMapping) {
            $.claimMapping = claimMapping;
            return this;
        }

        /**
         * @param claimMapping Maps OAuth provider claims to Descope user attributes.
         * 
         * @return builder
         * 
         */
        public Builder claimMapping(Map<String,String> claimMapping) {
            return claimMapping(Output.of(claimMapping));
        }

        /**
         * @param clientId The client ID for the OAuth provider, used to identify the application to the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client ID for the OAuth provider, used to identify the application to the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client secret for the OAuth provider, used to authenticate the application with the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client secret for the OAuth provider, used to authenticate the application with the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param description A brief description of the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A brief description of the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param issuer The issuer identifier for the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer identifier for the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param jwksEndpoint The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder jwksEndpoint(@Nullable Output<String> jwksEndpoint) {
            $.jwksEndpoint = jwksEndpoint;
            return this;
        }

        /**
         * @param jwksEndpoint The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder jwksEndpoint(String jwksEndpoint) {
            return jwksEndpoint(Output.of(jwksEndpoint));
        }

        /**
         * @param logo The URL of the logo associated with the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo The URL of the logo associated with the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param manageProviderTokens Whether to enable provider token management for this OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder manageProviderTokens(@Nullable Output<Boolean> manageProviderTokens) {
            $.manageProviderTokens = manageProviderTokens;
            return this;
        }

        /**
         * @param manageProviderTokens Whether to enable provider token management for this OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder manageProviderTokens(Boolean manageProviderTokens) {
            return manageProviderTokens(Output.of(manageProviderTokens));
        }

        /**
         * @param mergeUserAccounts Whether to merge existing user accounts with new ones created through OAuth authentication.
         * 
         * @return builder
         * 
         */
        public Builder mergeUserAccounts(@Nullable Output<Boolean> mergeUserAccounts) {
            $.mergeUserAccounts = mergeUserAccounts;
            return this;
        }

        /**
         * @param mergeUserAccounts Whether to merge existing user accounts with new ones created through OAuth authentication.
         * 
         * @return builder
         * 
         */
        public Builder mergeUserAccounts(Boolean mergeUserAccounts) {
            return mergeUserAccounts(Output.of(mergeUserAccounts));
        }

        /**
         * @param prompts Custom prompts or consent screens that users may see during OAuth authentication.
         * 
         * @return builder
         * 
         */
        public Builder prompts(@Nullable Output<List<String>> prompts) {
            $.prompts = prompts;
            return this;
        }

        /**
         * @param prompts Custom prompts or consent screens that users may see during OAuth authentication.
         * 
         * @return builder
         * 
         */
        public Builder prompts(List<String> prompts) {
            return prompts(Output.of(prompts));
        }

        /**
         * @param prompts Custom prompts or consent screens that users may see during OAuth authentication.
         * 
         * @return builder
         * 
         */
        public Builder prompts(String... prompts) {
            return prompts(List.of(prompts));
        }

        /**
         * @param providerTokenManagement This attribute is deprecated, use the `manage_provider_tokens`, `callback_domain`, and `redirect_url` fields instead.
         * 
         * @return builder
         * 
         */
        public Builder providerTokenManagement(@Nullable Output<ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs> providerTokenManagement) {
            $.providerTokenManagement = providerTokenManagement;
            return this;
        }

        /**
         * @param providerTokenManagement This attribute is deprecated, use the `manage_provider_tokens`, `callback_domain`, and `redirect_url` fields instead.
         * 
         * @return builder
         * 
         */
        public Builder providerTokenManagement(ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs providerTokenManagement) {
            return providerTokenManagement(Output.of(providerTokenManagement));
        }

        /**
         * @param redirectUrl Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param scopes Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes of access that the application requests from the user&#39;s account on the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param tokenEndpoint The URL where the application requests an access token from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(@Nullable Output<String> tokenEndpoint) {
            $.tokenEndpoint = tokenEndpoint;
            return this;
        }

        /**
         * @param tokenEndpoint The URL where the application requests an access token from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(String tokenEndpoint) {
            return tokenEndpoint(Output.of(tokenEndpoint));
        }

        /**
         * @param useClientAssertion Use private key JWT (client assertion) instead of client secret.
         * 
         * @return builder
         * 
         */
        public Builder useClientAssertion(@Nullable Output<Boolean> useClientAssertion) {
            $.useClientAssertion = useClientAssertion;
            return this;
        }

        /**
         * @param useClientAssertion Use private key JWT (client assertion) instead of client secret.
         * 
         * @return builder
         * 
         */
        public Builder useClientAssertion(Boolean useClientAssertion) {
            return useClientAssertion(Output.of(useClientAssertion));
        }

        /**
         * @param userInfoEndpoint The URL where the application retrieves user information from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder userInfoEndpoint(@Nullable Output<String> userInfoEndpoint) {
            $.userInfoEndpoint = userInfoEndpoint;
            return this;
        }

        /**
         * @param userInfoEndpoint The URL where the application retrieves user information from the OAuth provider.
         * 
         * @return builder
         * 
         */
        public Builder userInfoEndpoint(String userInfoEndpoint) {
            return userInfoEndpoint(Output.of(userInfoEndpoint));
        }

        public ProjectAuthenticationOauthSystemGithubArgs build() {
            return $;
        }
    }

}
