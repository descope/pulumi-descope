// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectAttributesUserWidgetAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectAttributesUserWidgetAuthorizationArgs Empty = new ProjectAttributesUserWidgetAuthorizationArgs();

    /**
     * The permissions users are required to have to edit this attribute in the user management widget.
     * 
     */
    @Import(name="editPermissions")
    private @Nullable Output<List<String>> editPermissions;

    /**
     * @return The permissions users are required to have to edit this attribute in the user management widget.
     * 
     */
    public Optional<Output<List<String>>> editPermissions() {
        return Optional.ofNullable(this.editPermissions);
    }

    /**
     * The permissions users are required to have to view this attribute in the user management widget.
     * 
     */
    @Import(name="viewPermissions")
    private @Nullable Output<List<String>> viewPermissions;

    /**
     * @return The permissions users are required to have to view this attribute in the user management widget.
     * 
     */
    public Optional<Output<List<String>>> viewPermissions() {
        return Optional.ofNullable(this.viewPermissions);
    }

    private ProjectAttributesUserWidgetAuthorizationArgs() {}

    private ProjectAttributesUserWidgetAuthorizationArgs(ProjectAttributesUserWidgetAuthorizationArgs $) {
        this.editPermissions = $.editPermissions;
        this.viewPermissions = $.viewPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectAttributesUserWidgetAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectAttributesUserWidgetAuthorizationArgs $;

        public Builder() {
            $ = new ProjectAttributesUserWidgetAuthorizationArgs();
        }

        public Builder(ProjectAttributesUserWidgetAuthorizationArgs defaults) {
            $ = new ProjectAttributesUserWidgetAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param editPermissions The permissions users are required to have to edit this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder editPermissions(@Nullable Output<List<String>> editPermissions) {
            $.editPermissions = editPermissions;
            return this;
        }

        /**
         * @param editPermissions The permissions users are required to have to edit this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder editPermissions(List<String> editPermissions) {
            return editPermissions(Output.of(editPermissions));
        }

        /**
         * @param editPermissions The permissions users are required to have to edit this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder editPermissions(String... editPermissions) {
            return editPermissions(List.of(editPermissions));
        }

        /**
         * @param viewPermissions The permissions users are required to have to view this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(@Nullable Output<List<String>> viewPermissions) {
            $.viewPermissions = viewPermissions;
            return this;
        }

        /**
         * @param viewPermissions The permissions users are required to have to view this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(List<String> viewPermissions) {
            return viewPermissions(Output.of(viewPermissions));
        }

        /**
         * @param viewPermissions The permissions users are required to have to view this attribute in the user management widget.
         * 
         * @return builder
         * 
         */
        public Builder viewPermissions(String... viewPermissions) {
            return viewPermissions(List.of(viewPermissions));
        }

        public ProjectAttributesUserWidgetAuthorizationArgs build() {
            return $;
        }
    }

}
