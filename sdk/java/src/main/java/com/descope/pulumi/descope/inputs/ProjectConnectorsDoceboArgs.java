// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.descope.pulumi.descope.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectConnectorsDoceboArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectConnectorsDoceboArgs Empty = new ProjectConnectorsDoceboArgs();

    /**
     * The Docebo api base url.
     * 
     */
    @Import(name="baseUrl", required=true)
    private Output<String> baseUrl;

    /**
     * @return The Docebo api base url.
     * 
     */
    public Output<String> baseUrl() {
        return this.baseUrl;
    }

    /**
     * The Docebo OAuth 2.0 app client ID.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The Docebo OAuth 2.0 app client ID.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The Docebo OAuth 2.0 app client secret.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return The Docebo OAuth 2.0 app client secret.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * A description of what your connector is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of what your connector is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A custom name for your connector.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A custom name for your connector.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Docebo user&#39;s password.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The Docebo user&#39;s password.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The Docebo username.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The Docebo username.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ProjectConnectorsDoceboArgs() {}

    private ProjectConnectorsDoceboArgs(ProjectConnectorsDoceboArgs $) {
        this.baseUrl = $.baseUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectConnectorsDoceboArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectConnectorsDoceboArgs $;

        public Builder() {
            $ = new ProjectConnectorsDoceboArgs();
        }

        public Builder(ProjectConnectorsDoceboArgs defaults) {
            $ = new ProjectConnectorsDoceboArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseUrl The Docebo api base url.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The Docebo api base url.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param clientId The Docebo OAuth 2.0 app client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Docebo OAuth 2.0 app client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Docebo OAuth 2.0 app client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Docebo OAuth 2.0 app client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of what your connector is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your connector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The Docebo user&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The Docebo user&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The Docebo username.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The Docebo username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProjectConnectorsDoceboArgs build() {
            if ($.baseUrl == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "baseUrl");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "clientSecret");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "name");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ProjectConnectorsDoceboArgs", "username");
            }
            return $;
        }
    }

}
