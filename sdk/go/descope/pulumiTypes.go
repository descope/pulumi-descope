// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package descope

import (
	"context"
	"reflect"

	"github.com/descope/pulumi-descope/sdk/go/descope/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ProjectApplications struct {
	// Applications using OpenID Connect (OIDC) for authentication.
	OidcApplications []ProjectApplicationsOidcApplication `pulumi:"oidcApplications"`
	// Applications using SAML for authentication.
	SamlApplications []ProjectApplicationsSamlApplication `pulumi:"samlApplications"`
}

// ProjectApplicationsInput is an input type that accepts ProjectApplicationsArgs and ProjectApplicationsOutput values.
// You can construct a concrete instance of `ProjectApplicationsInput` via:
//
//	ProjectApplicationsArgs{...}
type ProjectApplicationsInput interface {
	pulumi.Input

	ToProjectApplicationsOutput() ProjectApplicationsOutput
	ToProjectApplicationsOutputWithContext(context.Context) ProjectApplicationsOutput
}

type ProjectApplicationsArgs struct {
	// Applications using OpenID Connect (OIDC) for authentication.
	OidcApplications ProjectApplicationsOidcApplicationArrayInput `pulumi:"oidcApplications"`
	// Applications using SAML for authentication.
	SamlApplications ProjectApplicationsSamlApplicationArrayInput `pulumi:"samlApplications"`
}

func (ProjectApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplications)(nil)).Elem()
}

func (i ProjectApplicationsArgs) ToProjectApplicationsOutput() ProjectApplicationsOutput {
	return i.ToProjectApplicationsOutputWithContext(context.Background())
}

func (i ProjectApplicationsArgs) ToProjectApplicationsOutputWithContext(ctx context.Context) ProjectApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsOutput)
}

func (i ProjectApplicationsArgs) ToProjectApplicationsPtrOutput() ProjectApplicationsPtrOutput {
	return i.ToProjectApplicationsPtrOutputWithContext(context.Background())
}

func (i ProjectApplicationsArgs) ToProjectApplicationsPtrOutputWithContext(ctx context.Context) ProjectApplicationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsOutput).ToProjectApplicationsPtrOutputWithContext(ctx)
}

// ProjectApplicationsPtrInput is an input type that accepts ProjectApplicationsArgs, ProjectApplicationsPtr and ProjectApplicationsPtrOutput values.
// You can construct a concrete instance of `ProjectApplicationsPtrInput` via:
//
//	        ProjectApplicationsArgs{...}
//
//	or:
//
//	        nil
type ProjectApplicationsPtrInput interface {
	pulumi.Input

	ToProjectApplicationsPtrOutput() ProjectApplicationsPtrOutput
	ToProjectApplicationsPtrOutputWithContext(context.Context) ProjectApplicationsPtrOutput
}

type projectApplicationsPtrType ProjectApplicationsArgs

func ProjectApplicationsPtr(v *ProjectApplicationsArgs) ProjectApplicationsPtrInput {
	return (*projectApplicationsPtrType)(v)
}

func (*projectApplicationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplications)(nil)).Elem()
}

func (i *projectApplicationsPtrType) ToProjectApplicationsPtrOutput() ProjectApplicationsPtrOutput {
	return i.ToProjectApplicationsPtrOutputWithContext(context.Background())
}

func (i *projectApplicationsPtrType) ToProjectApplicationsPtrOutputWithContext(ctx context.Context) ProjectApplicationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsPtrOutput)
}

type ProjectApplicationsOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplications)(nil)).Elem()
}

func (o ProjectApplicationsOutput) ToProjectApplicationsOutput() ProjectApplicationsOutput {
	return o
}

func (o ProjectApplicationsOutput) ToProjectApplicationsOutputWithContext(ctx context.Context) ProjectApplicationsOutput {
	return o
}

func (o ProjectApplicationsOutput) ToProjectApplicationsPtrOutput() ProjectApplicationsPtrOutput {
	return o.ToProjectApplicationsPtrOutputWithContext(context.Background())
}

func (o ProjectApplicationsOutput) ToProjectApplicationsPtrOutputWithContext(ctx context.Context) ProjectApplicationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectApplications) *ProjectApplications {
		return &v
	}).(ProjectApplicationsPtrOutput)
}

// Applications using OpenID Connect (OIDC) for authentication.
func (o ProjectApplicationsOutput) OidcApplications() ProjectApplicationsOidcApplicationArrayOutput {
	return o.ApplyT(func(v ProjectApplications) []ProjectApplicationsOidcApplication { return v.OidcApplications }).(ProjectApplicationsOidcApplicationArrayOutput)
}

// Applications using SAML for authentication.
func (o ProjectApplicationsOutput) SamlApplications() ProjectApplicationsSamlApplicationArrayOutput {
	return o.ApplyT(func(v ProjectApplications) []ProjectApplicationsSamlApplication { return v.SamlApplications }).(ProjectApplicationsSamlApplicationArrayOutput)
}

type ProjectApplicationsPtrOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplications)(nil)).Elem()
}

func (o ProjectApplicationsPtrOutput) ToProjectApplicationsPtrOutput() ProjectApplicationsPtrOutput {
	return o
}

func (o ProjectApplicationsPtrOutput) ToProjectApplicationsPtrOutputWithContext(ctx context.Context) ProjectApplicationsPtrOutput {
	return o
}

func (o ProjectApplicationsPtrOutput) Elem() ProjectApplicationsOutput {
	return o.ApplyT(func(v *ProjectApplications) ProjectApplications {
		if v != nil {
			return *v
		}
		var ret ProjectApplications
		return ret
	}).(ProjectApplicationsOutput)
}

// Applications using OpenID Connect (OIDC) for authentication.
func (o ProjectApplicationsPtrOutput) OidcApplications() ProjectApplicationsOidcApplicationArrayOutput {
	return o.ApplyT(func(v *ProjectApplications) []ProjectApplicationsOidcApplication {
		if v == nil {
			return nil
		}
		return v.OidcApplications
	}).(ProjectApplicationsOidcApplicationArrayOutput)
}

// Applications using SAML for authentication.
func (o ProjectApplicationsPtrOutput) SamlApplications() ProjectApplicationsSamlApplicationArrayOutput {
	return o.ApplyT(func(v *ProjectApplications) []ProjectApplicationsSamlApplication {
		if v == nil {
			return nil
		}
		return v.SamlApplications
	}).(ProjectApplicationsSamlApplicationArrayOutput)
}

type ProjectApplicationsOidcApplication struct {
	// A list of supported claims. e.g. `sub`, `email`, `exp`.
	Claims []string `pulumi:"claims"`
	// A description for the OIDC application.
	Description *string `pulumi:"description"`
	// Whether the application should be enabled or disabled.
	Disabled *bool `pulumi:"disabled"`
	// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
	ForceAuthentication *bool `pulumi:"forceAuthentication"`
	// An optional identifier for the OIDC application.
	Id *string `pulumi:"id"`
	// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	LoginPageUrl *string `pulumi:"loginPageUrl"`
	// A logo for the OIDC application. Should be a hosted image URL.
	Logo *string `pulumi:"logo"`
	// A name for the OIDC application.
	Name string `pulumi:"name"`
}

// ProjectApplicationsOidcApplicationInput is an input type that accepts ProjectApplicationsOidcApplicationArgs and ProjectApplicationsOidcApplicationOutput values.
// You can construct a concrete instance of `ProjectApplicationsOidcApplicationInput` via:
//
//	ProjectApplicationsOidcApplicationArgs{...}
type ProjectApplicationsOidcApplicationInput interface {
	pulumi.Input

	ToProjectApplicationsOidcApplicationOutput() ProjectApplicationsOidcApplicationOutput
	ToProjectApplicationsOidcApplicationOutputWithContext(context.Context) ProjectApplicationsOidcApplicationOutput
}

type ProjectApplicationsOidcApplicationArgs struct {
	// A list of supported claims. e.g. `sub`, `email`, `exp`.
	Claims pulumi.StringArrayInput `pulumi:"claims"`
	// A description for the OIDC application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the application should be enabled or disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
	ForceAuthentication pulumi.BoolPtrInput `pulumi:"forceAuthentication"`
	// An optional identifier for the OIDC application.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	LoginPageUrl pulumi.StringPtrInput `pulumi:"loginPageUrl"`
	// A logo for the OIDC application. Should be a hosted image URL.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// A name for the OIDC application.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectApplicationsOidcApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsOidcApplication)(nil)).Elem()
}

func (i ProjectApplicationsOidcApplicationArgs) ToProjectApplicationsOidcApplicationOutput() ProjectApplicationsOidcApplicationOutput {
	return i.ToProjectApplicationsOidcApplicationOutputWithContext(context.Background())
}

func (i ProjectApplicationsOidcApplicationArgs) ToProjectApplicationsOidcApplicationOutputWithContext(ctx context.Context) ProjectApplicationsOidcApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsOidcApplicationOutput)
}

// ProjectApplicationsOidcApplicationArrayInput is an input type that accepts ProjectApplicationsOidcApplicationArray and ProjectApplicationsOidcApplicationArrayOutput values.
// You can construct a concrete instance of `ProjectApplicationsOidcApplicationArrayInput` via:
//
//	ProjectApplicationsOidcApplicationArray{ ProjectApplicationsOidcApplicationArgs{...} }
type ProjectApplicationsOidcApplicationArrayInput interface {
	pulumi.Input

	ToProjectApplicationsOidcApplicationArrayOutput() ProjectApplicationsOidcApplicationArrayOutput
	ToProjectApplicationsOidcApplicationArrayOutputWithContext(context.Context) ProjectApplicationsOidcApplicationArrayOutput
}

type ProjectApplicationsOidcApplicationArray []ProjectApplicationsOidcApplicationInput

func (ProjectApplicationsOidcApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsOidcApplication)(nil)).Elem()
}

func (i ProjectApplicationsOidcApplicationArray) ToProjectApplicationsOidcApplicationArrayOutput() ProjectApplicationsOidcApplicationArrayOutput {
	return i.ToProjectApplicationsOidcApplicationArrayOutputWithContext(context.Background())
}

func (i ProjectApplicationsOidcApplicationArray) ToProjectApplicationsOidcApplicationArrayOutputWithContext(ctx context.Context) ProjectApplicationsOidcApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsOidcApplicationArrayOutput)
}

type ProjectApplicationsOidcApplicationOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsOidcApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsOidcApplication)(nil)).Elem()
}

func (o ProjectApplicationsOidcApplicationOutput) ToProjectApplicationsOidcApplicationOutput() ProjectApplicationsOidcApplicationOutput {
	return o
}

func (o ProjectApplicationsOidcApplicationOutput) ToProjectApplicationsOidcApplicationOutputWithContext(ctx context.Context) ProjectApplicationsOidcApplicationOutput {
	return o
}

// A list of supported claims. e.g. `sub`, `email`, `exp`.
func (o ProjectApplicationsOidcApplicationOutput) Claims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) []string { return v.Claims }).(pulumi.StringArrayOutput)
}

// A description for the OIDC application.
func (o ProjectApplicationsOidcApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the application should be enabled or disabled.
func (o ProjectApplicationsOidcApplicationOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
func (o ProjectApplicationsOidcApplicationOutput) ForceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *bool { return v.ForceAuthentication }).(pulumi.BoolPtrOutput)
}

// An optional identifier for the OIDC application.
func (o ProjectApplicationsOidcApplicationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
func (o ProjectApplicationsOidcApplicationOutput) LoginPageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *string { return v.LoginPageUrl }).(pulumi.StringPtrOutput)
}

// A logo for the OIDC application. Should be a hosted image URL.
func (o ProjectApplicationsOidcApplicationOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// A name for the OIDC application.
func (o ProjectApplicationsOidcApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsOidcApplication) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectApplicationsOidcApplicationArrayOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsOidcApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsOidcApplication)(nil)).Elem()
}

func (o ProjectApplicationsOidcApplicationArrayOutput) ToProjectApplicationsOidcApplicationArrayOutput() ProjectApplicationsOidcApplicationArrayOutput {
	return o
}

func (o ProjectApplicationsOidcApplicationArrayOutput) ToProjectApplicationsOidcApplicationArrayOutputWithContext(ctx context.Context) ProjectApplicationsOidcApplicationArrayOutput {
	return o
}

func (o ProjectApplicationsOidcApplicationArrayOutput) Index(i pulumi.IntInput) ProjectApplicationsOidcApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectApplicationsOidcApplication {
		return vs[0].([]ProjectApplicationsOidcApplication)[vs[1].(int)]
	}).(ProjectApplicationsOidcApplicationOutput)
}

type ProjectApplicationsSamlApplication struct {
	// A list of allowed ACS callback URLS. This configuration is used when the default ACS URL value is unreachable. Supports wildcards.
	AcsAllowedCallbackUrls []string `pulumi:"acsAllowedCallbackUrls"`
	// The `AttributeMapping` object. Read the description below.
	AttributeMappings []ProjectApplicationsSamlApplicationAttributeMapping `pulumi:"attributeMappings"`
	// The default relay state. When using IdP-initiated authentication, this value may be used as a URL to a resource in the Service Provider.
	DefaultRelayState *string `pulumi:"defaultRelayState"`
	// A description for the SAML application.
	Description *string `pulumi:"description"`
	// Whether the application should be enabled or disabled.
	Disabled *bool `pulumi:"disabled"`
	// The `DynamicConfiguration` object. Read the description below.
	DynamicConfiguration *ProjectApplicationsSamlApplicationDynamicConfiguration `pulumi:"dynamicConfiguration"`
	// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
	ForceAuthentication *bool `pulumi:"forceAuthentication"`
	// An optional identifier for the SAML application.
	Id *string `pulumi:"id"`
	// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	LoginPageUrl *string `pulumi:"loginPageUrl"`
	// A logo for the SAML application. Should be a hosted image URL.
	Logo *string `pulumi:"logo"`
	// The `ManualConfiguration` object. Read the description below.
	ManualConfiguration *ProjectApplicationsSamlApplicationManualConfiguration `pulumi:"manualConfiguration"`
	// A name for the SAML application.
	Name string `pulumi:"name"`
	// The subject name id format. Choose one of "", "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	SubjectNameIdFormat *string `pulumi:"subjectNameIdFormat"`
	// The subject name id type. Choose one of "", "email", "phone". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	SubjectNameIdType *string `pulumi:"subjectNameIdType"`
}

// ProjectApplicationsSamlApplicationInput is an input type that accepts ProjectApplicationsSamlApplicationArgs and ProjectApplicationsSamlApplicationOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationInput` via:
//
//	ProjectApplicationsSamlApplicationArgs{...}
type ProjectApplicationsSamlApplicationInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationOutput() ProjectApplicationsSamlApplicationOutput
	ToProjectApplicationsSamlApplicationOutputWithContext(context.Context) ProjectApplicationsSamlApplicationOutput
}

type ProjectApplicationsSamlApplicationArgs struct {
	// A list of allowed ACS callback URLS. This configuration is used when the default ACS URL value is unreachable. Supports wildcards.
	AcsAllowedCallbackUrls pulumi.StringArrayInput `pulumi:"acsAllowedCallbackUrls"`
	// The `AttributeMapping` object. Read the description below.
	AttributeMappings ProjectApplicationsSamlApplicationAttributeMappingArrayInput `pulumi:"attributeMappings"`
	// The default relay state. When using IdP-initiated authentication, this value may be used as a URL to a resource in the Service Provider.
	DefaultRelayState pulumi.StringPtrInput `pulumi:"defaultRelayState"`
	// A description for the SAML application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the application should be enabled or disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The `DynamicConfiguration` object. Read the description below.
	DynamicConfiguration ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput `pulumi:"dynamicConfiguration"`
	// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
	ForceAuthentication pulumi.BoolPtrInput `pulumi:"forceAuthentication"`
	// An optional identifier for the SAML application.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	LoginPageUrl pulumi.StringPtrInput `pulumi:"loginPageUrl"`
	// A logo for the SAML application. Should be a hosted image URL.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// The `ManualConfiguration` object. Read the description below.
	ManualConfiguration ProjectApplicationsSamlApplicationManualConfigurationPtrInput `pulumi:"manualConfiguration"`
	// A name for the SAML application.
	Name pulumi.StringInput `pulumi:"name"`
	// The subject name id format. Choose one of "", "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	SubjectNameIdFormat pulumi.StringPtrInput `pulumi:"subjectNameIdFormat"`
	// The subject name id type. Choose one of "", "email", "phone". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
	SubjectNameIdType pulumi.StringPtrInput `pulumi:"subjectNameIdType"`
}

func (ProjectApplicationsSamlApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplication)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationArgs) ToProjectApplicationsSamlApplicationOutput() ProjectApplicationsSamlApplicationOutput {
	return i.ToProjectApplicationsSamlApplicationOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationArgs) ToProjectApplicationsSamlApplicationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationOutput)
}

// ProjectApplicationsSamlApplicationArrayInput is an input type that accepts ProjectApplicationsSamlApplicationArray and ProjectApplicationsSamlApplicationArrayOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationArrayInput` via:
//
//	ProjectApplicationsSamlApplicationArray{ ProjectApplicationsSamlApplicationArgs{...} }
type ProjectApplicationsSamlApplicationArrayInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationArrayOutput() ProjectApplicationsSamlApplicationArrayOutput
	ToProjectApplicationsSamlApplicationArrayOutputWithContext(context.Context) ProjectApplicationsSamlApplicationArrayOutput
}

type ProjectApplicationsSamlApplicationArray []ProjectApplicationsSamlApplicationInput

func (ProjectApplicationsSamlApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsSamlApplication)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationArray) ToProjectApplicationsSamlApplicationArrayOutput() ProjectApplicationsSamlApplicationArrayOutput {
	return i.ToProjectApplicationsSamlApplicationArrayOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationArray) ToProjectApplicationsSamlApplicationArrayOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationArrayOutput)
}

type ProjectApplicationsSamlApplicationOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplication)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationOutput) ToProjectApplicationsSamlApplicationOutput() ProjectApplicationsSamlApplicationOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationOutput) ToProjectApplicationsSamlApplicationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationOutput {
	return o
}

// A list of allowed ACS callback URLS. This configuration is used when the default ACS URL value is unreachable. Supports wildcards.
func (o ProjectApplicationsSamlApplicationOutput) AcsAllowedCallbackUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) []string { return v.AcsAllowedCallbackUrls }).(pulumi.StringArrayOutput)
}

// The `AttributeMapping` object. Read the description below.
func (o ProjectApplicationsSamlApplicationOutput) AttributeMappings() ProjectApplicationsSamlApplicationAttributeMappingArrayOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) []ProjectApplicationsSamlApplicationAttributeMapping {
		return v.AttributeMappings
	}).(ProjectApplicationsSamlApplicationAttributeMappingArrayOutput)
}

// The default relay state. When using IdP-initiated authentication, this value may be used as a URL to a resource in the Service Provider.
func (o ProjectApplicationsSamlApplicationOutput) DefaultRelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.DefaultRelayState }).(pulumi.StringPtrOutput)
}

// A description for the SAML application.
func (o ProjectApplicationsSamlApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the application should be enabled or disabled.
func (o ProjectApplicationsSamlApplicationOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The `DynamicConfiguration` object. Read the description below.
func (o ProjectApplicationsSamlApplicationOutput) DynamicConfiguration() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *ProjectApplicationsSamlApplicationDynamicConfiguration {
		return v.DynamicConfiguration
	}).(ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput)
}

// This configuration overrides the default behavior of the SSO application and forces the user to authenticate via the Descope flow, regardless of the SP's request.
func (o ProjectApplicationsSamlApplicationOutput) ForceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *bool { return v.ForceAuthentication }).(pulumi.BoolPtrOutput)
}

// An optional identifier for the SAML application.
func (o ProjectApplicationsSamlApplicationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Flow Hosting URL. Read more about using this parameter with custom domain [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
func (o ProjectApplicationsSamlApplicationOutput) LoginPageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.LoginPageUrl }).(pulumi.StringPtrOutput)
}

// A logo for the SAML application. Should be a hosted image URL.
func (o ProjectApplicationsSamlApplicationOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// The `ManualConfiguration` object. Read the description below.
func (o ProjectApplicationsSamlApplicationOutput) ManualConfiguration() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *ProjectApplicationsSamlApplicationManualConfiguration {
		return v.ManualConfiguration
	}).(ProjectApplicationsSamlApplicationManualConfigurationPtrOutput)
}

// A name for the SAML application.
func (o ProjectApplicationsSamlApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) string { return v.Name }).(pulumi.StringOutput)
}

// The subject name id format. Choose one of "", "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
func (o ProjectApplicationsSamlApplicationOutput) SubjectNameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.SubjectNameIdFormat }).(pulumi.StringPtrOutput)
}

// The subject name id type. Choose one of "", "email", "phone". Read more about this configuration [here](https://docs.descope.com/sso-integrations/applications/saml-apps).
func (o ProjectApplicationsSamlApplicationOutput) SubjectNameIdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplication) *string { return v.SubjectNameIdType }).(pulumi.StringPtrOutput)
}

type ProjectApplicationsSamlApplicationArrayOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsSamlApplication)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationArrayOutput) ToProjectApplicationsSamlApplicationArrayOutput() ProjectApplicationsSamlApplicationArrayOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationArrayOutput) ToProjectApplicationsSamlApplicationArrayOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationArrayOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationArrayOutput) Index(i pulumi.IntInput) ProjectApplicationsSamlApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectApplicationsSamlApplication {
		return vs[0].([]ProjectApplicationsSamlApplication)[vs[1].(int)]
	}).(ProjectApplicationsSamlApplicationOutput)
}

type ProjectApplicationsSamlApplicationAttributeMapping struct {
	// The name of the attribute.
	Name string `pulumi:"name"`
	// The value of the attribute.
	Value string `pulumi:"value"`
}

// ProjectApplicationsSamlApplicationAttributeMappingInput is an input type that accepts ProjectApplicationsSamlApplicationAttributeMappingArgs and ProjectApplicationsSamlApplicationAttributeMappingOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationAttributeMappingInput` via:
//
//	ProjectApplicationsSamlApplicationAttributeMappingArgs{...}
type ProjectApplicationsSamlApplicationAttributeMappingInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationAttributeMappingOutput() ProjectApplicationsSamlApplicationAttributeMappingOutput
	ToProjectApplicationsSamlApplicationAttributeMappingOutputWithContext(context.Context) ProjectApplicationsSamlApplicationAttributeMappingOutput
}

type ProjectApplicationsSamlApplicationAttributeMappingArgs struct {
	// The name of the attribute.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the attribute.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectApplicationsSamlApplicationAttributeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationAttributeMapping)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationAttributeMappingArgs) ToProjectApplicationsSamlApplicationAttributeMappingOutput() ProjectApplicationsSamlApplicationAttributeMappingOutput {
	return i.ToProjectApplicationsSamlApplicationAttributeMappingOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationAttributeMappingArgs) ToProjectApplicationsSamlApplicationAttributeMappingOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationAttributeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationAttributeMappingOutput)
}

// ProjectApplicationsSamlApplicationAttributeMappingArrayInput is an input type that accepts ProjectApplicationsSamlApplicationAttributeMappingArray and ProjectApplicationsSamlApplicationAttributeMappingArrayOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationAttributeMappingArrayInput` via:
//
//	ProjectApplicationsSamlApplicationAttributeMappingArray{ ProjectApplicationsSamlApplicationAttributeMappingArgs{...} }
type ProjectApplicationsSamlApplicationAttributeMappingArrayInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationAttributeMappingArrayOutput() ProjectApplicationsSamlApplicationAttributeMappingArrayOutput
	ToProjectApplicationsSamlApplicationAttributeMappingArrayOutputWithContext(context.Context) ProjectApplicationsSamlApplicationAttributeMappingArrayOutput
}

type ProjectApplicationsSamlApplicationAttributeMappingArray []ProjectApplicationsSamlApplicationAttributeMappingInput

func (ProjectApplicationsSamlApplicationAttributeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsSamlApplicationAttributeMapping)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationAttributeMappingArray) ToProjectApplicationsSamlApplicationAttributeMappingArrayOutput() ProjectApplicationsSamlApplicationAttributeMappingArrayOutput {
	return i.ToProjectApplicationsSamlApplicationAttributeMappingArrayOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationAttributeMappingArray) ToProjectApplicationsSamlApplicationAttributeMappingArrayOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationAttributeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationAttributeMappingArrayOutput)
}

type ProjectApplicationsSamlApplicationAttributeMappingOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationAttributeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationAttributeMapping)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationAttributeMappingOutput) ToProjectApplicationsSamlApplicationAttributeMappingOutput() ProjectApplicationsSamlApplicationAttributeMappingOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationAttributeMappingOutput) ToProjectApplicationsSamlApplicationAttributeMappingOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationAttributeMappingOutput {
	return o
}

// The name of the attribute.
func (o ProjectApplicationsSamlApplicationAttributeMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationAttributeMapping) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the attribute.
func (o ProjectApplicationsSamlApplicationAttributeMappingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationAttributeMapping) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectApplicationsSamlApplicationAttributeMappingArrayOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationAttributeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectApplicationsSamlApplicationAttributeMapping)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationAttributeMappingArrayOutput) ToProjectApplicationsSamlApplicationAttributeMappingArrayOutput() ProjectApplicationsSamlApplicationAttributeMappingArrayOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationAttributeMappingArrayOutput) ToProjectApplicationsSamlApplicationAttributeMappingArrayOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationAttributeMappingArrayOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationAttributeMappingArrayOutput) Index(i pulumi.IntInput) ProjectApplicationsSamlApplicationAttributeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectApplicationsSamlApplicationAttributeMapping {
		return vs[0].([]ProjectApplicationsSamlApplicationAttributeMapping)[vs[1].(int)]
	}).(ProjectApplicationsSamlApplicationAttributeMappingOutput)
}

type ProjectApplicationsSamlApplicationDynamicConfiguration struct {
	// The metadata URL when retrieving the connection details dynamically.
	MetadataUrl string `pulumi:"metadataUrl"`
}

// ProjectApplicationsSamlApplicationDynamicConfigurationInput is an input type that accepts ProjectApplicationsSamlApplicationDynamicConfigurationArgs and ProjectApplicationsSamlApplicationDynamicConfigurationOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationDynamicConfigurationInput` via:
//
//	ProjectApplicationsSamlApplicationDynamicConfigurationArgs{...}
type ProjectApplicationsSamlApplicationDynamicConfigurationInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationDynamicConfigurationOutput() ProjectApplicationsSamlApplicationDynamicConfigurationOutput
	ToProjectApplicationsSamlApplicationDynamicConfigurationOutputWithContext(context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationOutput
}

type ProjectApplicationsSamlApplicationDynamicConfigurationArgs struct {
	// The metadata URL when retrieving the connection details dynamically.
	MetadataUrl pulumi.StringInput `pulumi:"metadataUrl"`
}

func (ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationDynamicConfiguration)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ToProjectApplicationsSamlApplicationDynamicConfigurationOutput() ProjectApplicationsSamlApplicationDynamicConfigurationOutput {
	return i.ToProjectApplicationsSamlApplicationDynamicConfigurationOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ToProjectApplicationsSamlApplicationDynamicConfigurationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationDynamicConfigurationOutput)
}

func (i ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return i.ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationDynamicConfigurationOutput).ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(ctx)
}

// ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput is an input type that accepts ProjectApplicationsSamlApplicationDynamicConfigurationArgs, ProjectApplicationsSamlApplicationDynamicConfigurationPtr and ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput` via:
//
//	        ProjectApplicationsSamlApplicationDynamicConfigurationArgs{...}
//
//	or:
//
//	        nil
type ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput
	ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput
}

type projectApplicationsSamlApplicationDynamicConfigurationPtrType ProjectApplicationsSamlApplicationDynamicConfigurationArgs

func ProjectApplicationsSamlApplicationDynamicConfigurationPtr(v *ProjectApplicationsSamlApplicationDynamicConfigurationArgs) ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput {
	return (*projectApplicationsSamlApplicationDynamicConfigurationPtrType)(v)
}

func (*projectApplicationsSamlApplicationDynamicConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplicationsSamlApplicationDynamicConfiguration)(nil)).Elem()
}

func (i *projectApplicationsSamlApplicationDynamicConfigurationPtrType) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return i.ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(context.Background())
}

func (i *projectApplicationsSamlApplicationDynamicConfigurationPtrType) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput)
}

type ProjectApplicationsSamlApplicationDynamicConfigurationOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationDynamicConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationDynamicConfiguration)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationOutput() ProjectApplicationsSamlApplicationDynamicConfigurationOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return o.ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(context.Background())
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectApplicationsSamlApplicationDynamicConfiguration) *ProjectApplicationsSamlApplicationDynamicConfiguration {
		return &v
	}).(ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput)
}

// The metadata URL when retrieving the connection details dynamically.
func (o ProjectApplicationsSamlApplicationDynamicConfigurationOutput) MetadataUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationDynamicConfiguration) string { return v.MetadataUrl }).(pulumi.StringOutput)
}

type ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplicationsSamlApplicationDynamicConfiguration)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput() ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput) ToProjectApplicationsSamlApplicationDynamicConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput) Elem() ProjectApplicationsSamlApplicationDynamicConfigurationOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationDynamicConfiguration) ProjectApplicationsSamlApplicationDynamicConfiguration {
		if v != nil {
			return *v
		}
		var ret ProjectApplicationsSamlApplicationDynamicConfiguration
		return ret
	}).(ProjectApplicationsSamlApplicationDynamicConfigurationOutput)
}

// The metadata URL when retrieving the connection details dynamically.
func (o ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput) MetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationDynamicConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.MetadataUrl
	}).(pulumi.StringPtrOutput)
}

type ProjectApplicationsSamlApplicationManualConfiguration struct {
	// Enter the `ACS URL` from the SP.
	AcsUrl string `pulumi:"acsUrl"`
	// Enter the `Certificate` from the SP.
	Certificate string `pulumi:"certificate"`
	// Enter the `Entity Id` from the SP.
	EntityId string `pulumi:"entityId"`
}

// ProjectApplicationsSamlApplicationManualConfigurationInput is an input type that accepts ProjectApplicationsSamlApplicationManualConfigurationArgs and ProjectApplicationsSamlApplicationManualConfigurationOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationManualConfigurationInput` via:
//
//	ProjectApplicationsSamlApplicationManualConfigurationArgs{...}
type ProjectApplicationsSamlApplicationManualConfigurationInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationManualConfigurationOutput() ProjectApplicationsSamlApplicationManualConfigurationOutput
	ToProjectApplicationsSamlApplicationManualConfigurationOutputWithContext(context.Context) ProjectApplicationsSamlApplicationManualConfigurationOutput
}

type ProjectApplicationsSamlApplicationManualConfigurationArgs struct {
	// Enter the `ACS URL` from the SP.
	AcsUrl pulumi.StringInput `pulumi:"acsUrl"`
	// Enter the `Certificate` from the SP.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Enter the `Entity Id` from the SP.
	EntityId pulumi.StringInput `pulumi:"entityId"`
}

func (ProjectApplicationsSamlApplicationManualConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationManualConfiguration)(nil)).Elem()
}

func (i ProjectApplicationsSamlApplicationManualConfigurationArgs) ToProjectApplicationsSamlApplicationManualConfigurationOutput() ProjectApplicationsSamlApplicationManualConfigurationOutput {
	return i.ToProjectApplicationsSamlApplicationManualConfigurationOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationManualConfigurationArgs) ToProjectApplicationsSamlApplicationManualConfigurationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationManualConfigurationOutput)
}

func (i ProjectApplicationsSamlApplicationManualConfigurationArgs) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutput() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return i.ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(context.Background())
}

func (i ProjectApplicationsSamlApplicationManualConfigurationArgs) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationManualConfigurationOutput).ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(ctx)
}

// ProjectApplicationsSamlApplicationManualConfigurationPtrInput is an input type that accepts ProjectApplicationsSamlApplicationManualConfigurationArgs, ProjectApplicationsSamlApplicationManualConfigurationPtr and ProjectApplicationsSamlApplicationManualConfigurationPtrOutput values.
// You can construct a concrete instance of `ProjectApplicationsSamlApplicationManualConfigurationPtrInput` via:
//
//	        ProjectApplicationsSamlApplicationManualConfigurationArgs{...}
//
//	or:
//
//	        nil
type ProjectApplicationsSamlApplicationManualConfigurationPtrInput interface {
	pulumi.Input

	ToProjectApplicationsSamlApplicationManualConfigurationPtrOutput() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput
	ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(context.Context) ProjectApplicationsSamlApplicationManualConfigurationPtrOutput
}

type projectApplicationsSamlApplicationManualConfigurationPtrType ProjectApplicationsSamlApplicationManualConfigurationArgs

func ProjectApplicationsSamlApplicationManualConfigurationPtr(v *ProjectApplicationsSamlApplicationManualConfigurationArgs) ProjectApplicationsSamlApplicationManualConfigurationPtrInput {
	return (*projectApplicationsSamlApplicationManualConfigurationPtrType)(v)
}

func (*projectApplicationsSamlApplicationManualConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplicationsSamlApplicationManualConfiguration)(nil)).Elem()
}

func (i *projectApplicationsSamlApplicationManualConfigurationPtrType) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutput() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return i.ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(context.Background())
}

func (i *projectApplicationsSamlApplicationManualConfigurationPtrType) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectApplicationsSamlApplicationManualConfigurationPtrOutput)
}

type ProjectApplicationsSamlApplicationManualConfigurationOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationManualConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectApplicationsSamlApplicationManualConfiguration)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) ToProjectApplicationsSamlApplicationManualConfigurationOutput() ProjectApplicationsSamlApplicationManualConfigurationOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) ToProjectApplicationsSamlApplicationManualConfigurationOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutput() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return o.ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(context.Background())
}

func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectApplicationsSamlApplicationManualConfiguration) *ProjectApplicationsSamlApplicationManualConfiguration {
		return &v
	}).(ProjectApplicationsSamlApplicationManualConfigurationPtrOutput)
}

// Enter the `ACS URL` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) AcsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationManualConfiguration) string { return v.AcsUrl }).(pulumi.StringOutput)
}

// Enter the `Certificate` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationManualConfiguration) string { return v.Certificate }).(pulumi.StringOutput)
}

// Enter the `Entity Id` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectApplicationsSamlApplicationManualConfiguration) string { return v.EntityId }).(pulumi.StringOutput)
}

type ProjectApplicationsSamlApplicationManualConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectApplicationsSamlApplicationManualConfiguration)(nil)).Elem()
}

func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutput() ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) ToProjectApplicationsSamlApplicationManualConfigurationPtrOutputWithContext(ctx context.Context) ProjectApplicationsSamlApplicationManualConfigurationPtrOutput {
	return o
}

func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) Elem() ProjectApplicationsSamlApplicationManualConfigurationOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationManualConfiguration) ProjectApplicationsSamlApplicationManualConfiguration {
		if v != nil {
			return *v
		}
		var ret ProjectApplicationsSamlApplicationManualConfiguration
		return ret
	}).(ProjectApplicationsSamlApplicationManualConfigurationOutput)
}

// Enter the `ACS URL` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) AcsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationManualConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AcsUrl
	}).(pulumi.StringPtrOutput)
}

// Enter the `Certificate` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationManualConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Enter the `Entity Id` from the SP.
func (o ProjectApplicationsSamlApplicationManualConfigurationPtrOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectApplicationsSamlApplicationManualConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.EntityId
	}).(pulumi.StringPtrOutput)
}

type ProjectAttributes struct {
	// A list of `TenantAttribute`. Read the description below.
	Tenants []ProjectAttributesTenant `pulumi:"tenants"`
	// A list of `UserAttribute`. Read the description below.
	Users []ProjectAttributesUser `pulumi:"users"`
}

// ProjectAttributesInput is an input type that accepts ProjectAttributesArgs and ProjectAttributesOutput values.
// You can construct a concrete instance of `ProjectAttributesInput` via:
//
//	ProjectAttributesArgs{...}
type ProjectAttributesInput interface {
	pulumi.Input

	ToProjectAttributesOutput() ProjectAttributesOutput
	ToProjectAttributesOutputWithContext(context.Context) ProjectAttributesOutput
}

type ProjectAttributesArgs struct {
	// A list of `TenantAttribute`. Read the description below.
	Tenants ProjectAttributesTenantArrayInput `pulumi:"tenants"`
	// A list of `UserAttribute`. Read the description below.
	Users ProjectAttributesUserArrayInput `pulumi:"users"`
}

func (ProjectAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributes)(nil)).Elem()
}

func (i ProjectAttributesArgs) ToProjectAttributesOutput() ProjectAttributesOutput {
	return i.ToProjectAttributesOutputWithContext(context.Background())
}

func (i ProjectAttributesArgs) ToProjectAttributesOutputWithContext(ctx context.Context) ProjectAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesOutput)
}

func (i ProjectAttributesArgs) ToProjectAttributesPtrOutput() ProjectAttributesPtrOutput {
	return i.ToProjectAttributesPtrOutputWithContext(context.Background())
}

func (i ProjectAttributesArgs) ToProjectAttributesPtrOutputWithContext(ctx context.Context) ProjectAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesOutput).ToProjectAttributesPtrOutputWithContext(ctx)
}

// ProjectAttributesPtrInput is an input type that accepts ProjectAttributesArgs, ProjectAttributesPtr and ProjectAttributesPtrOutput values.
// You can construct a concrete instance of `ProjectAttributesPtrInput` via:
//
//	        ProjectAttributesArgs{...}
//
//	or:
//
//	        nil
type ProjectAttributesPtrInput interface {
	pulumi.Input

	ToProjectAttributesPtrOutput() ProjectAttributesPtrOutput
	ToProjectAttributesPtrOutputWithContext(context.Context) ProjectAttributesPtrOutput
}

type projectAttributesPtrType ProjectAttributesArgs

func ProjectAttributesPtr(v *ProjectAttributesArgs) ProjectAttributesPtrInput {
	return (*projectAttributesPtrType)(v)
}

func (*projectAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributes)(nil)).Elem()
}

func (i *projectAttributesPtrType) ToProjectAttributesPtrOutput() ProjectAttributesPtrOutput {
	return i.ToProjectAttributesPtrOutputWithContext(context.Background())
}

func (i *projectAttributesPtrType) ToProjectAttributesPtrOutputWithContext(ctx context.Context) ProjectAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesPtrOutput)
}

type ProjectAttributesOutput struct{ *pulumi.OutputState }

func (ProjectAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributes)(nil)).Elem()
}

func (o ProjectAttributesOutput) ToProjectAttributesOutput() ProjectAttributesOutput {
	return o
}

func (o ProjectAttributesOutput) ToProjectAttributesOutputWithContext(ctx context.Context) ProjectAttributesOutput {
	return o
}

func (o ProjectAttributesOutput) ToProjectAttributesPtrOutput() ProjectAttributesPtrOutput {
	return o.ToProjectAttributesPtrOutputWithContext(context.Background())
}

func (o ProjectAttributesOutput) ToProjectAttributesPtrOutputWithContext(ctx context.Context) ProjectAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAttributes) *ProjectAttributes {
		return &v
	}).(ProjectAttributesPtrOutput)
}

// A list of `TenantAttribute`. Read the description below.
func (o ProjectAttributesOutput) Tenants() ProjectAttributesTenantArrayOutput {
	return o.ApplyT(func(v ProjectAttributes) []ProjectAttributesTenant { return v.Tenants }).(ProjectAttributesTenantArrayOutput)
}

// A list of `UserAttribute`. Read the description below.
func (o ProjectAttributesOutput) Users() ProjectAttributesUserArrayOutput {
	return o.ApplyT(func(v ProjectAttributes) []ProjectAttributesUser { return v.Users }).(ProjectAttributesUserArrayOutput)
}

type ProjectAttributesPtrOutput struct{ *pulumi.OutputState }

func (ProjectAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributes)(nil)).Elem()
}

func (o ProjectAttributesPtrOutput) ToProjectAttributesPtrOutput() ProjectAttributesPtrOutput {
	return o
}

func (o ProjectAttributesPtrOutput) ToProjectAttributesPtrOutputWithContext(ctx context.Context) ProjectAttributesPtrOutput {
	return o
}

func (o ProjectAttributesPtrOutput) Elem() ProjectAttributesOutput {
	return o.ApplyT(func(v *ProjectAttributes) ProjectAttributes {
		if v != nil {
			return *v
		}
		var ret ProjectAttributes
		return ret
	}).(ProjectAttributesOutput)
}

// A list of `TenantAttribute`. Read the description below.
func (o ProjectAttributesPtrOutput) Tenants() ProjectAttributesTenantArrayOutput {
	return o.ApplyT(func(v *ProjectAttributes) []ProjectAttributesTenant {
		if v == nil {
			return nil
		}
		return v.Tenants
	}).(ProjectAttributesTenantArrayOutput)
}

// A list of `UserAttribute`. Read the description below.
func (o ProjectAttributesPtrOutput) Users() ProjectAttributesUserArrayOutput {
	return o.ApplyT(func(v *ProjectAttributes) []ProjectAttributesUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(ProjectAttributesUserArrayOutput)
}

type ProjectAttributesTenant struct {
	// Determines the required permissions for this tenant.
	Authorization *ProjectAttributesTenantAuthorization `pulumi:"authorization"`
	// The name of the attribute.
	Name string `pulumi:"name"`
	// When the attribute type is "multiselect". A list of options to choose from.
	SelectOptions []string `pulumi:"selectOptions"`
	// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
	Type string `pulumi:"type"`
}

// ProjectAttributesTenantInput is an input type that accepts ProjectAttributesTenantArgs and ProjectAttributesTenantOutput values.
// You can construct a concrete instance of `ProjectAttributesTenantInput` via:
//
//	ProjectAttributesTenantArgs{...}
type ProjectAttributesTenantInput interface {
	pulumi.Input

	ToProjectAttributesTenantOutput() ProjectAttributesTenantOutput
	ToProjectAttributesTenantOutputWithContext(context.Context) ProjectAttributesTenantOutput
}

type ProjectAttributesTenantArgs struct {
	// Determines the required permissions for this tenant.
	Authorization ProjectAttributesTenantAuthorizationPtrInput `pulumi:"authorization"`
	// The name of the attribute.
	Name pulumi.StringInput `pulumi:"name"`
	// When the attribute type is "multiselect". A list of options to choose from.
	SelectOptions pulumi.StringArrayInput `pulumi:"selectOptions"`
	// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectAttributesTenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesTenant)(nil)).Elem()
}

func (i ProjectAttributesTenantArgs) ToProjectAttributesTenantOutput() ProjectAttributesTenantOutput {
	return i.ToProjectAttributesTenantOutputWithContext(context.Background())
}

func (i ProjectAttributesTenantArgs) ToProjectAttributesTenantOutputWithContext(ctx context.Context) ProjectAttributesTenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesTenantOutput)
}

// ProjectAttributesTenantArrayInput is an input type that accepts ProjectAttributesTenantArray and ProjectAttributesTenantArrayOutput values.
// You can construct a concrete instance of `ProjectAttributesTenantArrayInput` via:
//
//	ProjectAttributesTenantArray{ ProjectAttributesTenantArgs{...} }
type ProjectAttributesTenantArrayInput interface {
	pulumi.Input

	ToProjectAttributesTenantArrayOutput() ProjectAttributesTenantArrayOutput
	ToProjectAttributesTenantArrayOutputWithContext(context.Context) ProjectAttributesTenantArrayOutput
}

type ProjectAttributesTenantArray []ProjectAttributesTenantInput

func (ProjectAttributesTenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAttributesTenant)(nil)).Elem()
}

func (i ProjectAttributesTenantArray) ToProjectAttributesTenantArrayOutput() ProjectAttributesTenantArrayOutput {
	return i.ToProjectAttributesTenantArrayOutputWithContext(context.Background())
}

func (i ProjectAttributesTenantArray) ToProjectAttributesTenantArrayOutputWithContext(ctx context.Context) ProjectAttributesTenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesTenantArrayOutput)
}

type ProjectAttributesTenantOutput struct{ *pulumi.OutputState }

func (ProjectAttributesTenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesTenant)(nil)).Elem()
}

func (o ProjectAttributesTenantOutput) ToProjectAttributesTenantOutput() ProjectAttributesTenantOutput {
	return o
}

func (o ProjectAttributesTenantOutput) ToProjectAttributesTenantOutputWithContext(ctx context.Context) ProjectAttributesTenantOutput {
	return o
}

// Determines the required permissions for this tenant.
func (o ProjectAttributesTenantOutput) Authorization() ProjectAttributesTenantAuthorizationPtrOutput {
	return o.ApplyT(func(v ProjectAttributesTenant) *ProjectAttributesTenantAuthorization { return v.Authorization }).(ProjectAttributesTenantAuthorizationPtrOutput)
}

// The name of the attribute.
func (o ProjectAttributesTenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAttributesTenant) string { return v.Name }).(pulumi.StringOutput)
}

// When the attribute type is "multiselect". A list of options to choose from.
func (o ProjectAttributesTenantOutput) SelectOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAttributesTenant) []string { return v.SelectOptions }).(pulumi.StringArrayOutput)
}

// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
func (o ProjectAttributesTenantOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAttributesTenant) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectAttributesTenantArrayOutput struct{ *pulumi.OutputState }

func (ProjectAttributesTenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAttributesTenant)(nil)).Elem()
}

func (o ProjectAttributesTenantArrayOutput) ToProjectAttributesTenantArrayOutput() ProjectAttributesTenantArrayOutput {
	return o
}

func (o ProjectAttributesTenantArrayOutput) ToProjectAttributesTenantArrayOutputWithContext(ctx context.Context) ProjectAttributesTenantArrayOutput {
	return o
}

func (o ProjectAttributesTenantArrayOutput) Index(i pulumi.IntInput) ProjectAttributesTenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAttributesTenant {
		return vs[0].([]ProjectAttributesTenant)[vs[1].(int)]
	}).(ProjectAttributesTenantOutput)
}

type ProjectAttributesTenantAuthorization struct {
	// Determines the required permissions for this tenant.
	ViewPermissions []string `pulumi:"viewPermissions"`
}

// ProjectAttributesTenantAuthorizationInput is an input type that accepts ProjectAttributesTenantAuthorizationArgs and ProjectAttributesTenantAuthorizationOutput values.
// You can construct a concrete instance of `ProjectAttributesTenantAuthorizationInput` via:
//
//	ProjectAttributesTenantAuthorizationArgs{...}
type ProjectAttributesTenantAuthorizationInput interface {
	pulumi.Input

	ToProjectAttributesTenantAuthorizationOutput() ProjectAttributesTenantAuthorizationOutput
	ToProjectAttributesTenantAuthorizationOutputWithContext(context.Context) ProjectAttributesTenantAuthorizationOutput
}

type ProjectAttributesTenantAuthorizationArgs struct {
	// Determines the required permissions for this tenant.
	ViewPermissions pulumi.StringArrayInput `pulumi:"viewPermissions"`
}

func (ProjectAttributesTenantAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesTenantAuthorization)(nil)).Elem()
}

func (i ProjectAttributesTenantAuthorizationArgs) ToProjectAttributesTenantAuthorizationOutput() ProjectAttributesTenantAuthorizationOutput {
	return i.ToProjectAttributesTenantAuthorizationOutputWithContext(context.Background())
}

func (i ProjectAttributesTenantAuthorizationArgs) ToProjectAttributesTenantAuthorizationOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesTenantAuthorizationOutput)
}

func (i ProjectAttributesTenantAuthorizationArgs) ToProjectAttributesTenantAuthorizationPtrOutput() ProjectAttributesTenantAuthorizationPtrOutput {
	return i.ToProjectAttributesTenantAuthorizationPtrOutputWithContext(context.Background())
}

func (i ProjectAttributesTenantAuthorizationArgs) ToProjectAttributesTenantAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesTenantAuthorizationOutput).ToProjectAttributesTenantAuthorizationPtrOutputWithContext(ctx)
}

// ProjectAttributesTenantAuthorizationPtrInput is an input type that accepts ProjectAttributesTenantAuthorizationArgs, ProjectAttributesTenantAuthorizationPtr and ProjectAttributesTenantAuthorizationPtrOutput values.
// You can construct a concrete instance of `ProjectAttributesTenantAuthorizationPtrInput` via:
//
//	        ProjectAttributesTenantAuthorizationArgs{...}
//
//	or:
//
//	        nil
type ProjectAttributesTenantAuthorizationPtrInput interface {
	pulumi.Input

	ToProjectAttributesTenantAuthorizationPtrOutput() ProjectAttributesTenantAuthorizationPtrOutput
	ToProjectAttributesTenantAuthorizationPtrOutputWithContext(context.Context) ProjectAttributesTenantAuthorizationPtrOutput
}

type projectAttributesTenantAuthorizationPtrType ProjectAttributesTenantAuthorizationArgs

func ProjectAttributesTenantAuthorizationPtr(v *ProjectAttributesTenantAuthorizationArgs) ProjectAttributesTenantAuthorizationPtrInput {
	return (*projectAttributesTenantAuthorizationPtrType)(v)
}

func (*projectAttributesTenantAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributesTenantAuthorization)(nil)).Elem()
}

func (i *projectAttributesTenantAuthorizationPtrType) ToProjectAttributesTenantAuthorizationPtrOutput() ProjectAttributesTenantAuthorizationPtrOutput {
	return i.ToProjectAttributesTenantAuthorizationPtrOutputWithContext(context.Background())
}

func (i *projectAttributesTenantAuthorizationPtrType) ToProjectAttributesTenantAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesTenantAuthorizationPtrOutput)
}

type ProjectAttributesTenantAuthorizationOutput struct{ *pulumi.OutputState }

func (ProjectAttributesTenantAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesTenantAuthorization)(nil)).Elem()
}

func (o ProjectAttributesTenantAuthorizationOutput) ToProjectAttributesTenantAuthorizationOutput() ProjectAttributesTenantAuthorizationOutput {
	return o
}

func (o ProjectAttributesTenantAuthorizationOutput) ToProjectAttributesTenantAuthorizationOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationOutput {
	return o
}

func (o ProjectAttributesTenantAuthorizationOutput) ToProjectAttributesTenantAuthorizationPtrOutput() ProjectAttributesTenantAuthorizationPtrOutput {
	return o.ToProjectAttributesTenantAuthorizationPtrOutputWithContext(context.Background())
}

func (o ProjectAttributesTenantAuthorizationOutput) ToProjectAttributesTenantAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAttributesTenantAuthorization) *ProjectAttributesTenantAuthorization {
		return &v
	}).(ProjectAttributesTenantAuthorizationPtrOutput)
}

// Determines the required permissions for this tenant.
func (o ProjectAttributesTenantAuthorizationOutput) ViewPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAttributesTenantAuthorization) []string { return v.ViewPermissions }).(pulumi.StringArrayOutput)
}

type ProjectAttributesTenantAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (ProjectAttributesTenantAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributesTenantAuthorization)(nil)).Elem()
}

func (o ProjectAttributesTenantAuthorizationPtrOutput) ToProjectAttributesTenantAuthorizationPtrOutput() ProjectAttributesTenantAuthorizationPtrOutput {
	return o
}

func (o ProjectAttributesTenantAuthorizationPtrOutput) ToProjectAttributesTenantAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesTenantAuthorizationPtrOutput {
	return o
}

func (o ProjectAttributesTenantAuthorizationPtrOutput) Elem() ProjectAttributesTenantAuthorizationOutput {
	return o.ApplyT(func(v *ProjectAttributesTenantAuthorization) ProjectAttributesTenantAuthorization {
		if v != nil {
			return *v
		}
		var ret ProjectAttributesTenantAuthorization
		return ret
	}).(ProjectAttributesTenantAuthorizationOutput)
}

// Determines the required permissions for this tenant.
func (o ProjectAttributesTenantAuthorizationPtrOutput) ViewPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAttributesTenantAuthorization) []string {
		if v == nil {
			return nil
		}
		return v.ViewPermissions
	}).(pulumi.StringArrayOutput)
}

type ProjectAttributesUser struct {
	// The name of the attribute.
	Name string `pulumi:"name"`
	// When the attribute type is "multiselect". A list of options to choose from.
	SelectOptions []string `pulumi:"selectOptions"`
	// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
	Type string `pulumi:"type"`
	// Determines the permissions users are required to have to access this attribute in the user management widget.
	WidgetAuthorization *ProjectAttributesUserWidgetAuthorization `pulumi:"widgetAuthorization"`
}

// ProjectAttributesUserInput is an input type that accepts ProjectAttributesUserArgs and ProjectAttributesUserOutput values.
// You can construct a concrete instance of `ProjectAttributesUserInput` via:
//
//	ProjectAttributesUserArgs{...}
type ProjectAttributesUserInput interface {
	pulumi.Input

	ToProjectAttributesUserOutput() ProjectAttributesUserOutput
	ToProjectAttributesUserOutputWithContext(context.Context) ProjectAttributesUserOutput
}

type ProjectAttributesUserArgs struct {
	// The name of the attribute.
	Name pulumi.StringInput `pulumi:"name"`
	// When the attribute type is "multiselect". A list of options to choose from.
	SelectOptions pulumi.StringArrayInput `pulumi:"selectOptions"`
	// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
	Type pulumi.StringInput `pulumi:"type"`
	// Determines the permissions users are required to have to access this attribute in the user management widget.
	WidgetAuthorization ProjectAttributesUserWidgetAuthorizationPtrInput `pulumi:"widgetAuthorization"`
}

func (ProjectAttributesUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesUser)(nil)).Elem()
}

func (i ProjectAttributesUserArgs) ToProjectAttributesUserOutput() ProjectAttributesUserOutput {
	return i.ToProjectAttributesUserOutputWithContext(context.Background())
}

func (i ProjectAttributesUserArgs) ToProjectAttributesUserOutputWithContext(ctx context.Context) ProjectAttributesUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesUserOutput)
}

// ProjectAttributesUserArrayInput is an input type that accepts ProjectAttributesUserArray and ProjectAttributesUserArrayOutput values.
// You can construct a concrete instance of `ProjectAttributesUserArrayInput` via:
//
//	ProjectAttributesUserArray{ ProjectAttributesUserArgs{...} }
type ProjectAttributesUserArrayInput interface {
	pulumi.Input

	ToProjectAttributesUserArrayOutput() ProjectAttributesUserArrayOutput
	ToProjectAttributesUserArrayOutputWithContext(context.Context) ProjectAttributesUserArrayOutput
}

type ProjectAttributesUserArray []ProjectAttributesUserInput

func (ProjectAttributesUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAttributesUser)(nil)).Elem()
}

func (i ProjectAttributesUserArray) ToProjectAttributesUserArrayOutput() ProjectAttributesUserArrayOutput {
	return i.ToProjectAttributesUserArrayOutputWithContext(context.Background())
}

func (i ProjectAttributesUserArray) ToProjectAttributesUserArrayOutputWithContext(ctx context.Context) ProjectAttributesUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesUserArrayOutput)
}

type ProjectAttributesUserOutput struct{ *pulumi.OutputState }

func (ProjectAttributesUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesUser)(nil)).Elem()
}

func (o ProjectAttributesUserOutput) ToProjectAttributesUserOutput() ProjectAttributesUserOutput {
	return o
}

func (o ProjectAttributesUserOutput) ToProjectAttributesUserOutputWithContext(ctx context.Context) ProjectAttributesUserOutput {
	return o
}

// The name of the attribute.
func (o ProjectAttributesUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAttributesUser) string { return v.Name }).(pulumi.StringOutput)
}

// When the attribute type is "multiselect". A list of options to choose from.
func (o ProjectAttributesUserOutput) SelectOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAttributesUser) []string { return v.SelectOptions }).(pulumi.StringArrayOutput)
}

// The type of the attribute. Choose one of "string", "number", "boolean", "singleselect", "multiselect", "date".
func (o ProjectAttributesUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAttributesUser) string { return v.Type }).(pulumi.StringOutput)
}

// Determines the permissions users are required to have to access this attribute in the user management widget.
func (o ProjectAttributesUserOutput) WidgetAuthorization() ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return o.ApplyT(func(v ProjectAttributesUser) *ProjectAttributesUserWidgetAuthorization { return v.WidgetAuthorization }).(ProjectAttributesUserWidgetAuthorizationPtrOutput)
}

type ProjectAttributesUserArrayOutput struct{ *pulumi.OutputState }

func (ProjectAttributesUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAttributesUser)(nil)).Elem()
}

func (o ProjectAttributesUserArrayOutput) ToProjectAttributesUserArrayOutput() ProjectAttributesUserArrayOutput {
	return o
}

func (o ProjectAttributesUserArrayOutput) ToProjectAttributesUserArrayOutputWithContext(ctx context.Context) ProjectAttributesUserArrayOutput {
	return o
}

func (o ProjectAttributesUserArrayOutput) Index(i pulumi.IntInput) ProjectAttributesUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAttributesUser {
		return vs[0].([]ProjectAttributesUser)[vs[1].(int)]
	}).(ProjectAttributesUserOutput)
}

type ProjectAttributesUserWidgetAuthorization struct {
	// The permissions users are required to have to edit this attribute in the user management widget.
	EditPermissions []string `pulumi:"editPermissions"`
	// The permissions users are required to have to view this attribute in the user management widget.
	ViewPermissions []string `pulumi:"viewPermissions"`
}

// ProjectAttributesUserWidgetAuthorizationInput is an input type that accepts ProjectAttributesUserWidgetAuthorizationArgs and ProjectAttributesUserWidgetAuthorizationOutput values.
// You can construct a concrete instance of `ProjectAttributesUserWidgetAuthorizationInput` via:
//
//	ProjectAttributesUserWidgetAuthorizationArgs{...}
type ProjectAttributesUserWidgetAuthorizationInput interface {
	pulumi.Input

	ToProjectAttributesUserWidgetAuthorizationOutput() ProjectAttributesUserWidgetAuthorizationOutput
	ToProjectAttributesUserWidgetAuthorizationOutputWithContext(context.Context) ProjectAttributesUserWidgetAuthorizationOutput
}

type ProjectAttributesUserWidgetAuthorizationArgs struct {
	// The permissions users are required to have to edit this attribute in the user management widget.
	EditPermissions pulumi.StringArrayInput `pulumi:"editPermissions"`
	// The permissions users are required to have to view this attribute in the user management widget.
	ViewPermissions pulumi.StringArrayInput `pulumi:"viewPermissions"`
}

func (ProjectAttributesUserWidgetAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesUserWidgetAuthorization)(nil)).Elem()
}

func (i ProjectAttributesUserWidgetAuthorizationArgs) ToProjectAttributesUserWidgetAuthorizationOutput() ProjectAttributesUserWidgetAuthorizationOutput {
	return i.ToProjectAttributesUserWidgetAuthorizationOutputWithContext(context.Background())
}

func (i ProjectAttributesUserWidgetAuthorizationArgs) ToProjectAttributesUserWidgetAuthorizationOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesUserWidgetAuthorizationOutput)
}

func (i ProjectAttributesUserWidgetAuthorizationArgs) ToProjectAttributesUserWidgetAuthorizationPtrOutput() ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return i.ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(context.Background())
}

func (i ProjectAttributesUserWidgetAuthorizationArgs) ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesUserWidgetAuthorizationOutput).ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(ctx)
}

// ProjectAttributesUserWidgetAuthorizationPtrInput is an input type that accepts ProjectAttributesUserWidgetAuthorizationArgs, ProjectAttributesUserWidgetAuthorizationPtr and ProjectAttributesUserWidgetAuthorizationPtrOutput values.
// You can construct a concrete instance of `ProjectAttributesUserWidgetAuthorizationPtrInput` via:
//
//	        ProjectAttributesUserWidgetAuthorizationArgs{...}
//
//	or:
//
//	        nil
type ProjectAttributesUserWidgetAuthorizationPtrInput interface {
	pulumi.Input

	ToProjectAttributesUserWidgetAuthorizationPtrOutput() ProjectAttributesUserWidgetAuthorizationPtrOutput
	ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(context.Context) ProjectAttributesUserWidgetAuthorizationPtrOutput
}

type projectAttributesUserWidgetAuthorizationPtrType ProjectAttributesUserWidgetAuthorizationArgs

func ProjectAttributesUserWidgetAuthorizationPtr(v *ProjectAttributesUserWidgetAuthorizationArgs) ProjectAttributesUserWidgetAuthorizationPtrInput {
	return (*projectAttributesUserWidgetAuthorizationPtrType)(v)
}

func (*projectAttributesUserWidgetAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributesUserWidgetAuthorization)(nil)).Elem()
}

func (i *projectAttributesUserWidgetAuthorizationPtrType) ToProjectAttributesUserWidgetAuthorizationPtrOutput() ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return i.ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(context.Background())
}

func (i *projectAttributesUserWidgetAuthorizationPtrType) ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAttributesUserWidgetAuthorizationPtrOutput)
}

type ProjectAttributesUserWidgetAuthorizationOutput struct{ *pulumi.OutputState }

func (ProjectAttributesUserWidgetAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAttributesUserWidgetAuthorization)(nil)).Elem()
}

func (o ProjectAttributesUserWidgetAuthorizationOutput) ToProjectAttributesUserWidgetAuthorizationOutput() ProjectAttributesUserWidgetAuthorizationOutput {
	return o
}

func (o ProjectAttributesUserWidgetAuthorizationOutput) ToProjectAttributesUserWidgetAuthorizationOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationOutput {
	return o
}

func (o ProjectAttributesUserWidgetAuthorizationOutput) ToProjectAttributesUserWidgetAuthorizationPtrOutput() ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return o.ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(context.Background())
}

func (o ProjectAttributesUserWidgetAuthorizationOutput) ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAttributesUserWidgetAuthorization) *ProjectAttributesUserWidgetAuthorization {
		return &v
	}).(ProjectAttributesUserWidgetAuthorizationPtrOutput)
}

// The permissions users are required to have to edit this attribute in the user management widget.
func (o ProjectAttributesUserWidgetAuthorizationOutput) EditPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAttributesUserWidgetAuthorization) []string { return v.EditPermissions }).(pulumi.StringArrayOutput)
}

// The permissions users are required to have to view this attribute in the user management widget.
func (o ProjectAttributesUserWidgetAuthorizationOutput) ViewPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAttributesUserWidgetAuthorization) []string { return v.ViewPermissions }).(pulumi.StringArrayOutput)
}

type ProjectAttributesUserWidgetAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (ProjectAttributesUserWidgetAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAttributesUserWidgetAuthorization)(nil)).Elem()
}

func (o ProjectAttributesUserWidgetAuthorizationPtrOutput) ToProjectAttributesUserWidgetAuthorizationPtrOutput() ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return o
}

func (o ProjectAttributesUserWidgetAuthorizationPtrOutput) ToProjectAttributesUserWidgetAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAttributesUserWidgetAuthorizationPtrOutput {
	return o
}

func (o ProjectAttributesUserWidgetAuthorizationPtrOutput) Elem() ProjectAttributesUserWidgetAuthorizationOutput {
	return o.ApplyT(func(v *ProjectAttributesUserWidgetAuthorization) ProjectAttributesUserWidgetAuthorization {
		if v != nil {
			return *v
		}
		var ret ProjectAttributesUserWidgetAuthorization
		return ret
	}).(ProjectAttributesUserWidgetAuthorizationOutput)
}

// The permissions users are required to have to edit this attribute in the user management widget.
func (o ProjectAttributesUserWidgetAuthorizationPtrOutput) EditPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAttributesUserWidgetAuthorization) []string {
		if v == nil {
			return nil
		}
		return v.EditPermissions
	}).(pulumi.StringArrayOutput)
}

// The permissions users are required to have to view this attribute in the user management widget.
func (o ProjectAttributesUserWidgetAuthorizationPtrOutput) ViewPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAttributesUserWidgetAuthorization) []string {
		if v == nil {
			return nil
		}
		return v.ViewPermissions
	}).(pulumi.StringArrayOutput)
}

type ProjectAuthentication struct {
	// Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
	EmbeddedLink *ProjectAuthenticationEmbeddedLink `pulumi:"embeddedLink"`
	// An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
	EnchantedLink *ProjectAuthenticationEnchantedLink `pulumi:"enchantedLink"`
	// An authentication method where a user receives a unique link via email to log in.
	MagicLink *ProjectAuthenticationMagicLink `pulumi:"magicLink"`
	// Authentication using Open Authorization, which allows users to authenticate with various external services.
	Oauth *ProjectAuthenticationOauth `pulumi:"oauth"`
	// A dynamically generated set of numbers, granting the user one-time access.
	Otp *ProjectAuthenticationOtp `pulumi:"otp"`
	// Device-based passwordless authentication, using fingerprint, face scan, and more.
	Passkeys *ProjectAuthenticationPasskeys `pulumi:"passkeys"`
	// The classic username and password combination used for authentication.
	Password *ProjectAuthenticationPassword `pulumi:"password"`
	// Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
	Sso *ProjectAuthenticationSso `pulumi:"sso"`
	// A one-time code generated for the user using a shared secret and time.
	Totp *ProjectAuthenticationTotp `pulumi:"totp"`
}

// ProjectAuthenticationInput is an input type that accepts ProjectAuthenticationArgs and ProjectAuthenticationOutput values.
// You can construct a concrete instance of `ProjectAuthenticationInput` via:
//
//	ProjectAuthenticationArgs{...}
type ProjectAuthenticationInput interface {
	pulumi.Input

	ToProjectAuthenticationOutput() ProjectAuthenticationOutput
	ToProjectAuthenticationOutputWithContext(context.Context) ProjectAuthenticationOutput
}

type ProjectAuthenticationArgs struct {
	// Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
	EmbeddedLink ProjectAuthenticationEmbeddedLinkPtrInput `pulumi:"embeddedLink"`
	// An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
	EnchantedLink ProjectAuthenticationEnchantedLinkPtrInput `pulumi:"enchantedLink"`
	// An authentication method where a user receives a unique link via email to log in.
	MagicLink ProjectAuthenticationMagicLinkPtrInput `pulumi:"magicLink"`
	// Authentication using Open Authorization, which allows users to authenticate with various external services.
	Oauth ProjectAuthenticationOauthPtrInput `pulumi:"oauth"`
	// A dynamically generated set of numbers, granting the user one-time access.
	Otp ProjectAuthenticationOtpPtrInput `pulumi:"otp"`
	// Device-based passwordless authentication, using fingerprint, face scan, and more.
	Passkeys ProjectAuthenticationPasskeysPtrInput `pulumi:"passkeys"`
	// The classic username and password combination used for authentication.
	Password ProjectAuthenticationPasswordPtrInput `pulumi:"password"`
	// Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
	Sso ProjectAuthenticationSsoPtrInput `pulumi:"sso"`
	// A one-time code generated for the user using a shared secret and time.
	Totp ProjectAuthenticationTotpPtrInput `pulumi:"totp"`
}

func (ProjectAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthentication)(nil)).Elem()
}

func (i ProjectAuthenticationArgs) ToProjectAuthenticationOutput() ProjectAuthenticationOutput {
	return i.ToProjectAuthenticationOutputWithContext(context.Background())
}

func (i ProjectAuthenticationArgs) ToProjectAuthenticationOutputWithContext(ctx context.Context) ProjectAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOutput)
}

func (i ProjectAuthenticationArgs) ToProjectAuthenticationPtrOutput() ProjectAuthenticationPtrOutput {
	return i.ToProjectAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationArgs) ToProjectAuthenticationPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOutput).ToProjectAuthenticationPtrOutputWithContext(ctx)
}

// ProjectAuthenticationPtrInput is an input type that accepts ProjectAuthenticationArgs, ProjectAuthenticationPtr and ProjectAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPtrInput` via:
//
//	        ProjectAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationPtrOutput() ProjectAuthenticationPtrOutput
	ToProjectAuthenticationPtrOutputWithContext(context.Context) ProjectAuthenticationPtrOutput
}

type projectAuthenticationPtrType ProjectAuthenticationArgs

func ProjectAuthenticationPtr(v *ProjectAuthenticationArgs) ProjectAuthenticationPtrInput {
	return (*projectAuthenticationPtrType)(v)
}

func (*projectAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthentication)(nil)).Elem()
}

func (i *projectAuthenticationPtrType) ToProjectAuthenticationPtrOutput() ProjectAuthenticationPtrOutput {
	return i.ToProjectAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationPtrType) ToProjectAuthenticationPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPtrOutput)
}

type ProjectAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthentication)(nil)).Elem()
}

func (o ProjectAuthenticationOutput) ToProjectAuthenticationOutput() ProjectAuthenticationOutput {
	return o
}

func (o ProjectAuthenticationOutput) ToProjectAuthenticationOutputWithContext(ctx context.Context) ProjectAuthenticationOutput {
	return o
}

func (o ProjectAuthenticationOutput) ToProjectAuthenticationPtrOutput() ProjectAuthenticationPtrOutput {
	return o.ToProjectAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOutput) ToProjectAuthenticationPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthentication) *ProjectAuthentication {
		return &v
	}).(ProjectAuthenticationPtrOutput)
}

// Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
func (o ProjectAuthenticationOutput) EmbeddedLink() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationEmbeddedLink { return v.EmbeddedLink }).(ProjectAuthenticationEmbeddedLinkPtrOutput)
}

// An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
func (o ProjectAuthenticationOutput) EnchantedLink() ProjectAuthenticationEnchantedLinkPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationEnchantedLink { return v.EnchantedLink }).(ProjectAuthenticationEnchantedLinkPtrOutput)
}

// An authentication method where a user receives a unique link via email to log in.
func (o ProjectAuthenticationOutput) MagicLink() ProjectAuthenticationMagicLinkPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationMagicLink { return v.MagicLink }).(ProjectAuthenticationMagicLinkPtrOutput)
}

// Authentication using Open Authorization, which allows users to authenticate with various external services.
func (o ProjectAuthenticationOutput) Oauth() ProjectAuthenticationOauthPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationOauth { return v.Oauth }).(ProjectAuthenticationOauthPtrOutput)
}

// A dynamically generated set of numbers, granting the user one-time access.
func (o ProjectAuthenticationOutput) Otp() ProjectAuthenticationOtpPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationOtp { return v.Otp }).(ProjectAuthenticationOtpPtrOutput)
}

// Device-based passwordless authentication, using fingerprint, face scan, and more.
func (o ProjectAuthenticationOutput) Passkeys() ProjectAuthenticationPasskeysPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationPasskeys { return v.Passkeys }).(ProjectAuthenticationPasskeysPtrOutput)
}

// The classic username and password combination used for authentication.
func (o ProjectAuthenticationOutput) Password() ProjectAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationPassword { return v.Password }).(ProjectAuthenticationPasswordPtrOutput)
}

// Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
func (o ProjectAuthenticationOutput) Sso() ProjectAuthenticationSsoPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationSso { return v.Sso }).(ProjectAuthenticationSsoPtrOutput)
}

// A one-time code generated for the user using a shared secret and time.
func (o ProjectAuthenticationOutput) Totp() ProjectAuthenticationTotpPtrOutput {
	return o.ApplyT(func(v ProjectAuthentication) *ProjectAuthenticationTotp { return v.Totp }).(ProjectAuthenticationTotpPtrOutput)
}

type ProjectAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthentication)(nil)).Elem()
}

func (o ProjectAuthenticationPtrOutput) ToProjectAuthenticationPtrOutput() ProjectAuthenticationPtrOutput {
	return o
}

func (o ProjectAuthenticationPtrOutput) ToProjectAuthenticationPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPtrOutput {
	return o
}

func (o ProjectAuthenticationPtrOutput) Elem() ProjectAuthenticationOutput {
	return o.ApplyT(func(v *ProjectAuthentication) ProjectAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectAuthentication
		return ret
	}).(ProjectAuthenticationOutput)
}

// Make the authentication experience smoother for the user by generating their initial token in a way that does not require the end user to initiate the process, requiring only verification.
func (o ProjectAuthenticationPtrOutput) EmbeddedLink() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationEmbeddedLink {
		if v == nil {
			return nil
		}
		return v.EmbeddedLink
	}).(ProjectAuthenticationEmbeddedLinkPtrOutput)
}

// An enhanced and more secure version of Magic Link, enabling users to start the authentication process on one device and execute the verification on another.
func (o ProjectAuthenticationPtrOutput) EnchantedLink() ProjectAuthenticationEnchantedLinkPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationEnchantedLink {
		if v == nil {
			return nil
		}
		return v.EnchantedLink
	}).(ProjectAuthenticationEnchantedLinkPtrOutput)
}

// An authentication method where a user receives a unique link via email to log in.
func (o ProjectAuthenticationPtrOutput) MagicLink() ProjectAuthenticationMagicLinkPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationMagicLink {
		if v == nil {
			return nil
		}
		return v.MagicLink
	}).(ProjectAuthenticationMagicLinkPtrOutput)
}

// Authentication using Open Authorization, which allows users to authenticate with various external services.
func (o ProjectAuthenticationPtrOutput) Oauth() ProjectAuthenticationOauthPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationOauth {
		if v == nil {
			return nil
		}
		return v.Oauth
	}).(ProjectAuthenticationOauthPtrOutput)
}

// A dynamically generated set of numbers, granting the user one-time access.
func (o ProjectAuthenticationPtrOutput) Otp() ProjectAuthenticationOtpPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationOtp {
		if v == nil {
			return nil
		}
		return v.Otp
	}).(ProjectAuthenticationOtpPtrOutput)
}

// Device-based passwordless authentication, using fingerprint, face scan, and more.
func (o ProjectAuthenticationPtrOutput) Passkeys() ProjectAuthenticationPasskeysPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationPasskeys {
		if v == nil {
			return nil
		}
		return v.Passkeys
	}).(ProjectAuthenticationPasskeysPtrOutput)
}

// The classic username and password combination used for authentication.
func (o ProjectAuthenticationPtrOutput) Password() ProjectAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationPassword {
		if v == nil {
			return nil
		}
		return v.Password
	}).(ProjectAuthenticationPasswordPtrOutput)
}

// Single Sign-On (SSO) authentication method that enables users to access multiple applications with a single set of credentials.
func (o ProjectAuthenticationPtrOutput) Sso() ProjectAuthenticationSsoPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationSso {
		if v == nil {
			return nil
		}
		return v.Sso
	}).(ProjectAuthenticationSsoPtrOutput)
}

// A one-time code generated for the user using a shared secret and time.
func (o ProjectAuthenticationPtrOutput) Totp() ProjectAuthenticationTotpPtrOutput {
	return o.ApplyT(func(v *ProjectAuthentication) *ProjectAuthenticationTotp {
		if v == nil {
			return nil
		}
		return v.Totp
	}).(ProjectAuthenticationTotpPtrOutput)
}

type ProjectAuthenticationEmbeddedLink struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// How long the embedded link remains valid before it expires.
	ExpirationTime *string `pulumi:"expirationTime"`
}

// ProjectAuthenticationEmbeddedLinkInput is an input type that accepts ProjectAuthenticationEmbeddedLinkArgs and ProjectAuthenticationEmbeddedLinkOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEmbeddedLinkInput` via:
//
//	ProjectAuthenticationEmbeddedLinkArgs{...}
type ProjectAuthenticationEmbeddedLinkInput interface {
	pulumi.Input

	ToProjectAuthenticationEmbeddedLinkOutput() ProjectAuthenticationEmbeddedLinkOutput
	ToProjectAuthenticationEmbeddedLinkOutputWithContext(context.Context) ProjectAuthenticationEmbeddedLinkOutput
}

type ProjectAuthenticationEmbeddedLinkArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// How long the embedded link remains valid before it expires.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
}

func (ProjectAuthenticationEmbeddedLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEmbeddedLink)(nil)).Elem()
}

func (i ProjectAuthenticationEmbeddedLinkArgs) ToProjectAuthenticationEmbeddedLinkOutput() ProjectAuthenticationEmbeddedLinkOutput {
	return i.ToProjectAuthenticationEmbeddedLinkOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEmbeddedLinkArgs) ToProjectAuthenticationEmbeddedLinkOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEmbeddedLinkOutput)
}

func (i ProjectAuthenticationEmbeddedLinkArgs) ToProjectAuthenticationEmbeddedLinkPtrOutput() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return i.ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEmbeddedLinkArgs) ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEmbeddedLinkOutput).ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(ctx)
}

// ProjectAuthenticationEmbeddedLinkPtrInput is an input type that accepts ProjectAuthenticationEmbeddedLinkArgs, ProjectAuthenticationEmbeddedLinkPtr and ProjectAuthenticationEmbeddedLinkPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEmbeddedLinkPtrInput` via:
//
//	        ProjectAuthenticationEmbeddedLinkArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationEmbeddedLinkPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationEmbeddedLinkPtrOutput() ProjectAuthenticationEmbeddedLinkPtrOutput
	ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(context.Context) ProjectAuthenticationEmbeddedLinkPtrOutput
}

type projectAuthenticationEmbeddedLinkPtrType ProjectAuthenticationEmbeddedLinkArgs

func ProjectAuthenticationEmbeddedLinkPtr(v *ProjectAuthenticationEmbeddedLinkArgs) ProjectAuthenticationEmbeddedLinkPtrInput {
	return (*projectAuthenticationEmbeddedLinkPtrType)(v)
}

func (*projectAuthenticationEmbeddedLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEmbeddedLink)(nil)).Elem()
}

func (i *projectAuthenticationEmbeddedLinkPtrType) ToProjectAuthenticationEmbeddedLinkPtrOutput() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return i.ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationEmbeddedLinkPtrType) ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEmbeddedLinkPtrOutput)
}

type ProjectAuthenticationEmbeddedLinkOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEmbeddedLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEmbeddedLink)(nil)).Elem()
}

func (o ProjectAuthenticationEmbeddedLinkOutput) ToProjectAuthenticationEmbeddedLinkOutput() ProjectAuthenticationEmbeddedLinkOutput {
	return o
}

func (o ProjectAuthenticationEmbeddedLinkOutput) ToProjectAuthenticationEmbeddedLinkOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkOutput {
	return o
}

func (o ProjectAuthenticationEmbeddedLinkOutput) ToProjectAuthenticationEmbeddedLinkPtrOutput() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o.ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationEmbeddedLinkOutput) ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationEmbeddedLink) *ProjectAuthenticationEmbeddedLink {
		return &v
	}).(ProjectAuthenticationEmbeddedLinkPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationEmbeddedLinkOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEmbeddedLink) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// How long the embedded link remains valid before it expires.
func (o ProjectAuthenticationEmbeddedLinkOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEmbeddedLink) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationEmbeddedLinkPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEmbeddedLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEmbeddedLink)(nil)).Elem()
}

func (o ProjectAuthenticationEmbeddedLinkPtrOutput) ToProjectAuthenticationEmbeddedLinkPtrOutput() ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationEmbeddedLinkPtrOutput) ToProjectAuthenticationEmbeddedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEmbeddedLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationEmbeddedLinkPtrOutput) Elem() ProjectAuthenticationEmbeddedLinkOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEmbeddedLink) ProjectAuthenticationEmbeddedLink {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationEmbeddedLink
		return ret
	}).(ProjectAuthenticationEmbeddedLinkOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationEmbeddedLinkPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEmbeddedLink) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// How long the embedded link remains valid before it expires.
func (o ProjectAuthenticationEmbeddedLinkPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEmbeddedLink) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationEnchantedLink struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Settings related to sending emails as part of the enchanted link authentication.
	EmailService *ProjectAuthenticationEnchantedLinkEmailService `pulumi:"emailService"`
	// How long the enchanted link remains valid before it expires.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The URL to redirect users to after they log in using the enchanted link.
	RedirectUrl *string `pulumi:"redirectUrl"`
}

// ProjectAuthenticationEnchantedLinkInput is an input type that accepts ProjectAuthenticationEnchantedLinkArgs and ProjectAuthenticationEnchantedLinkOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkInput` via:
//
//	ProjectAuthenticationEnchantedLinkArgs{...}
type ProjectAuthenticationEnchantedLinkInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkOutput() ProjectAuthenticationEnchantedLinkOutput
	ToProjectAuthenticationEnchantedLinkOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkOutput
}

type ProjectAuthenticationEnchantedLinkArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Settings related to sending emails as part of the enchanted link authentication.
	EmailService ProjectAuthenticationEnchantedLinkEmailServicePtrInput `pulumi:"emailService"`
	// How long the enchanted link remains valid before it expires.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The URL to redirect users to after they log in using the enchanted link.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
}

func (ProjectAuthenticationEnchantedLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLink)(nil)).Elem()
}

func (i ProjectAuthenticationEnchantedLinkArgs) ToProjectAuthenticationEnchantedLinkOutput() ProjectAuthenticationEnchantedLinkOutput {
	return i.ToProjectAuthenticationEnchantedLinkOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkArgs) ToProjectAuthenticationEnchantedLinkOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkOutput)
}

func (i ProjectAuthenticationEnchantedLinkArgs) ToProjectAuthenticationEnchantedLinkPtrOutput() ProjectAuthenticationEnchantedLinkPtrOutput {
	return i.ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkArgs) ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkOutput).ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(ctx)
}

// ProjectAuthenticationEnchantedLinkPtrInput is an input type that accepts ProjectAuthenticationEnchantedLinkArgs, ProjectAuthenticationEnchantedLinkPtr and ProjectAuthenticationEnchantedLinkPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkPtrInput` via:
//
//	        ProjectAuthenticationEnchantedLinkArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationEnchantedLinkPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkPtrOutput() ProjectAuthenticationEnchantedLinkPtrOutput
	ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkPtrOutput
}

type projectAuthenticationEnchantedLinkPtrType ProjectAuthenticationEnchantedLinkArgs

func ProjectAuthenticationEnchantedLinkPtr(v *ProjectAuthenticationEnchantedLinkArgs) ProjectAuthenticationEnchantedLinkPtrInput {
	return (*projectAuthenticationEnchantedLinkPtrType)(v)
}

func (*projectAuthenticationEnchantedLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEnchantedLink)(nil)).Elem()
}

func (i *projectAuthenticationEnchantedLinkPtrType) ToProjectAuthenticationEnchantedLinkPtrOutput() ProjectAuthenticationEnchantedLinkPtrOutput {
	return i.ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationEnchantedLinkPtrType) ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkPtrOutput)
}

type ProjectAuthenticationEnchantedLinkOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLink)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkOutput) ToProjectAuthenticationEnchantedLinkOutput() ProjectAuthenticationEnchantedLinkOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkOutput) ToProjectAuthenticationEnchantedLinkOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkOutput) ToProjectAuthenticationEnchantedLinkPtrOutput() ProjectAuthenticationEnchantedLinkPtrOutput {
	return o.ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationEnchantedLinkOutput) ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationEnchantedLink) *ProjectAuthenticationEnchantedLink {
		return &v
	}).(ProjectAuthenticationEnchantedLinkPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationEnchantedLinkOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLink) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Settings related to sending emails as part of the enchanted link authentication.
func (o ProjectAuthenticationEnchantedLinkOutput) EmailService() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLink) *ProjectAuthenticationEnchantedLinkEmailService {
		return v.EmailService
	}).(ProjectAuthenticationEnchantedLinkEmailServicePtrOutput)
}

// How long the enchanted link remains valid before it expires.
func (o ProjectAuthenticationEnchantedLinkOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLink) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The URL to redirect users to after they log in using the enchanted link.
func (o ProjectAuthenticationEnchantedLinkOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLink) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationEnchantedLinkPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEnchantedLink)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkPtrOutput) ToProjectAuthenticationEnchantedLinkPtrOutput() ProjectAuthenticationEnchantedLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkPtrOutput) ToProjectAuthenticationEnchantedLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkPtrOutput) Elem() ProjectAuthenticationEnchantedLinkOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLink) ProjectAuthenticationEnchantedLink {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationEnchantedLink
		return ret
	}).(ProjectAuthenticationEnchantedLinkOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationEnchantedLinkPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLink) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Settings related to sending emails as part of the enchanted link authentication.
func (o ProjectAuthenticationEnchantedLinkPtrOutput) EmailService() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLink) *ProjectAuthenticationEnchantedLinkEmailService {
		if v == nil {
			return nil
		}
		return v.EmailService
	}).(ProjectAuthenticationEnchantedLinkEmailServicePtrOutput)
}

// How long the enchanted link remains valid before it expires.
func (o ProjectAuthenticationEnchantedLinkPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLink) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The URL to redirect users to after they log in using the enchanted link.
func (o ProjectAuthenticationEnchantedLinkPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLink) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationEnchantedLinkEmailService struct {
	// The name of the email connector to use for sending emails.
	Connector string `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates []ProjectAuthenticationEnchantedLinkEmailServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationEnchantedLinkEmailServiceInput is an input type that accepts ProjectAuthenticationEnchantedLinkEmailServiceArgs and ProjectAuthenticationEnchantedLinkEmailServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkEmailServiceInput` via:
//
//	ProjectAuthenticationEnchantedLinkEmailServiceArgs{...}
type ProjectAuthenticationEnchantedLinkEmailServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkEmailServiceOutput() ProjectAuthenticationEnchantedLinkEmailServiceOutput
	ToProjectAuthenticationEnchantedLinkEmailServiceOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkEmailServiceOutput
}

type ProjectAuthenticationEnchantedLinkEmailServiceArgs struct {
	// The name of the email connector to use for sending emails.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationEnchantedLinkEmailServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailService)(nil)).Elem()
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceArgs) ToProjectAuthenticationEnchantedLinkEmailServiceOutput() ProjectAuthenticationEnchantedLinkEmailServiceOutput {
	return i.ToProjectAuthenticationEnchantedLinkEmailServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceArgs) ToProjectAuthenticationEnchantedLinkEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkEmailServiceOutput)
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceArgs) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutput() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return i.ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceArgs) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkEmailServiceOutput).ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationEnchantedLinkEmailServicePtrInput is an input type that accepts ProjectAuthenticationEnchantedLinkEmailServiceArgs, ProjectAuthenticationEnchantedLinkEmailServicePtr and ProjectAuthenticationEnchantedLinkEmailServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkEmailServicePtrInput` via:
//
//	        ProjectAuthenticationEnchantedLinkEmailServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationEnchantedLinkEmailServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkEmailServicePtrOutput() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput
	ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkEmailServicePtrOutput
}

type projectAuthenticationEnchantedLinkEmailServicePtrType ProjectAuthenticationEnchantedLinkEmailServiceArgs

func ProjectAuthenticationEnchantedLinkEmailServicePtr(v *ProjectAuthenticationEnchantedLinkEmailServiceArgs) ProjectAuthenticationEnchantedLinkEmailServicePtrInput {
	return (*projectAuthenticationEnchantedLinkEmailServicePtrType)(v)
}

func (*projectAuthenticationEnchantedLinkEmailServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEnchantedLinkEmailService)(nil)).Elem()
}

func (i *projectAuthenticationEnchantedLinkEmailServicePtrType) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutput() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return i.ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationEnchantedLinkEmailServicePtrType) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkEmailServicePtrOutput)
}

type ProjectAuthenticationEnchantedLinkEmailServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkEmailServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) ToProjectAuthenticationEnchantedLinkEmailServiceOutput() ProjectAuthenticationEnchantedLinkEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) ToProjectAuthenticationEnchantedLinkEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutput() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o.ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationEnchantedLinkEmailService) *ProjectAuthenticationEnchantedLinkEmailService {
		return &v
	}).(ProjectAuthenticationEnchantedLinkEmailServicePtrOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationEnchantedLinkEmailServiceOutput) Templates() ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailService) []ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationEnchantedLinkEmailServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationEnchantedLinkEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutput() ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) ToProjectAuthenticationEnchantedLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) Elem() ProjectAuthenticationEnchantedLinkEmailServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLinkEmailService) ProjectAuthenticationEnchantedLinkEmailService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationEnchantedLinkEmailService
		return ret
	}).(ProjectAuthenticationEnchantedLinkEmailServiceOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLinkEmailService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationEnchantedLinkEmailServicePtrOutput) Templates() ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationEnchantedLinkEmailService) []ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationEnchantedLinkEmailServiceTemplate struct {
	// Whether this email template is currently active and in use.
	Active *bool `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody *string `pulumi:"htmlBody"`
	Id       *string `pulumi:"id"`
	// Unique name for this email template.
	Name string `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody *string `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject string `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody *bool `pulumi:"usePlainTextBody"`
}

// ProjectAuthenticationEnchantedLinkEmailServiceTemplateInput is an input type that accepts ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs and ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkEmailServiceTemplateInput` via:
//
//	ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs{...}
type ProjectAuthenticationEnchantedLinkEmailServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput
	ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput
}

type ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs struct {
	// Whether this email template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody pulumi.StringPtrInput `pulumi:"htmlBody"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this email template.
	Name pulumi.StringInput `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody pulumi.StringPtrInput `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody pulumi.BoolPtrInput `pulumi:"usePlainTextBody"`
}

func (ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput {
	return i.ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput)
}

// ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray and ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray{ ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs{...} }
type ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput
	ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput
}

type ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray []ProjectAuthenticationEnchantedLinkEmailServiceTemplateInput

func (ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationEnchantedLinkEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput {
	return o
}

// Whether this email template is currently active and in use.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// HTML content of the email message body, required if `usePlainTextBody` isn't set.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) HtmlBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) *string { return v.HtmlBody }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this email template.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) PlainTextBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) *string { return v.PlainTextBody }).(pulumi.StringPtrOutput)
}

// Subject line of the email message.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) string { return v.Subject }).(pulumi.StringOutput)
}

// Whether to use the plain text body instead of HTML for the email.
func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput) UsePlainTextBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationEnchantedLinkEmailServiceTemplate) *bool { return v.UsePlainTextBody }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationEnchantedLinkEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput) ToProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationEnchantedLinkEmailServiceTemplate {
		return vs[0].([]ProjectAuthenticationEnchantedLinkEmailServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput)
}

type ProjectAuthenticationMagicLink struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Settings related to sending emails as part of the magic link authentication.
	EmailService *ProjectAuthenticationMagicLinkEmailService `pulumi:"emailService"`
	// How long the magic link remains valid before it expires.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The URL to redirect users to after they log in using the magic link.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Settings related to sending SMS messages as part of the magic link authentication.
	TextService *ProjectAuthenticationMagicLinkTextService `pulumi:"textService"`
}

// ProjectAuthenticationMagicLinkInput is an input type that accepts ProjectAuthenticationMagicLinkArgs and ProjectAuthenticationMagicLinkOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkInput` via:
//
//	ProjectAuthenticationMagicLinkArgs{...}
type ProjectAuthenticationMagicLinkInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkOutput() ProjectAuthenticationMagicLinkOutput
	ToProjectAuthenticationMagicLinkOutputWithContext(context.Context) ProjectAuthenticationMagicLinkOutput
}

type ProjectAuthenticationMagicLinkArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Settings related to sending emails as part of the magic link authentication.
	EmailService ProjectAuthenticationMagicLinkEmailServicePtrInput `pulumi:"emailService"`
	// How long the magic link remains valid before it expires.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The URL to redirect users to after they log in using the magic link.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Settings related to sending SMS messages as part of the magic link authentication.
	TextService ProjectAuthenticationMagicLinkTextServicePtrInput `pulumi:"textService"`
}

func (ProjectAuthenticationMagicLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLink)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkArgs) ToProjectAuthenticationMagicLinkOutput() ProjectAuthenticationMagicLinkOutput {
	return i.ToProjectAuthenticationMagicLinkOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkArgs) ToProjectAuthenticationMagicLinkOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkOutput)
}

func (i ProjectAuthenticationMagicLinkArgs) ToProjectAuthenticationMagicLinkPtrOutput() ProjectAuthenticationMagicLinkPtrOutput {
	return i.ToProjectAuthenticationMagicLinkPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkArgs) ToProjectAuthenticationMagicLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkOutput).ToProjectAuthenticationMagicLinkPtrOutputWithContext(ctx)
}

// ProjectAuthenticationMagicLinkPtrInput is an input type that accepts ProjectAuthenticationMagicLinkArgs, ProjectAuthenticationMagicLinkPtr and ProjectAuthenticationMagicLinkPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkPtrInput` via:
//
//	        ProjectAuthenticationMagicLinkArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationMagicLinkPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkPtrOutput() ProjectAuthenticationMagicLinkPtrOutput
	ToProjectAuthenticationMagicLinkPtrOutputWithContext(context.Context) ProjectAuthenticationMagicLinkPtrOutput
}

type projectAuthenticationMagicLinkPtrType ProjectAuthenticationMagicLinkArgs

func ProjectAuthenticationMagicLinkPtr(v *ProjectAuthenticationMagicLinkArgs) ProjectAuthenticationMagicLinkPtrInput {
	return (*projectAuthenticationMagicLinkPtrType)(v)
}

func (*projectAuthenticationMagicLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLink)(nil)).Elem()
}

func (i *projectAuthenticationMagicLinkPtrType) ToProjectAuthenticationMagicLinkPtrOutput() ProjectAuthenticationMagicLinkPtrOutput {
	return i.ToProjectAuthenticationMagicLinkPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationMagicLinkPtrType) ToProjectAuthenticationMagicLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkPtrOutput)
}

type ProjectAuthenticationMagicLinkOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLink)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkOutput) ToProjectAuthenticationMagicLinkOutput() ProjectAuthenticationMagicLinkOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkOutput) ToProjectAuthenticationMagicLinkOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkOutput) ToProjectAuthenticationMagicLinkPtrOutput() ProjectAuthenticationMagicLinkPtrOutput {
	return o.ToProjectAuthenticationMagicLinkPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationMagicLinkOutput) ToProjectAuthenticationMagicLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationMagicLink) *ProjectAuthenticationMagicLink {
		return &v
	}).(ProjectAuthenticationMagicLinkPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationMagicLinkOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLink) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Settings related to sending emails as part of the magic link authentication.
func (o ProjectAuthenticationMagicLinkOutput) EmailService() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLink) *ProjectAuthenticationMagicLinkEmailService {
		return v.EmailService
	}).(ProjectAuthenticationMagicLinkEmailServicePtrOutput)
}

// How long the magic link remains valid before it expires.
func (o ProjectAuthenticationMagicLinkOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLink) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The URL to redirect users to after they log in using the magic link.
func (o ProjectAuthenticationMagicLinkOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLink) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Settings related to sending SMS messages as part of the magic link authentication.
func (o ProjectAuthenticationMagicLinkOutput) TextService() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLink) *ProjectAuthenticationMagicLinkTextService {
		return v.TextService
	}).(ProjectAuthenticationMagicLinkTextServicePtrOutput)
}

type ProjectAuthenticationMagicLinkPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLink)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkPtrOutput) ToProjectAuthenticationMagicLinkPtrOutput() ProjectAuthenticationMagicLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkPtrOutput) ToProjectAuthenticationMagicLinkPtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkPtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkPtrOutput) Elem() ProjectAuthenticationMagicLinkOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) ProjectAuthenticationMagicLink {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationMagicLink
		return ret
	}).(ProjectAuthenticationMagicLinkOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationMagicLinkPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Settings related to sending emails as part of the magic link authentication.
func (o ProjectAuthenticationMagicLinkPtrOutput) EmailService() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) *ProjectAuthenticationMagicLinkEmailService {
		if v == nil {
			return nil
		}
		return v.EmailService
	}).(ProjectAuthenticationMagicLinkEmailServicePtrOutput)
}

// How long the magic link remains valid before it expires.
func (o ProjectAuthenticationMagicLinkPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The URL to redirect users to after they log in using the magic link.
func (o ProjectAuthenticationMagicLinkPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Settings related to sending SMS messages as part of the magic link authentication.
func (o ProjectAuthenticationMagicLinkPtrOutput) TextService() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLink) *ProjectAuthenticationMagicLinkTextService {
		if v == nil {
			return nil
		}
		return v.TextService
	}).(ProjectAuthenticationMagicLinkTextServicePtrOutput)
}

type ProjectAuthenticationMagicLinkEmailService struct {
	// The name of the email connector to use for sending emails.
	Connector string `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates []ProjectAuthenticationMagicLinkEmailServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationMagicLinkEmailServiceInput is an input type that accepts ProjectAuthenticationMagicLinkEmailServiceArgs and ProjectAuthenticationMagicLinkEmailServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkEmailServiceInput` via:
//
//	ProjectAuthenticationMagicLinkEmailServiceArgs{...}
type ProjectAuthenticationMagicLinkEmailServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkEmailServiceOutput() ProjectAuthenticationMagicLinkEmailServiceOutput
	ToProjectAuthenticationMagicLinkEmailServiceOutputWithContext(context.Context) ProjectAuthenticationMagicLinkEmailServiceOutput
}

type ProjectAuthenticationMagicLinkEmailServiceArgs struct {
	// The name of the email connector to use for sending emails.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates ProjectAuthenticationMagicLinkEmailServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationMagicLinkEmailServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailService)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkEmailServiceArgs) ToProjectAuthenticationMagicLinkEmailServiceOutput() ProjectAuthenticationMagicLinkEmailServiceOutput {
	return i.ToProjectAuthenticationMagicLinkEmailServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkEmailServiceArgs) ToProjectAuthenticationMagicLinkEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkEmailServiceOutput)
}

func (i ProjectAuthenticationMagicLinkEmailServiceArgs) ToProjectAuthenticationMagicLinkEmailServicePtrOutput() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return i.ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkEmailServiceArgs) ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkEmailServiceOutput).ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationMagicLinkEmailServicePtrInput is an input type that accepts ProjectAuthenticationMagicLinkEmailServiceArgs, ProjectAuthenticationMagicLinkEmailServicePtr and ProjectAuthenticationMagicLinkEmailServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkEmailServicePtrInput` via:
//
//	        ProjectAuthenticationMagicLinkEmailServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationMagicLinkEmailServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkEmailServicePtrOutput() ProjectAuthenticationMagicLinkEmailServicePtrOutput
	ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(context.Context) ProjectAuthenticationMagicLinkEmailServicePtrOutput
}

type projectAuthenticationMagicLinkEmailServicePtrType ProjectAuthenticationMagicLinkEmailServiceArgs

func ProjectAuthenticationMagicLinkEmailServicePtr(v *ProjectAuthenticationMagicLinkEmailServiceArgs) ProjectAuthenticationMagicLinkEmailServicePtrInput {
	return (*projectAuthenticationMagicLinkEmailServicePtrType)(v)
}

func (*projectAuthenticationMagicLinkEmailServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLinkEmailService)(nil)).Elem()
}

func (i *projectAuthenticationMagicLinkEmailServicePtrType) ToProjectAuthenticationMagicLinkEmailServicePtrOutput() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return i.ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationMagicLinkEmailServicePtrType) ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkEmailServicePtrOutput)
}

type ProjectAuthenticationMagicLinkEmailServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkEmailServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkEmailServiceOutput) ToProjectAuthenticationMagicLinkEmailServiceOutput() ProjectAuthenticationMagicLinkEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServiceOutput) ToProjectAuthenticationMagicLinkEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServiceOutput) ToProjectAuthenticationMagicLinkEmailServicePtrOutput() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o.ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationMagicLinkEmailServiceOutput) ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationMagicLinkEmailService) *ProjectAuthenticationMagicLinkEmailService {
		return &v
	}).(ProjectAuthenticationMagicLinkEmailServicePtrOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationMagicLinkEmailServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationMagicLinkEmailServiceOutput) Templates() ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailService) []ProjectAuthenticationMagicLinkEmailServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkEmailServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkEmailServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLinkEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkEmailServicePtrOutput) ToProjectAuthenticationMagicLinkEmailServicePtrOutput() ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServicePtrOutput) ToProjectAuthenticationMagicLinkEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServicePtrOutput) Elem() ProjectAuthenticationMagicLinkEmailServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkEmailService) ProjectAuthenticationMagicLinkEmailService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationMagicLinkEmailService
		return ret
	}).(ProjectAuthenticationMagicLinkEmailServiceOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationMagicLinkEmailServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkEmailService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationMagicLinkEmailServicePtrOutput) Templates() ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkEmailService) []ProjectAuthenticationMagicLinkEmailServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkEmailServiceTemplate struct {
	// Whether this email template is currently active and in use.
	Active *bool `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody *string `pulumi:"htmlBody"`
	Id       *string `pulumi:"id"`
	// Unique name for this email template.
	Name string `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody *string `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject string `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody *bool `pulumi:"usePlainTextBody"`
}

// ProjectAuthenticationMagicLinkEmailServiceTemplateInput is an input type that accepts ProjectAuthenticationMagicLinkEmailServiceTemplateArgs and ProjectAuthenticationMagicLinkEmailServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkEmailServiceTemplateInput` via:
//
//	ProjectAuthenticationMagicLinkEmailServiceTemplateArgs{...}
type ProjectAuthenticationMagicLinkEmailServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkEmailServiceTemplateOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateOutput
	ToProjectAuthenticationMagicLinkEmailServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateOutput
}

type ProjectAuthenticationMagicLinkEmailServiceTemplateArgs struct {
	// Whether this email template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody pulumi.StringPtrInput `pulumi:"htmlBody"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this email template.
	Name pulumi.StringInput `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody pulumi.StringPtrInput `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody pulumi.BoolPtrInput `pulumi:"usePlainTextBody"`
}

func (ProjectAuthenticationMagicLinkEmailServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkEmailServiceTemplateArgs) ToProjectAuthenticationMagicLinkEmailServiceTemplateOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateOutput {
	return i.ToProjectAuthenticationMagicLinkEmailServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkEmailServiceTemplateArgs) ToProjectAuthenticationMagicLinkEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkEmailServiceTemplateOutput)
}

// ProjectAuthenticationMagicLinkEmailServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationMagicLinkEmailServiceTemplateArray and ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkEmailServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationMagicLinkEmailServiceTemplateArray{ ProjectAuthenticationMagicLinkEmailServiceTemplateArgs{...} }
type ProjectAuthenticationMagicLinkEmailServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput
	ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput
}

type ProjectAuthenticationMagicLinkEmailServiceTemplateArray []ProjectAuthenticationMagicLinkEmailServiceTemplateInput

func (ProjectAuthenticationMagicLinkEmailServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationMagicLinkEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkEmailServiceTemplateArray) ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkEmailServiceTemplateArray) ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkEmailServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) ToProjectAuthenticationMagicLinkEmailServiceTemplateOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) ToProjectAuthenticationMagicLinkEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateOutput {
	return o
}

// Whether this email template is currently active and in use.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// HTML content of the email message body, required if `usePlainTextBody` isn't set.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) HtmlBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) *string { return v.HtmlBody }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this email template.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) PlainTextBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) *string { return v.PlainTextBody }).(pulumi.StringPtrOutput)
}

// Subject line of the email message.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) string { return v.Subject }).(pulumi.StringOutput)
}

// Whether to use the plain text body instead of HTML for the email.
func (o ProjectAuthenticationMagicLinkEmailServiceTemplateOutput) UsePlainTextBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkEmailServiceTemplate) *bool { return v.UsePlainTextBody }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationMagicLinkEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput) ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput) ToProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationMagicLinkEmailServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationMagicLinkEmailServiceTemplate {
		return vs[0].([]ProjectAuthenticationMagicLinkEmailServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationMagicLinkEmailServiceTemplateOutput)
}

type ProjectAuthenticationMagicLinkTextService struct {
	// The name of the SMS/text connector to use for sending text messages.
	Connector string `pulumi:"connector"`
	// A list of text message templates for different authentication flows.
	Templates []ProjectAuthenticationMagicLinkTextServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationMagicLinkTextServiceInput is an input type that accepts ProjectAuthenticationMagicLinkTextServiceArgs and ProjectAuthenticationMagicLinkTextServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkTextServiceInput` via:
//
//	ProjectAuthenticationMagicLinkTextServiceArgs{...}
type ProjectAuthenticationMagicLinkTextServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkTextServiceOutput() ProjectAuthenticationMagicLinkTextServiceOutput
	ToProjectAuthenticationMagicLinkTextServiceOutputWithContext(context.Context) ProjectAuthenticationMagicLinkTextServiceOutput
}

type ProjectAuthenticationMagicLinkTextServiceArgs struct {
	// The name of the SMS/text connector to use for sending text messages.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of text message templates for different authentication flows.
	Templates ProjectAuthenticationMagicLinkTextServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationMagicLinkTextServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkTextService)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkTextServiceArgs) ToProjectAuthenticationMagicLinkTextServiceOutput() ProjectAuthenticationMagicLinkTextServiceOutput {
	return i.ToProjectAuthenticationMagicLinkTextServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkTextServiceArgs) ToProjectAuthenticationMagicLinkTextServiceOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkTextServiceOutput)
}

func (i ProjectAuthenticationMagicLinkTextServiceArgs) ToProjectAuthenticationMagicLinkTextServicePtrOutput() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return i.ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkTextServiceArgs) ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkTextServiceOutput).ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationMagicLinkTextServicePtrInput is an input type that accepts ProjectAuthenticationMagicLinkTextServiceArgs, ProjectAuthenticationMagicLinkTextServicePtr and ProjectAuthenticationMagicLinkTextServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkTextServicePtrInput` via:
//
//	        ProjectAuthenticationMagicLinkTextServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationMagicLinkTextServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkTextServicePtrOutput() ProjectAuthenticationMagicLinkTextServicePtrOutput
	ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(context.Context) ProjectAuthenticationMagicLinkTextServicePtrOutput
}

type projectAuthenticationMagicLinkTextServicePtrType ProjectAuthenticationMagicLinkTextServiceArgs

func ProjectAuthenticationMagicLinkTextServicePtr(v *ProjectAuthenticationMagicLinkTextServiceArgs) ProjectAuthenticationMagicLinkTextServicePtrInput {
	return (*projectAuthenticationMagicLinkTextServicePtrType)(v)
}

func (*projectAuthenticationMagicLinkTextServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLinkTextService)(nil)).Elem()
}

func (i *projectAuthenticationMagicLinkTextServicePtrType) ToProjectAuthenticationMagicLinkTextServicePtrOutput() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return i.ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationMagicLinkTextServicePtrType) ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkTextServicePtrOutput)
}

type ProjectAuthenticationMagicLinkTextServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkTextServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkTextService)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkTextServiceOutput) ToProjectAuthenticationMagicLinkTextServiceOutput() ProjectAuthenticationMagicLinkTextServiceOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServiceOutput) ToProjectAuthenticationMagicLinkTextServiceOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServiceOutput) ToProjectAuthenticationMagicLinkTextServicePtrOutput() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o.ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationMagicLinkTextServiceOutput) ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationMagicLinkTextService) *ProjectAuthenticationMagicLinkTextService {
		return &v
	}).(ProjectAuthenticationMagicLinkTextServicePtrOutput)
}

// The name of the SMS/text connector to use for sending text messages.
func (o ProjectAuthenticationMagicLinkTextServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of text message templates for different authentication flows.
func (o ProjectAuthenticationMagicLinkTextServiceOutput) Templates() ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextService) []ProjectAuthenticationMagicLinkTextServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkTextServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkTextServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationMagicLinkTextService)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkTextServicePtrOutput) ToProjectAuthenticationMagicLinkTextServicePtrOutput() ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServicePtrOutput) ToProjectAuthenticationMagicLinkTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServicePtrOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServicePtrOutput) Elem() ProjectAuthenticationMagicLinkTextServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkTextService) ProjectAuthenticationMagicLinkTextService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationMagicLinkTextService
		return ret
	}).(ProjectAuthenticationMagicLinkTextServiceOutput)
}

// The name of the SMS/text connector to use for sending text messages.
func (o ProjectAuthenticationMagicLinkTextServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkTextService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of text message templates for different authentication flows.
func (o ProjectAuthenticationMagicLinkTextServicePtrOutput) Templates() ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationMagicLinkTextService) []ProjectAuthenticationMagicLinkTextServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkTextServiceTemplate struct {
	// Whether this text template is currently active and in use.
	Active *bool `pulumi:"active"`
	// The content of the text message.
	Body string  `pulumi:"body"`
	Id   *string `pulumi:"id"`
	// Unique name for this text template.
	Name string `pulumi:"name"`
}

// ProjectAuthenticationMagicLinkTextServiceTemplateInput is an input type that accepts ProjectAuthenticationMagicLinkTextServiceTemplateArgs and ProjectAuthenticationMagicLinkTextServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkTextServiceTemplateInput` via:
//
//	ProjectAuthenticationMagicLinkTextServiceTemplateArgs{...}
type ProjectAuthenticationMagicLinkTextServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkTextServiceTemplateOutput() ProjectAuthenticationMagicLinkTextServiceTemplateOutput
	ToProjectAuthenticationMagicLinkTextServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateOutput
}

type ProjectAuthenticationMagicLinkTextServiceTemplateArgs struct {
	// Whether this text template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// The content of the text message.
	Body pulumi.StringInput    `pulumi:"body"`
	Id   pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this text template.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectAuthenticationMagicLinkTextServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkTextServiceTemplateArgs) ToProjectAuthenticationMagicLinkTextServiceTemplateOutput() ProjectAuthenticationMagicLinkTextServiceTemplateOutput {
	return i.ToProjectAuthenticationMagicLinkTextServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkTextServiceTemplateArgs) ToProjectAuthenticationMagicLinkTextServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkTextServiceTemplateOutput)
}

// ProjectAuthenticationMagicLinkTextServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationMagicLinkTextServiceTemplateArray and ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationMagicLinkTextServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationMagicLinkTextServiceTemplateArray{ ProjectAuthenticationMagicLinkTextServiceTemplateArgs{...} }
type ProjectAuthenticationMagicLinkTextServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput
	ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput
}

type ProjectAuthenticationMagicLinkTextServiceTemplateArray []ProjectAuthenticationMagicLinkTextServiceTemplateInput

func (ProjectAuthenticationMagicLinkTextServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationMagicLinkTextServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationMagicLinkTextServiceTemplateArray) ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationMagicLinkTextServiceTemplateArray) ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationMagicLinkTextServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkTextServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) ToProjectAuthenticationMagicLinkTextServiceTemplateOutput() ProjectAuthenticationMagicLinkTextServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) ToProjectAuthenticationMagicLinkTextServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateOutput {
	return o
}

// Whether this text template is currently active and in use.
func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// The content of the text message.
func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextServiceTemplate) string { return v.Body }).(pulumi.StringOutput)
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this text template.
func (o ProjectAuthenticationMagicLinkTextServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationMagicLinkTextServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationMagicLinkTextServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput) ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput() ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput) ToProjectAuthenticationMagicLinkTextServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationMagicLinkTextServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationMagicLinkTextServiceTemplate {
		return vs[0].([]ProjectAuthenticationMagicLinkTextServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationMagicLinkTextServiceTemplateOutput)
}

type ProjectAuthenticationOauth struct {
	// Custom OAuth providers configured for this project.
	Custom map[string]ProjectAuthenticationOauthCustom `pulumi:"custom"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Custom configurations for builtin OAuth providers such as Apple, Google, GitHub, Facebook, etc.
	System *ProjectAuthenticationOauthSystem `pulumi:"system"`
}

// ProjectAuthenticationOauthInput is an input type that accepts ProjectAuthenticationOauthArgs and ProjectAuthenticationOauthOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthInput` via:
//
//	ProjectAuthenticationOauthArgs{...}
type ProjectAuthenticationOauthInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthOutput() ProjectAuthenticationOauthOutput
	ToProjectAuthenticationOauthOutputWithContext(context.Context) ProjectAuthenticationOauthOutput
}

type ProjectAuthenticationOauthArgs struct {
	// Custom OAuth providers configured for this project.
	Custom ProjectAuthenticationOauthCustomMapInput `pulumi:"custom"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Custom configurations for builtin OAuth providers such as Apple, Google, GitHub, Facebook, etc.
	System ProjectAuthenticationOauthSystemPtrInput `pulumi:"system"`
}

func (ProjectAuthenticationOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauth)(nil)).Elem()
}

func (i ProjectAuthenticationOauthArgs) ToProjectAuthenticationOauthOutput() ProjectAuthenticationOauthOutput {
	return i.ToProjectAuthenticationOauthOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthArgs) ToProjectAuthenticationOauthOutputWithContext(ctx context.Context) ProjectAuthenticationOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthOutput)
}

func (i ProjectAuthenticationOauthArgs) ToProjectAuthenticationOauthPtrOutput() ProjectAuthenticationOauthPtrOutput {
	return i.ToProjectAuthenticationOauthPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthArgs) ToProjectAuthenticationOauthPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthOutput).ToProjectAuthenticationOauthPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthPtrInput is an input type that accepts ProjectAuthenticationOauthArgs, ProjectAuthenticationOauthPtr and ProjectAuthenticationOauthPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthPtrInput` via:
//
//	        ProjectAuthenticationOauthArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthPtrOutput() ProjectAuthenticationOauthPtrOutput
	ToProjectAuthenticationOauthPtrOutputWithContext(context.Context) ProjectAuthenticationOauthPtrOutput
}

type projectAuthenticationOauthPtrType ProjectAuthenticationOauthArgs

func ProjectAuthenticationOauthPtr(v *ProjectAuthenticationOauthArgs) ProjectAuthenticationOauthPtrInput {
	return (*projectAuthenticationOauthPtrType)(v)
}

func (*projectAuthenticationOauthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauth)(nil)).Elem()
}

func (i *projectAuthenticationOauthPtrType) ToProjectAuthenticationOauthPtrOutput() ProjectAuthenticationOauthPtrOutput {
	return i.ToProjectAuthenticationOauthPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthPtrType) ToProjectAuthenticationOauthPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthPtrOutput)
}

type ProjectAuthenticationOauthOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauth)(nil)).Elem()
}

func (o ProjectAuthenticationOauthOutput) ToProjectAuthenticationOauthOutput() ProjectAuthenticationOauthOutput {
	return o
}

func (o ProjectAuthenticationOauthOutput) ToProjectAuthenticationOauthOutputWithContext(ctx context.Context) ProjectAuthenticationOauthOutput {
	return o
}

func (o ProjectAuthenticationOauthOutput) ToProjectAuthenticationOauthPtrOutput() ProjectAuthenticationOauthPtrOutput {
	return o.ToProjectAuthenticationOauthPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthOutput) ToProjectAuthenticationOauthPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauth) *ProjectAuthenticationOauth {
		return &v
	}).(ProjectAuthenticationOauthPtrOutput)
}

// Custom OAuth providers configured for this project.
func (o ProjectAuthenticationOauthOutput) Custom() ProjectAuthenticationOauthCustomMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauth) map[string]ProjectAuthenticationOauthCustom { return v.Custom }).(ProjectAuthenticationOauthCustomMapOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauth) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Custom configurations for builtin OAuth providers such as Apple, Google, GitHub, Facebook, etc.
func (o ProjectAuthenticationOauthOutput) System() ProjectAuthenticationOauthSystemPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauth) *ProjectAuthenticationOauthSystem { return v.System }).(ProjectAuthenticationOauthSystemPtrOutput)
}

type ProjectAuthenticationOauthPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauth)(nil)).Elem()
}

func (o ProjectAuthenticationOauthPtrOutput) ToProjectAuthenticationOauthPtrOutput() ProjectAuthenticationOauthPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthPtrOutput) ToProjectAuthenticationOauthPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthPtrOutput) Elem() ProjectAuthenticationOauthOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauth) ProjectAuthenticationOauth {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauth
		return ret
	}).(ProjectAuthenticationOauthOutput)
}

// Custom OAuth providers configured for this project.
func (o ProjectAuthenticationOauthPtrOutput) Custom() ProjectAuthenticationOauthCustomMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauth) map[string]ProjectAuthenticationOauthCustom {
		if v == nil {
			return nil
		}
		return v.Custom
	}).(ProjectAuthenticationOauthCustomMapOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauth) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Custom configurations for builtin OAuth providers such as Apple, Google, GitHub, Facebook, etc.
func (o ProjectAuthenticationOauthPtrOutput) System() ProjectAuthenticationOauthSystemPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauth) *ProjectAuthenticationOauthSystem {
		if v == nil {
			return nil
		}
		return v.System
	}).(ProjectAuthenticationOauthSystemPtrOutput)
}

type ProjectAuthenticationOauthCustom struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthCustomProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthCustomInput is an input type that accepts ProjectAuthenticationOauthCustomArgs and ProjectAuthenticationOauthCustomOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthCustomInput` via:
//
//	ProjectAuthenticationOauthCustomArgs{...}
type ProjectAuthenticationOauthCustomInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthCustomOutput() ProjectAuthenticationOauthCustomOutput
	ToProjectAuthenticationOauthCustomOutputWithContext(context.Context) ProjectAuthenticationOauthCustomOutput
}

type ProjectAuthenticationOauthCustomArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthCustom)(nil)).Elem()
}

func (i ProjectAuthenticationOauthCustomArgs) ToProjectAuthenticationOauthCustomOutput() ProjectAuthenticationOauthCustomOutput {
	return i.ToProjectAuthenticationOauthCustomOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthCustomArgs) ToProjectAuthenticationOauthCustomOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthCustomOutput)
}

// ProjectAuthenticationOauthCustomMapInput is an input type that accepts ProjectAuthenticationOauthCustomMap and ProjectAuthenticationOauthCustomMapOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthCustomMapInput` via:
//
//	ProjectAuthenticationOauthCustomMap{ "key": ProjectAuthenticationOauthCustomArgs{...} }
type ProjectAuthenticationOauthCustomMapInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthCustomMapOutput() ProjectAuthenticationOauthCustomMapOutput
	ToProjectAuthenticationOauthCustomMapOutputWithContext(context.Context) ProjectAuthenticationOauthCustomMapOutput
}

type ProjectAuthenticationOauthCustomMap map[string]ProjectAuthenticationOauthCustomInput

func (ProjectAuthenticationOauthCustomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectAuthenticationOauthCustom)(nil)).Elem()
}

func (i ProjectAuthenticationOauthCustomMap) ToProjectAuthenticationOauthCustomMapOutput() ProjectAuthenticationOauthCustomMapOutput {
	return i.ToProjectAuthenticationOauthCustomMapOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthCustomMap) ToProjectAuthenticationOauthCustomMapOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthCustomMapOutput)
}

type ProjectAuthenticationOauthCustomOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthCustom)(nil)).Elem()
}

func (o ProjectAuthenticationOauthCustomOutput) ToProjectAuthenticationOauthCustomOutput() ProjectAuthenticationOauthCustomOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomOutput) ToProjectAuthenticationOauthCustomOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomOutput {
	return o
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthCustomOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthCustomOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthCustomOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthCustomOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthCustomOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthCustomOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthCustomOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthCustomOutput) ProviderTokenManagement() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *ProjectAuthenticationOauthCustomProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthCustomOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthCustomOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthCustom) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthCustomMapOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthCustomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectAuthenticationOauthCustom)(nil)).Elem()
}

func (o ProjectAuthenticationOauthCustomMapOutput) ToProjectAuthenticationOauthCustomMapOutput() ProjectAuthenticationOauthCustomMapOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomMapOutput) ToProjectAuthenticationOauthCustomMapOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomMapOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomMapOutput) MapIndex(k pulumi.StringInput) ProjectAuthenticationOauthCustomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProjectAuthenticationOauthCustom {
		return vs[0].(map[string]ProjectAuthenticationOauthCustom)[vs[1].(string)]
	}).(ProjectAuthenticationOauthCustomOutput)
}

type ProjectAuthenticationOauthCustomProviderTokenManagement struct {
}

// ProjectAuthenticationOauthCustomProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthCustomProviderTokenManagementArgs and ProjectAuthenticationOauthCustomProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthCustomProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthCustomProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthCustomProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthCustomProviderTokenManagementOutput() ProjectAuthenticationOauthCustomProviderTokenManagementOutput
	ToProjectAuthenticationOauthCustomProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementOutput
}

type ProjectAuthenticationOauthCustomProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthCustomProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ToProjectAuthenticationOauthCustomProviderTokenManagementOutput() ProjectAuthenticationOauthCustomProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthCustomProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ToProjectAuthenticationOauthCustomProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthCustomProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthCustomProviderTokenManagementOutput).ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthCustomProviderTokenManagementArgs, ProjectAuthenticationOauthCustomProviderTokenManagementPtr and ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthCustomProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthCustomProviderTokenManagementPtrType ProjectAuthenticationOauthCustomProviderTokenManagementArgs

func ProjectAuthenticationOauthCustomProviderTokenManagementPtr(v *ProjectAuthenticationOauthCustomProviderTokenManagementArgs) ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthCustomProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthCustomProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthCustomProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthCustomProviderTokenManagementPtrType) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthCustomProviderTokenManagementPtrType) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthCustomProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthCustomProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthCustomProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementOutput() ProjectAuthenticationOauthCustomProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthCustomProviderTokenManagement) *ProjectAuthenticationOauthCustomProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthCustomProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput() ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthCustomProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthCustomProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthCustomProviderTokenManagement) ProjectAuthenticationOauthCustomProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthCustomProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthCustomProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystem struct {
	// Apple's OAuth provider, allowing users to authenticate with their Apple Account.
	Apple *ProjectAuthenticationOauthSystemApple `pulumi:"apple"`
	// Discord's OAuth provider, allowing users to authenticate with their Discord account.
	Discord *ProjectAuthenticationOauthSystemDiscord `pulumi:"discord"`
	// Facebook's OAuth provider, allowing users to authenticate with their Facebook account.
	Facebook *ProjectAuthenticationOauthSystemFacebook `pulumi:"facebook"`
	// GitHub's OAuth provider, allowing users to authenticate with their GitHub account.
	Github *ProjectAuthenticationOauthSystemGithub `pulumi:"github"`
	// GitLab's OAuth provider, allowing users to authenticate with their GitLab account.
	Gitlab *ProjectAuthenticationOauthSystemGitlab `pulumi:"gitlab"`
	// Google's OAuth provider, allowing users to authenticate with their Google account.
	Google *ProjectAuthenticationOauthSystemGoogle `pulumi:"google"`
	// LinkedIn's OAuth provider, allowing users to authenticate with their LinkedIn account.
	Linkedin *ProjectAuthenticationOauthSystemLinkedin `pulumi:"linkedin"`
	// Microsoft's OAuth provider, allowing users to authenticate with their Microsoft account.
	Microsoft *ProjectAuthenticationOauthSystemMicrosoft `pulumi:"microsoft"`
	// Slack's OAuth provider, allowing users to authenticate with their Slack account.
	Slack *ProjectAuthenticationOauthSystemSlack `pulumi:"slack"`
}

// ProjectAuthenticationOauthSystemInput is an input type that accepts ProjectAuthenticationOauthSystemArgs and ProjectAuthenticationOauthSystemOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemInput` via:
//
//	ProjectAuthenticationOauthSystemArgs{...}
type ProjectAuthenticationOauthSystemInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemOutput() ProjectAuthenticationOauthSystemOutput
	ToProjectAuthenticationOauthSystemOutputWithContext(context.Context) ProjectAuthenticationOauthSystemOutput
}

type ProjectAuthenticationOauthSystemArgs struct {
	// Apple's OAuth provider, allowing users to authenticate with their Apple Account.
	Apple ProjectAuthenticationOauthSystemApplePtrInput `pulumi:"apple"`
	// Discord's OAuth provider, allowing users to authenticate with their Discord account.
	Discord ProjectAuthenticationOauthSystemDiscordPtrInput `pulumi:"discord"`
	// Facebook's OAuth provider, allowing users to authenticate with their Facebook account.
	Facebook ProjectAuthenticationOauthSystemFacebookPtrInput `pulumi:"facebook"`
	// GitHub's OAuth provider, allowing users to authenticate with their GitHub account.
	Github ProjectAuthenticationOauthSystemGithubPtrInput `pulumi:"github"`
	// GitLab's OAuth provider, allowing users to authenticate with their GitLab account.
	Gitlab ProjectAuthenticationOauthSystemGitlabPtrInput `pulumi:"gitlab"`
	// Google's OAuth provider, allowing users to authenticate with their Google account.
	Google ProjectAuthenticationOauthSystemGooglePtrInput `pulumi:"google"`
	// LinkedIn's OAuth provider, allowing users to authenticate with their LinkedIn account.
	Linkedin ProjectAuthenticationOauthSystemLinkedinPtrInput `pulumi:"linkedin"`
	// Microsoft's OAuth provider, allowing users to authenticate with their Microsoft account.
	Microsoft ProjectAuthenticationOauthSystemMicrosoftPtrInput `pulumi:"microsoft"`
	// Slack's OAuth provider, allowing users to authenticate with their Slack account.
	Slack ProjectAuthenticationOauthSystemSlackPtrInput `pulumi:"slack"`
}

func (ProjectAuthenticationOauthSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystem)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemArgs) ToProjectAuthenticationOauthSystemOutput() ProjectAuthenticationOauthSystemOutput {
	return i.ToProjectAuthenticationOauthSystemOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemArgs) ToProjectAuthenticationOauthSystemOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemOutput)
}

func (i ProjectAuthenticationOauthSystemArgs) ToProjectAuthenticationOauthSystemPtrOutput() ProjectAuthenticationOauthSystemPtrOutput {
	return i.ToProjectAuthenticationOauthSystemPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemArgs) ToProjectAuthenticationOauthSystemPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemOutput).ToProjectAuthenticationOauthSystemPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemPtrInput is an input type that accepts ProjectAuthenticationOauthSystemArgs, ProjectAuthenticationOauthSystemPtr and ProjectAuthenticationOauthSystemPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemPtrOutput() ProjectAuthenticationOauthSystemPtrOutput
	ToProjectAuthenticationOauthSystemPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemPtrOutput
}

type projectAuthenticationOauthSystemPtrType ProjectAuthenticationOauthSystemArgs

func ProjectAuthenticationOauthSystemPtr(v *ProjectAuthenticationOauthSystemArgs) ProjectAuthenticationOauthSystemPtrInput {
	return (*projectAuthenticationOauthSystemPtrType)(v)
}

func (*projectAuthenticationOauthSystemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystem)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemPtrType) ToProjectAuthenticationOauthSystemPtrOutput() ProjectAuthenticationOauthSystemPtrOutput {
	return i.ToProjectAuthenticationOauthSystemPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemPtrType) ToProjectAuthenticationOauthSystemPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemPtrOutput)
}

type ProjectAuthenticationOauthSystemOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystem)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemOutput) ToProjectAuthenticationOauthSystemOutput() ProjectAuthenticationOauthSystemOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemOutput) ToProjectAuthenticationOauthSystemOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemOutput) ToProjectAuthenticationOauthSystemPtrOutput() ProjectAuthenticationOauthSystemPtrOutput {
	return o.ToProjectAuthenticationOauthSystemPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemOutput) ToProjectAuthenticationOauthSystemPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystem {
		return &v
	}).(ProjectAuthenticationOauthSystemPtrOutput)
}

// Apple's OAuth provider, allowing users to authenticate with their Apple Account.
func (o ProjectAuthenticationOauthSystemOutput) Apple() ProjectAuthenticationOauthSystemApplePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemApple { return v.Apple }).(ProjectAuthenticationOauthSystemApplePtrOutput)
}

// Discord's OAuth provider, allowing users to authenticate with their Discord account.
func (o ProjectAuthenticationOauthSystemOutput) Discord() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemDiscord { return v.Discord }).(ProjectAuthenticationOauthSystemDiscordPtrOutput)
}

// Facebook's OAuth provider, allowing users to authenticate with their Facebook account.
func (o ProjectAuthenticationOauthSystemOutput) Facebook() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemFacebook { return v.Facebook }).(ProjectAuthenticationOauthSystemFacebookPtrOutput)
}

// GitHub's OAuth provider, allowing users to authenticate with their GitHub account.
func (o ProjectAuthenticationOauthSystemOutput) Github() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGithub { return v.Github }).(ProjectAuthenticationOauthSystemGithubPtrOutput)
}

// GitLab's OAuth provider, allowing users to authenticate with their GitLab account.
func (o ProjectAuthenticationOauthSystemOutput) Gitlab() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGitlab { return v.Gitlab }).(ProjectAuthenticationOauthSystemGitlabPtrOutput)
}

// Google's OAuth provider, allowing users to authenticate with their Google account.
func (o ProjectAuthenticationOauthSystemOutput) Google() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGoogle { return v.Google }).(ProjectAuthenticationOauthSystemGooglePtrOutput)
}

// LinkedIn's OAuth provider, allowing users to authenticate with their LinkedIn account.
func (o ProjectAuthenticationOauthSystemOutput) Linkedin() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemLinkedin { return v.Linkedin }).(ProjectAuthenticationOauthSystemLinkedinPtrOutput)
}

// Microsoft's OAuth provider, allowing users to authenticate with their Microsoft account.
func (o ProjectAuthenticationOauthSystemOutput) Microsoft() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemMicrosoft {
		return v.Microsoft
	}).(ProjectAuthenticationOauthSystemMicrosoftPtrOutput)
}

// Slack's OAuth provider, allowing users to authenticate with their Slack account.
func (o ProjectAuthenticationOauthSystemOutput) Slack() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemSlack { return v.Slack }).(ProjectAuthenticationOauthSystemSlackPtrOutput)
}

type ProjectAuthenticationOauthSystemPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystem)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemPtrOutput) ToProjectAuthenticationOauthSystemPtrOutput() ProjectAuthenticationOauthSystemPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemPtrOutput) ToProjectAuthenticationOauthSystemPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemPtrOutput) Elem() ProjectAuthenticationOauthSystemOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) ProjectAuthenticationOauthSystem {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystem
		return ret
	}).(ProjectAuthenticationOauthSystemOutput)
}

// Apple's OAuth provider, allowing users to authenticate with their Apple Account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Apple() ProjectAuthenticationOauthSystemApplePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemApple {
		if v == nil {
			return nil
		}
		return v.Apple
	}).(ProjectAuthenticationOauthSystemApplePtrOutput)
}

// Discord's OAuth provider, allowing users to authenticate with their Discord account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Discord() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemDiscord {
		if v == nil {
			return nil
		}
		return v.Discord
	}).(ProjectAuthenticationOauthSystemDiscordPtrOutput)
}

// Facebook's OAuth provider, allowing users to authenticate with their Facebook account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Facebook() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemFacebook {
		if v == nil {
			return nil
		}
		return v.Facebook
	}).(ProjectAuthenticationOauthSystemFacebookPtrOutput)
}

// GitHub's OAuth provider, allowing users to authenticate with their GitHub account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Github() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGithub {
		if v == nil {
			return nil
		}
		return v.Github
	}).(ProjectAuthenticationOauthSystemGithubPtrOutput)
}

// GitLab's OAuth provider, allowing users to authenticate with their GitLab account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Gitlab() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGitlab {
		if v == nil {
			return nil
		}
		return v.Gitlab
	}).(ProjectAuthenticationOauthSystemGitlabPtrOutput)
}

// Google's OAuth provider, allowing users to authenticate with their Google account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Google() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemGoogle {
		if v == nil {
			return nil
		}
		return v.Google
	}).(ProjectAuthenticationOauthSystemGooglePtrOutput)
}

// LinkedIn's OAuth provider, allowing users to authenticate with their LinkedIn account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Linkedin() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemLinkedin {
		if v == nil {
			return nil
		}
		return v.Linkedin
	}).(ProjectAuthenticationOauthSystemLinkedinPtrOutput)
}

// Microsoft's OAuth provider, allowing users to authenticate with their Microsoft account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Microsoft() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemMicrosoft {
		if v == nil {
			return nil
		}
		return v.Microsoft
	}).(ProjectAuthenticationOauthSystemMicrosoftPtrOutput)
}

// Slack's OAuth provider, allowing users to authenticate with their Slack account.
func (o ProjectAuthenticationOauthSystemPtrOutput) Slack() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystem) *ProjectAuthenticationOauthSystemSlack {
		if v == nil {
			return nil
		}
		return v.Slack
	}).(ProjectAuthenticationOauthSystemSlackPtrOutput)
}

type ProjectAuthenticationOauthSystemApple struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemAppleProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemAppleInput is an input type that accepts ProjectAuthenticationOauthSystemAppleArgs and ProjectAuthenticationOauthSystemAppleOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemAppleInput` via:
//
//	ProjectAuthenticationOauthSystemAppleArgs{...}
type ProjectAuthenticationOauthSystemAppleInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemAppleOutput() ProjectAuthenticationOauthSystemAppleOutput
	ToProjectAuthenticationOauthSystemAppleOutputWithContext(context.Context) ProjectAuthenticationOauthSystemAppleOutput
}

type ProjectAuthenticationOauthSystemAppleArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemAppleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemApple)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemAppleArgs) ToProjectAuthenticationOauthSystemAppleOutput() ProjectAuthenticationOauthSystemAppleOutput {
	return i.ToProjectAuthenticationOauthSystemAppleOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemAppleArgs) ToProjectAuthenticationOauthSystemAppleOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemAppleOutput)
}

func (i ProjectAuthenticationOauthSystemAppleArgs) ToProjectAuthenticationOauthSystemApplePtrOutput() ProjectAuthenticationOauthSystemApplePtrOutput {
	return i.ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemAppleArgs) ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemAppleOutput).ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemApplePtrInput is an input type that accepts ProjectAuthenticationOauthSystemAppleArgs, ProjectAuthenticationOauthSystemApplePtr and ProjectAuthenticationOauthSystemApplePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemApplePtrInput` via:
//
//	        ProjectAuthenticationOauthSystemAppleArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemApplePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemApplePtrOutput() ProjectAuthenticationOauthSystemApplePtrOutput
	ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemApplePtrOutput
}

type projectAuthenticationOauthSystemApplePtrType ProjectAuthenticationOauthSystemAppleArgs

func ProjectAuthenticationOauthSystemApplePtr(v *ProjectAuthenticationOauthSystemAppleArgs) ProjectAuthenticationOauthSystemApplePtrInput {
	return (*projectAuthenticationOauthSystemApplePtrType)(v)
}

func (*projectAuthenticationOauthSystemApplePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemApple)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemApplePtrType) ToProjectAuthenticationOauthSystemApplePtrOutput() ProjectAuthenticationOauthSystemApplePtrOutput {
	return i.ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemApplePtrType) ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemApplePtrOutput)
}

type ProjectAuthenticationOauthSystemAppleOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemAppleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemApple)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemAppleOutput) ToProjectAuthenticationOauthSystemAppleOutput() ProjectAuthenticationOauthSystemAppleOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleOutput) ToProjectAuthenticationOauthSystemAppleOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleOutput) ToProjectAuthenticationOauthSystemApplePtrOutput() ProjectAuthenticationOauthSystemApplePtrOutput {
	return o.ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemAppleOutput) ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemApplePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemApple) *ProjectAuthenticationOauthSystemApple {
		return &v
	}).(ProjectAuthenticationOauthSystemApplePtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemAppleOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemAppleOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemAppleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemAppleOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemAppleOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemAppleOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemAppleOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemAppleOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemApple) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemApplePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemApplePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemApple)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemApplePtrOutput) ToProjectAuthenticationOauthSystemApplePtrOutput() ProjectAuthenticationOauthSystemApplePtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemApplePtrOutput) ToProjectAuthenticationOauthSystemApplePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemApplePtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemApplePtrOutput) Elem() ProjectAuthenticationOauthSystemAppleOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) ProjectAuthenticationOauthSystemApple {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemApple
		return ret
	}).(ProjectAuthenticationOauthSystemAppleOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemApplePtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemApple) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemAppleProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemAppleProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs and ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemAppleProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemAppleProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemAppleProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs, ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtr and ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemAppleProviderTokenManagementPtrType ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemAppleProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemAppleProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemAppleProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemAppleProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemAppleProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemAppleProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemAppleProviderTokenManagement) *ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemAppleProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemAppleProviderTokenManagement) ProjectAuthenticationOauthSystemAppleProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemAppleProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemDiscord struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemDiscordProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemDiscordInput is an input type that accepts ProjectAuthenticationOauthSystemDiscordArgs and ProjectAuthenticationOauthSystemDiscordOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemDiscordInput` via:
//
//	ProjectAuthenticationOauthSystemDiscordArgs{...}
type ProjectAuthenticationOauthSystemDiscordInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemDiscordOutput() ProjectAuthenticationOauthSystemDiscordOutput
	ToProjectAuthenticationOauthSystemDiscordOutputWithContext(context.Context) ProjectAuthenticationOauthSystemDiscordOutput
}

type ProjectAuthenticationOauthSystemDiscordArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemDiscordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscord)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemDiscordArgs) ToProjectAuthenticationOauthSystemDiscordOutput() ProjectAuthenticationOauthSystemDiscordOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemDiscordArgs) ToProjectAuthenticationOauthSystemDiscordOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordOutput)
}

func (i ProjectAuthenticationOauthSystemDiscordArgs) ToProjectAuthenticationOauthSystemDiscordPtrOutput() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemDiscordArgs) ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordOutput).ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemDiscordPtrInput is an input type that accepts ProjectAuthenticationOauthSystemDiscordArgs, ProjectAuthenticationOauthSystemDiscordPtr and ProjectAuthenticationOauthSystemDiscordPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemDiscordPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemDiscordArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemDiscordPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemDiscordPtrOutput() ProjectAuthenticationOauthSystemDiscordPtrOutput
	ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemDiscordPtrOutput
}

type projectAuthenticationOauthSystemDiscordPtrType ProjectAuthenticationOauthSystemDiscordArgs

func ProjectAuthenticationOauthSystemDiscordPtr(v *ProjectAuthenticationOauthSystemDiscordArgs) ProjectAuthenticationOauthSystemDiscordPtrInput {
	return (*projectAuthenticationOauthSystemDiscordPtrType)(v)
}

func (*projectAuthenticationOauthSystemDiscordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemDiscord)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemDiscordPtrType) ToProjectAuthenticationOauthSystemDiscordPtrOutput() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemDiscordPtrType) ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordPtrOutput)
}

type ProjectAuthenticationOauthSystemDiscordOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemDiscordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscord)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemDiscordOutput) ToProjectAuthenticationOauthSystemDiscordOutput() ProjectAuthenticationOauthSystemDiscordOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordOutput) ToProjectAuthenticationOauthSystemDiscordOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordOutput) ToProjectAuthenticationOauthSystemDiscordPtrOutput() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o.ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemDiscordOutput) ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemDiscord) *ProjectAuthenticationOauthSystemDiscord {
		return &v
	}).(ProjectAuthenticationOauthSystemDiscordPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemDiscordOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemDiscordOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemDiscordOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemDiscordOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemDiscordOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemDiscord) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemDiscordPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemDiscordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemDiscord)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ToProjectAuthenticationOauthSystemDiscordPtrOutput() ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ToProjectAuthenticationOauthSystemDiscordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Elem() ProjectAuthenticationOauthSystemDiscordOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) ProjectAuthenticationOauthSystemDiscord {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemDiscord
		return ret
	}).(ProjectAuthenticationOauthSystemDiscordOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemDiscordPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscord) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemDiscordProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemDiscordProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs and ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemDiscordProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemDiscordProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs, ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtr and ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemDiscordProviderTokenManagementPtrType ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemDiscordProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemDiscordProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemDiscordProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemDiscordProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemDiscordProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemDiscordProviderTokenManagement) *ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemDiscordProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemDiscordProviderTokenManagement) ProjectAuthenticationOauthSystemDiscordProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemDiscordProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemFacebook struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemFacebookProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemFacebookInput is an input type that accepts ProjectAuthenticationOauthSystemFacebookArgs and ProjectAuthenticationOauthSystemFacebookOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemFacebookInput` via:
//
//	ProjectAuthenticationOauthSystemFacebookArgs{...}
type ProjectAuthenticationOauthSystemFacebookInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemFacebookOutput() ProjectAuthenticationOauthSystemFacebookOutput
	ToProjectAuthenticationOauthSystemFacebookOutputWithContext(context.Context) ProjectAuthenticationOauthSystemFacebookOutput
}

type ProjectAuthenticationOauthSystemFacebookArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemFacebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebook)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemFacebookArgs) ToProjectAuthenticationOauthSystemFacebookOutput() ProjectAuthenticationOauthSystemFacebookOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemFacebookArgs) ToProjectAuthenticationOauthSystemFacebookOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookOutput)
}

func (i ProjectAuthenticationOauthSystemFacebookArgs) ToProjectAuthenticationOauthSystemFacebookPtrOutput() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemFacebookArgs) ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookOutput).ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemFacebookPtrInput is an input type that accepts ProjectAuthenticationOauthSystemFacebookArgs, ProjectAuthenticationOauthSystemFacebookPtr and ProjectAuthenticationOauthSystemFacebookPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemFacebookPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemFacebookArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemFacebookPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemFacebookPtrOutput() ProjectAuthenticationOauthSystemFacebookPtrOutput
	ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemFacebookPtrOutput
}

type projectAuthenticationOauthSystemFacebookPtrType ProjectAuthenticationOauthSystemFacebookArgs

func ProjectAuthenticationOauthSystemFacebookPtr(v *ProjectAuthenticationOauthSystemFacebookArgs) ProjectAuthenticationOauthSystemFacebookPtrInput {
	return (*projectAuthenticationOauthSystemFacebookPtrType)(v)
}

func (*projectAuthenticationOauthSystemFacebookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemFacebook)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemFacebookPtrType) ToProjectAuthenticationOauthSystemFacebookPtrOutput() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemFacebookPtrType) ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookPtrOutput)
}

type ProjectAuthenticationOauthSystemFacebookOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemFacebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebook)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemFacebookOutput) ToProjectAuthenticationOauthSystemFacebookOutput() ProjectAuthenticationOauthSystemFacebookOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookOutput) ToProjectAuthenticationOauthSystemFacebookOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookOutput) ToProjectAuthenticationOauthSystemFacebookPtrOutput() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o.ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemFacebookOutput) ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemFacebook) *ProjectAuthenticationOauthSystemFacebook {
		return &v
	}).(ProjectAuthenticationOauthSystemFacebookPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemFacebookOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemFacebookOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemFacebookOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemFacebookOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemFacebookOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemFacebook) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemFacebookPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemFacebookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemFacebook)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ToProjectAuthenticationOauthSystemFacebookPtrOutput() ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ToProjectAuthenticationOauthSystemFacebookPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Elem() ProjectAuthenticationOauthSystemFacebookOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) ProjectAuthenticationOauthSystemFacebook {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemFacebook
		return ret
	}).(ProjectAuthenticationOauthSystemFacebookOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemFacebookPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebook) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemFacebookProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemFacebookProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs and ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemFacebookProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemFacebookProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs, ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtr and ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemFacebookProviderTokenManagementPtrType ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemFacebookProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemFacebookProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemFacebookProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemFacebookProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemFacebookProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemFacebookProviderTokenManagement) *ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemFacebookProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemFacebookProviderTokenManagement) ProjectAuthenticationOauthSystemFacebookProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemFacebookProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemGithub struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemGithubProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemGithubInput is an input type that accepts ProjectAuthenticationOauthSystemGithubArgs and ProjectAuthenticationOauthSystemGithubOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGithubInput` via:
//
//	ProjectAuthenticationOauthSystemGithubArgs{...}
type ProjectAuthenticationOauthSystemGithubInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGithubOutput() ProjectAuthenticationOauthSystemGithubOutput
	ToProjectAuthenticationOauthSystemGithubOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGithubOutput
}

type ProjectAuthenticationOauthSystemGithubArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGithub)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGithubArgs) ToProjectAuthenticationOauthSystemGithubOutput() ProjectAuthenticationOauthSystemGithubOutput {
	return i.ToProjectAuthenticationOauthSystemGithubOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGithubArgs) ToProjectAuthenticationOauthSystemGithubOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubOutput)
}

func (i ProjectAuthenticationOauthSystemGithubArgs) ToProjectAuthenticationOauthSystemGithubPtrOutput() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGithubArgs) ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubOutput).ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGithubPtrInput is an input type that accepts ProjectAuthenticationOauthSystemGithubArgs, ProjectAuthenticationOauthSystemGithubPtr and ProjectAuthenticationOauthSystemGithubPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGithubPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGithubArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGithubPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGithubPtrOutput() ProjectAuthenticationOauthSystemGithubPtrOutput
	ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGithubPtrOutput
}

type projectAuthenticationOauthSystemGithubPtrType ProjectAuthenticationOauthSystemGithubArgs

func ProjectAuthenticationOauthSystemGithubPtr(v *ProjectAuthenticationOauthSystemGithubArgs) ProjectAuthenticationOauthSystemGithubPtrInput {
	return (*projectAuthenticationOauthSystemGithubPtrType)(v)
}

func (*projectAuthenticationOauthSystemGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGithub)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGithubPtrType) ToProjectAuthenticationOauthSystemGithubPtrOutput() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGithubPtrType) ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubPtrOutput)
}

type ProjectAuthenticationOauthSystemGithubOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGithub)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGithubOutput) ToProjectAuthenticationOauthSystemGithubOutput() ProjectAuthenticationOauthSystemGithubOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubOutput) ToProjectAuthenticationOauthSystemGithubOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubOutput) ToProjectAuthenticationOauthSystemGithubPtrOutput() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o.ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGithubOutput) ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGithub) *ProjectAuthenticationOauthSystemGithub {
		return &v
	}).(ProjectAuthenticationOauthSystemGithubPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGithubOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGithubOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGithubOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGithubOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGithubOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGithubOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGithubOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGithub) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGithubPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGithub)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ToProjectAuthenticationOauthSystemGithubPtrOutput() ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ToProjectAuthenticationOauthSystemGithubPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Elem() ProjectAuthenticationOauthSystemGithubOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) ProjectAuthenticationOauthSystemGithub {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGithub
		return ret
	}).(ProjectAuthenticationOauthSystemGithubOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGithubPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithub) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGithubProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemGithubProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs and ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGithubProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemGithubProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs, ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtr and ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemGithubProviderTokenManagementPtrType ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemGithubProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemGithubProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGithubProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGithubProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGithubProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGithubProviderTokenManagement) *ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGithubProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGithubProviderTokenManagement) ProjectAuthenticationOauthSystemGithubProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGithubProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemGitlab struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemGitlabProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemGitlabInput is an input type that accepts ProjectAuthenticationOauthSystemGitlabArgs and ProjectAuthenticationOauthSystemGitlabOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGitlabInput` via:
//
//	ProjectAuthenticationOauthSystemGitlabArgs{...}
type ProjectAuthenticationOauthSystemGitlabInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGitlabOutput() ProjectAuthenticationOauthSystemGitlabOutput
	ToProjectAuthenticationOauthSystemGitlabOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGitlabOutput
}

type ProjectAuthenticationOauthSystemGitlabArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemGitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlab)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGitlabArgs) ToProjectAuthenticationOauthSystemGitlabOutput() ProjectAuthenticationOauthSystemGitlabOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGitlabArgs) ToProjectAuthenticationOauthSystemGitlabOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabOutput)
}

func (i ProjectAuthenticationOauthSystemGitlabArgs) ToProjectAuthenticationOauthSystemGitlabPtrOutput() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGitlabArgs) ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabOutput).ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGitlabPtrInput is an input type that accepts ProjectAuthenticationOauthSystemGitlabArgs, ProjectAuthenticationOauthSystemGitlabPtr and ProjectAuthenticationOauthSystemGitlabPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGitlabPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGitlabArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGitlabPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGitlabPtrOutput() ProjectAuthenticationOauthSystemGitlabPtrOutput
	ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGitlabPtrOutput
}

type projectAuthenticationOauthSystemGitlabPtrType ProjectAuthenticationOauthSystemGitlabArgs

func ProjectAuthenticationOauthSystemGitlabPtr(v *ProjectAuthenticationOauthSystemGitlabArgs) ProjectAuthenticationOauthSystemGitlabPtrInput {
	return (*projectAuthenticationOauthSystemGitlabPtrType)(v)
}

func (*projectAuthenticationOauthSystemGitlabPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGitlab)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGitlabPtrType) ToProjectAuthenticationOauthSystemGitlabPtrOutput() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGitlabPtrType) ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabPtrOutput)
}

type ProjectAuthenticationOauthSystemGitlabOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlab)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGitlabOutput) ToProjectAuthenticationOauthSystemGitlabOutput() ProjectAuthenticationOauthSystemGitlabOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabOutput) ToProjectAuthenticationOauthSystemGitlabOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabOutput) ToProjectAuthenticationOauthSystemGitlabPtrOutput() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o.ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGitlabOutput) ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGitlab) *ProjectAuthenticationOauthSystemGitlab {
		return &v
	}).(ProjectAuthenticationOauthSystemGitlabPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGitlabOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGitlabOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGitlabOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGitlabOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGitlabOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGitlab) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGitlabPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGitlabPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGitlab)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ToProjectAuthenticationOauthSystemGitlabPtrOutput() ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ToProjectAuthenticationOauthSystemGitlabPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Elem() ProjectAuthenticationOauthSystemGitlabOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) ProjectAuthenticationOauthSystemGitlab {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGitlab
		return ret
	}).(ProjectAuthenticationOauthSystemGitlabOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGitlabPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlab) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGitlabProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemGitlabProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs and ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGitlabProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemGitlabProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs, ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtr and ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemGitlabProviderTokenManagementPtrType ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemGitlabProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemGitlabProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGitlabProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGitlabProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGitlabProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGitlabProviderTokenManagement) *ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGitlabProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGitlabProviderTokenManagement) ProjectAuthenticationOauthSystemGitlabProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGitlabProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemGoogle struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemGoogleProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemGoogleInput is an input type that accepts ProjectAuthenticationOauthSystemGoogleArgs and ProjectAuthenticationOauthSystemGoogleOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGoogleInput` via:
//
//	ProjectAuthenticationOauthSystemGoogleArgs{...}
type ProjectAuthenticationOauthSystemGoogleInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGoogleOutput() ProjectAuthenticationOauthSystemGoogleOutput
	ToProjectAuthenticationOauthSystemGoogleOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGoogleOutput
}

type ProjectAuthenticationOauthSystemGoogleArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemGoogleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogle)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGoogleArgs) ToProjectAuthenticationOauthSystemGoogleOutput() ProjectAuthenticationOauthSystemGoogleOutput {
	return i.ToProjectAuthenticationOauthSystemGoogleOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGoogleArgs) ToProjectAuthenticationOauthSystemGoogleOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGoogleOutput)
}

func (i ProjectAuthenticationOauthSystemGoogleArgs) ToProjectAuthenticationOauthSystemGooglePtrOutput() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return i.ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGoogleArgs) ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGoogleOutput).ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGooglePtrInput is an input type that accepts ProjectAuthenticationOauthSystemGoogleArgs, ProjectAuthenticationOauthSystemGooglePtr and ProjectAuthenticationOauthSystemGooglePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGooglePtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGoogleArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGooglePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGooglePtrOutput() ProjectAuthenticationOauthSystemGooglePtrOutput
	ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGooglePtrOutput
}

type projectAuthenticationOauthSystemGooglePtrType ProjectAuthenticationOauthSystemGoogleArgs

func ProjectAuthenticationOauthSystemGooglePtr(v *ProjectAuthenticationOauthSystemGoogleArgs) ProjectAuthenticationOauthSystemGooglePtrInput {
	return (*projectAuthenticationOauthSystemGooglePtrType)(v)
}

func (*projectAuthenticationOauthSystemGooglePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGoogle)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGooglePtrType) ToProjectAuthenticationOauthSystemGooglePtrOutput() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return i.ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGooglePtrType) ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGooglePtrOutput)
}

type ProjectAuthenticationOauthSystemGoogleOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGoogleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogle)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGoogleOutput) ToProjectAuthenticationOauthSystemGoogleOutput() ProjectAuthenticationOauthSystemGoogleOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleOutput) ToProjectAuthenticationOauthSystemGoogleOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleOutput) ToProjectAuthenticationOauthSystemGooglePtrOutput() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o.ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGoogleOutput) ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGoogle) *ProjectAuthenticationOauthSystemGoogle {
		return &v
	}).(ProjectAuthenticationOauthSystemGooglePtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGoogleOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGoogleOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGoogleOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGoogleOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGoogleOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGoogleOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemGoogle) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGooglePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGooglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGoogle)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ToProjectAuthenticationOauthSystemGooglePtrOutput() ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ToProjectAuthenticationOauthSystemGooglePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGooglePtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Elem() ProjectAuthenticationOauthSystemGoogleOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) ProjectAuthenticationOauthSystemGoogle {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGoogle
		return ret
	}).(ProjectAuthenticationOauthSystemGoogleOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemGooglePtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogle) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemGoogleProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemGoogleProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs and ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGoogleProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemGoogleProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogleProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs, ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtr and ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemGoogleProviderTokenManagementPtrType ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemGoogleProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemGoogleProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGoogleProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemGoogleProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemGoogleProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogleProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemGoogleProviderTokenManagement) *ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemGoogleProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemGoogleProviderTokenManagement) ProjectAuthenticationOauthSystemGoogleProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemGoogleProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemLinkedin struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemLinkedinInput is an input type that accepts ProjectAuthenticationOauthSystemLinkedinArgs and ProjectAuthenticationOauthSystemLinkedinOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemLinkedinInput` via:
//
//	ProjectAuthenticationOauthSystemLinkedinArgs{...}
type ProjectAuthenticationOauthSystemLinkedinInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemLinkedinOutput() ProjectAuthenticationOauthSystemLinkedinOutput
	ToProjectAuthenticationOauthSystemLinkedinOutputWithContext(context.Context) ProjectAuthenticationOauthSystemLinkedinOutput
}

type ProjectAuthenticationOauthSystemLinkedinArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemLinkedinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedin)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemLinkedinArgs) ToProjectAuthenticationOauthSystemLinkedinOutput() ProjectAuthenticationOauthSystemLinkedinOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemLinkedinArgs) ToProjectAuthenticationOauthSystemLinkedinOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinOutput)
}

func (i ProjectAuthenticationOauthSystemLinkedinArgs) ToProjectAuthenticationOauthSystemLinkedinPtrOutput() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemLinkedinArgs) ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinOutput).ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemLinkedinPtrInput is an input type that accepts ProjectAuthenticationOauthSystemLinkedinArgs, ProjectAuthenticationOauthSystemLinkedinPtr and ProjectAuthenticationOauthSystemLinkedinPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemLinkedinPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemLinkedinArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemLinkedinPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemLinkedinPtrOutput() ProjectAuthenticationOauthSystemLinkedinPtrOutput
	ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemLinkedinPtrOutput
}

type projectAuthenticationOauthSystemLinkedinPtrType ProjectAuthenticationOauthSystemLinkedinArgs

func ProjectAuthenticationOauthSystemLinkedinPtr(v *ProjectAuthenticationOauthSystemLinkedinArgs) ProjectAuthenticationOauthSystemLinkedinPtrInput {
	return (*projectAuthenticationOauthSystemLinkedinPtrType)(v)
}

func (*projectAuthenticationOauthSystemLinkedinPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemLinkedin)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemLinkedinPtrType) ToProjectAuthenticationOauthSystemLinkedinPtrOutput() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemLinkedinPtrType) ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinPtrOutput)
}

type ProjectAuthenticationOauthSystemLinkedinOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemLinkedinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedin)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemLinkedinOutput) ToProjectAuthenticationOauthSystemLinkedinOutput() ProjectAuthenticationOauthSystemLinkedinOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinOutput) ToProjectAuthenticationOauthSystemLinkedinOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinOutput) ToProjectAuthenticationOauthSystemLinkedinPtrOutput() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o.ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemLinkedinOutput) ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemLinkedin) *ProjectAuthenticationOauthSystemLinkedin {
		return &v
	}).(ProjectAuthenticationOauthSystemLinkedinPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemLinkedin) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemLinkedinPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemLinkedinPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemLinkedin)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ToProjectAuthenticationOauthSystemLinkedinPtrOutput() ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ToProjectAuthenticationOauthSystemLinkedinPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Elem() ProjectAuthenticationOauthSystemLinkedinOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) ProjectAuthenticationOauthSystemLinkedin {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemLinkedin
		return ret
	}).(ProjectAuthenticationOauthSystemLinkedinOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemLinkedinPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedin) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs and ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs, ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtr and ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrType ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement) *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement) ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemLinkedinProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemMicrosoft struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemMicrosoftInput is an input type that accepts ProjectAuthenticationOauthSystemMicrosoftArgs and ProjectAuthenticationOauthSystemMicrosoftOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemMicrosoftInput` via:
//
//	ProjectAuthenticationOauthSystemMicrosoftArgs{...}
type ProjectAuthenticationOauthSystemMicrosoftInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemMicrosoftOutput() ProjectAuthenticationOauthSystemMicrosoftOutput
	ToProjectAuthenticationOauthSystemMicrosoftOutputWithContext(context.Context) ProjectAuthenticationOauthSystemMicrosoftOutput
}

type ProjectAuthenticationOauthSystemMicrosoftArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemMicrosoftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoft)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemMicrosoftArgs) ToProjectAuthenticationOauthSystemMicrosoftOutput() ProjectAuthenticationOauthSystemMicrosoftOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemMicrosoftArgs) ToProjectAuthenticationOauthSystemMicrosoftOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftOutput)
}

func (i ProjectAuthenticationOauthSystemMicrosoftArgs) ToProjectAuthenticationOauthSystemMicrosoftPtrOutput() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemMicrosoftArgs) ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftOutput).ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemMicrosoftPtrInput is an input type that accepts ProjectAuthenticationOauthSystemMicrosoftArgs, ProjectAuthenticationOauthSystemMicrosoftPtr and ProjectAuthenticationOauthSystemMicrosoftPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemMicrosoftPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemMicrosoftArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemMicrosoftPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemMicrosoftPtrOutput() ProjectAuthenticationOauthSystemMicrosoftPtrOutput
	ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemMicrosoftPtrOutput
}

type projectAuthenticationOauthSystemMicrosoftPtrType ProjectAuthenticationOauthSystemMicrosoftArgs

func ProjectAuthenticationOauthSystemMicrosoftPtr(v *ProjectAuthenticationOauthSystemMicrosoftArgs) ProjectAuthenticationOauthSystemMicrosoftPtrInput {
	return (*projectAuthenticationOauthSystemMicrosoftPtrType)(v)
}

func (*projectAuthenticationOauthSystemMicrosoftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemMicrosoft)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemMicrosoftPtrType) ToProjectAuthenticationOauthSystemMicrosoftPtrOutput() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemMicrosoftPtrType) ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftPtrOutput)
}

type ProjectAuthenticationOauthSystemMicrosoftOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemMicrosoftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoft)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ToProjectAuthenticationOauthSystemMicrosoftOutput() ProjectAuthenticationOauthSystemMicrosoftOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ToProjectAuthenticationOauthSystemMicrosoftOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ToProjectAuthenticationOauthSystemMicrosoftPtrOutput() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o.ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemMicrosoft) *ProjectAuthenticationOauthSystemMicrosoft {
		return &v
	}).(ProjectAuthenticationOauthSystemMicrosoftPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemMicrosoft) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemMicrosoftPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemMicrosoft)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ToProjectAuthenticationOauthSystemMicrosoftPtrOutput() ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ToProjectAuthenticationOauthSystemMicrosoftPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Elem() ProjectAuthenticationOauthSystemMicrosoftOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) ProjectAuthenticationOauthSystemMicrosoft {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemMicrosoft
		return ret
	}).(ProjectAuthenticationOauthSystemMicrosoftOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemMicrosoftPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoft) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs and ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs, ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtr and ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrType ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement) *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement) ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput)
}

type ProjectAuthenticationOauthSystemSlack struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes []string `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain *string `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping map[string]string `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId *string `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description *string `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer *string `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint *string `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo *string `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens *bool `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts *bool `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts []string `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement *ProjectAuthenticationOauthSystemSlackProviderTokenManagement `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes []string `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint *string `pulumi:"userInfoEndpoint"`
}

// ProjectAuthenticationOauthSystemSlackInput is an input type that accepts ProjectAuthenticationOauthSystemSlackArgs and ProjectAuthenticationOauthSystemSlackOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemSlackInput` via:
//
//	ProjectAuthenticationOauthSystemSlackArgs{...}
type ProjectAuthenticationOauthSystemSlackInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemSlackOutput() ProjectAuthenticationOauthSystemSlackOutput
	ToProjectAuthenticationOauthSystemSlackOutputWithContext(context.Context) ProjectAuthenticationOauthSystemSlackOutput
}

type ProjectAuthenticationOauthSystemSlackArgs struct {
	// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
	AllowedGrantTypes pulumi.StringArrayInput `pulumi:"allowedGrantTypes"`
	// The URL that users are redirected to for authorization with the OAuth provider.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Use a custom domain in your OAuth verification screen.
	CallbackDomain pulumi.StringPtrInput `pulumi:"callbackDomain"`
	// Maps OAuth provider claims to Descope user attributes.
	ClaimMapping pulumi.StringMapInput `pulumi:"claimMapping"`
	// The client ID for the OAuth provider, used to identify the application to the provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for the OAuth provider, used to authenticate the application with the provider.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// A brief description of the OAuth provider.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The issuer identifier for the OAuth provider.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
	JwksEndpoint pulumi.StringPtrInput `pulumi:"jwksEndpoint"`
	// The URL of the logo associated with the OAuth provider.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// Whether to enable provider token management for this OAuth provider.
	ManageProviderTokens pulumi.BoolPtrInput `pulumi:"manageProviderTokens"`
	// Whether to merge existing user accounts with new ones created through OAuth authentication.
	MergeUserAccounts pulumi.BoolPtrInput `pulumi:"mergeUserAccounts"`
	// Custom prompts or consent screens that users may see during OAuth authentication.
	Prompts pulumi.StringArrayInput `pulumi:"prompts"`
	// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
	ProviderTokenManagement ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput `pulumi:"providerTokenManagement"`
	// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
	// Scopes of access that the application requests from the user's account on the OAuth provider.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The URL where the application requests an access token from the OAuth provider.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The URL where the application retrieves user information from the OAuth provider.
	UserInfoEndpoint pulumi.StringPtrInput `pulumi:"userInfoEndpoint"`
}

func (ProjectAuthenticationOauthSystemSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemSlack)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemSlackArgs) ToProjectAuthenticationOauthSystemSlackOutput() ProjectAuthenticationOauthSystemSlackOutput {
	return i.ToProjectAuthenticationOauthSystemSlackOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemSlackArgs) ToProjectAuthenticationOauthSystemSlackOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackOutput)
}

func (i ProjectAuthenticationOauthSystemSlackArgs) ToProjectAuthenticationOauthSystemSlackPtrOutput() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return i.ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemSlackArgs) ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackOutput).ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemSlackPtrInput is an input type that accepts ProjectAuthenticationOauthSystemSlackArgs, ProjectAuthenticationOauthSystemSlackPtr and ProjectAuthenticationOauthSystemSlackPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemSlackPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemSlackArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemSlackPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemSlackPtrOutput() ProjectAuthenticationOauthSystemSlackPtrOutput
	ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemSlackPtrOutput
}

type projectAuthenticationOauthSystemSlackPtrType ProjectAuthenticationOauthSystemSlackArgs

func ProjectAuthenticationOauthSystemSlackPtr(v *ProjectAuthenticationOauthSystemSlackArgs) ProjectAuthenticationOauthSystemSlackPtrInput {
	return (*projectAuthenticationOauthSystemSlackPtrType)(v)
}

func (*projectAuthenticationOauthSystemSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemSlack)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemSlackPtrType) ToProjectAuthenticationOauthSystemSlackPtrOutput() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return i.ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemSlackPtrType) ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackPtrOutput)
}

type ProjectAuthenticationOauthSystemSlackOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemSlack)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemSlackOutput) ToProjectAuthenticationOauthSystemSlackOutput() ProjectAuthenticationOauthSystemSlackOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackOutput) ToProjectAuthenticationOauthSystemSlackOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackOutput) ToProjectAuthenticationOauthSystemSlackPtrOutput() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o.ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemSlackOutput) ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemSlack) *ProjectAuthenticationOauthSystemSlack {
		return &v
	}).(ProjectAuthenticationOauthSystemSlackPtrOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) []string { return v.AllowedGrantTypes }).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemSlackOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.CallbackDomain }).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemSlackOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) map[string]string { return v.ClaimMapping }).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemSlackOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.JwksEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *bool { return v.ManageProviderTokens }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemSlackOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *bool { return v.MergeUserAccounts }).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemSlackOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) []string { return v.Prompts }).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemSlackOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemSlackOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOauthSystemSlack) *string { return v.UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemSlackPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemSlack)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ToProjectAuthenticationOauthSystemSlackPtrOutput() ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ToProjectAuthenticationOauthSystemSlackPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Elem() ProjectAuthenticationOauthSystemSlackOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) ProjectAuthenticationOauthSystemSlack {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemSlack
		return ret
	}).(ProjectAuthenticationOauthSystemSlackOutput)
}

// The type of grants (`authorizationCode` or `implicit`) to allow when requesting access tokens from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) AllowedGrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGrantTypes
	}).(pulumi.StringArrayOutput)
}

// The URL that users are redirected to for authorization with the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Use a custom domain in your OAuth verification screen.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) CallbackDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.CallbackDomain
	}).(pulumi.StringPtrOutput)
}

// Maps OAuth provider claims to Descope user attributes.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ClaimMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClaimMapping
	}).(pulumi.StringMapOutput)
}

// The client ID for the OAuth provider, used to identify the application to the provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for the OAuth provider, used to authenticate the application with the provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// A brief description of the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The issuer identifier for the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The URL where the application can retrieve JSON Web Key Sets (JWKS) for the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) JwksEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.JwksEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the logo associated with the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

// Whether to enable provider token management for this OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ManageProviderTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *bool {
		if v == nil {
			return nil
		}
		return v.ManageProviderTokens
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through OAuth authentication.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) MergeUserAccounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUserAccounts
	}).(pulumi.BoolPtrOutput)
}

// Custom prompts or consent screens that users may see during OAuth authentication.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Prompts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) []string {
		if v == nil {
			return nil
		}
		return v.Prompts
	}).(pulumi.StringArrayOutput)
}

// This attribute is deprecated, use the `manageProviderTokens`, `callbackDomain`, and `redirectUrl` fields instead.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) ProviderTokenManagement() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
		if v == nil {
			return nil
		}
		return v.ProviderTokenManagement
	}).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput)
}

// Users will be directed to this URL after authentication. If redirect URL is specified in the SDK/API call, it will override this value.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Scopes of access that the application requests from the user's account on the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The URL where the application requests an access token from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The URL where the application retrieves user information from the OAuth provider.
func (o ProjectAuthenticationOauthSystemSlackPtrOutput) UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlack) *string {
		if v == nil {
			return nil
		}
		return v.UserInfoEndpoint
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationOauthSystemSlackProviderTokenManagement struct {
}

// ProjectAuthenticationOauthSystemSlackProviderTokenManagementInput is an input type that accepts ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs and ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemSlackProviderTokenManagementInput` via:
//
//	ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs{...}
type ProjectAuthenticationOauthSystemSlackProviderTokenManagementInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput
	ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutputWithContext(context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput
}

type ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs struct {
}

func (ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackProviderTokenManagement)(nil)).Elem()
}

func (i ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput {
	return i.ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput)
}

func (i ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput).ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput is an input type that accepts ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs, ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtr and ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput` via:
//
//	        ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput
	ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput
}

type projectAuthenticationOauthSystemSlackProviderTokenManagementPtrType ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs

func ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtr(v *ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput {
	return (*projectAuthenticationOauthSystemSlackProviderTokenManagementPtrType)(v)
}

func (*projectAuthenticationOauthSystemSlackProviderTokenManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemSlackProviderTokenManagement)(nil)).Elem()
}

func (i *projectAuthenticationOauthSystemSlackProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return i.ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOauthSystemSlackProviderTokenManagementPtrType) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o.ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOauthSystemSlackProviderTokenManagement) *ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
		return &v
	}).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput)
}

type ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOauthSystemSlackProviderTokenManagement)(nil)).Elem()
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput() ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput) ToProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput {
	return o
}

func (o ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput) Elem() ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOauthSystemSlackProviderTokenManagement) ProjectAuthenticationOauthSystemSlackProviderTokenManagement {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOauthSystemSlackProviderTokenManagement
		return ret
	}).(ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput)
}

type ProjectAuthenticationOtp struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// The domain to embed in OTP messages.
	Domain *string `pulumi:"domain"`
	// Settings related to sending emails with OTP codes.
	EmailService *ProjectAuthenticationOtpEmailService `pulumi:"emailService"`
	// The amount of time that an OTP code will be valid for.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Settings related to sending SMS messages with OTP codes.
	TextService *ProjectAuthenticationOtpTextService `pulumi:"textService"`
	// Settings related to voice calls with OTP codes.
	VoiceService *ProjectAuthenticationOtpVoiceService `pulumi:"voiceService"`
}

// ProjectAuthenticationOtpInput is an input type that accepts ProjectAuthenticationOtpArgs and ProjectAuthenticationOtpOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpInput` via:
//
//	ProjectAuthenticationOtpArgs{...}
type ProjectAuthenticationOtpInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpOutput() ProjectAuthenticationOtpOutput
	ToProjectAuthenticationOtpOutputWithContext(context.Context) ProjectAuthenticationOtpOutput
}

type ProjectAuthenticationOtpArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The domain to embed in OTP messages.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Settings related to sending emails with OTP codes.
	EmailService ProjectAuthenticationOtpEmailServicePtrInput `pulumi:"emailService"`
	// The amount of time that an OTP code will be valid for.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// Settings related to sending SMS messages with OTP codes.
	TextService ProjectAuthenticationOtpTextServicePtrInput `pulumi:"textService"`
	// Settings related to voice calls with OTP codes.
	VoiceService ProjectAuthenticationOtpVoiceServicePtrInput `pulumi:"voiceService"`
}

func (ProjectAuthenticationOtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtp)(nil)).Elem()
}

func (i ProjectAuthenticationOtpArgs) ToProjectAuthenticationOtpOutput() ProjectAuthenticationOtpOutput {
	return i.ToProjectAuthenticationOtpOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpArgs) ToProjectAuthenticationOtpOutputWithContext(ctx context.Context) ProjectAuthenticationOtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpOutput)
}

func (i ProjectAuthenticationOtpArgs) ToProjectAuthenticationOtpPtrOutput() ProjectAuthenticationOtpPtrOutput {
	return i.ToProjectAuthenticationOtpPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpArgs) ToProjectAuthenticationOtpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpOutput).ToProjectAuthenticationOtpPtrOutputWithContext(ctx)
}

// ProjectAuthenticationOtpPtrInput is an input type that accepts ProjectAuthenticationOtpArgs, ProjectAuthenticationOtpPtr and ProjectAuthenticationOtpPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpPtrInput` via:
//
//	        ProjectAuthenticationOtpArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOtpPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpPtrOutput() ProjectAuthenticationOtpPtrOutput
	ToProjectAuthenticationOtpPtrOutputWithContext(context.Context) ProjectAuthenticationOtpPtrOutput
}

type projectAuthenticationOtpPtrType ProjectAuthenticationOtpArgs

func ProjectAuthenticationOtpPtr(v *ProjectAuthenticationOtpArgs) ProjectAuthenticationOtpPtrInput {
	return (*projectAuthenticationOtpPtrType)(v)
}

func (*projectAuthenticationOtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtp)(nil)).Elem()
}

func (i *projectAuthenticationOtpPtrType) ToProjectAuthenticationOtpPtrOutput() ProjectAuthenticationOtpPtrOutput {
	return i.ToProjectAuthenticationOtpPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOtpPtrType) ToProjectAuthenticationOtpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpPtrOutput)
}

type ProjectAuthenticationOtpOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtp)(nil)).Elem()
}

func (o ProjectAuthenticationOtpOutput) ToProjectAuthenticationOtpOutput() ProjectAuthenticationOtpOutput {
	return o
}

func (o ProjectAuthenticationOtpOutput) ToProjectAuthenticationOtpOutputWithContext(ctx context.Context) ProjectAuthenticationOtpOutput {
	return o
}

func (o ProjectAuthenticationOtpOutput) ToProjectAuthenticationOtpPtrOutput() ProjectAuthenticationOtpPtrOutput {
	return o.ToProjectAuthenticationOtpPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOtpOutput) ToProjectAuthenticationOtpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOtp) *ProjectAuthenticationOtp {
		return &v
	}).(ProjectAuthenticationOtpPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOtpOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The domain to embed in OTP messages.
func (o ProjectAuthenticationOtpOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Settings related to sending emails with OTP codes.
func (o ProjectAuthenticationOtpOutput) EmailService() ProjectAuthenticationOtpEmailServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *ProjectAuthenticationOtpEmailService { return v.EmailService }).(ProjectAuthenticationOtpEmailServicePtrOutput)
}

// The amount of time that an OTP code will be valid for.
func (o ProjectAuthenticationOtpOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// Settings related to sending SMS messages with OTP codes.
func (o ProjectAuthenticationOtpOutput) TextService() ProjectAuthenticationOtpTextServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *ProjectAuthenticationOtpTextService { return v.TextService }).(ProjectAuthenticationOtpTextServicePtrOutput)
}

// Settings related to voice calls with OTP codes.
func (o ProjectAuthenticationOtpOutput) VoiceService() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtp) *ProjectAuthenticationOtpVoiceService { return v.VoiceService }).(ProjectAuthenticationOtpVoiceServicePtrOutput)
}

type ProjectAuthenticationOtpPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtp)(nil)).Elem()
}

func (o ProjectAuthenticationOtpPtrOutput) ToProjectAuthenticationOtpPtrOutput() ProjectAuthenticationOtpPtrOutput {
	return o
}

func (o ProjectAuthenticationOtpPtrOutput) ToProjectAuthenticationOtpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpPtrOutput {
	return o
}

func (o ProjectAuthenticationOtpPtrOutput) Elem() ProjectAuthenticationOtpOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) ProjectAuthenticationOtp {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOtp
		return ret
	}).(ProjectAuthenticationOtpOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationOtpPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The domain to embed in OTP messages.
func (o ProjectAuthenticationOtpPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// Settings related to sending emails with OTP codes.
func (o ProjectAuthenticationOtpPtrOutput) EmailService() ProjectAuthenticationOtpEmailServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *ProjectAuthenticationOtpEmailService {
		if v == nil {
			return nil
		}
		return v.EmailService
	}).(ProjectAuthenticationOtpEmailServicePtrOutput)
}

// The amount of time that an OTP code will be valid for.
func (o ProjectAuthenticationOtpPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// Settings related to sending SMS messages with OTP codes.
func (o ProjectAuthenticationOtpPtrOutput) TextService() ProjectAuthenticationOtpTextServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *ProjectAuthenticationOtpTextService {
		if v == nil {
			return nil
		}
		return v.TextService
	}).(ProjectAuthenticationOtpTextServicePtrOutput)
}

// Settings related to voice calls with OTP codes.
func (o ProjectAuthenticationOtpPtrOutput) VoiceService() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtp) *ProjectAuthenticationOtpVoiceService {
		if v == nil {
			return nil
		}
		return v.VoiceService
	}).(ProjectAuthenticationOtpVoiceServicePtrOutput)
}

type ProjectAuthenticationOtpEmailService struct {
	// The name of the email connector to use for sending emails.
	Connector string `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates []ProjectAuthenticationOtpEmailServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationOtpEmailServiceInput is an input type that accepts ProjectAuthenticationOtpEmailServiceArgs and ProjectAuthenticationOtpEmailServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpEmailServiceInput` via:
//
//	ProjectAuthenticationOtpEmailServiceArgs{...}
type ProjectAuthenticationOtpEmailServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpEmailServiceOutput() ProjectAuthenticationOtpEmailServiceOutput
	ToProjectAuthenticationOtpEmailServiceOutputWithContext(context.Context) ProjectAuthenticationOtpEmailServiceOutput
}

type ProjectAuthenticationOtpEmailServiceArgs struct {
	// The name of the email connector to use for sending emails.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates ProjectAuthenticationOtpEmailServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationOtpEmailServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpEmailService)(nil)).Elem()
}

func (i ProjectAuthenticationOtpEmailServiceArgs) ToProjectAuthenticationOtpEmailServiceOutput() ProjectAuthenticationOtpEmailServiceOutput {
	return i.ToProjectAuthenticationOtpEmailServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpEmailServiceArgs) ToProjectAuthenticationOtpEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpEmailServiceOutput)
}

func (i ProjectAuthenticationOtpEmailServiceArgs) ToProjectAuthenticationOtpEmailServicePtrOutput() ProjectAuthenticationOtpEmailServicePtrOutput {
	return i.ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpEmailServiceArgs) ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpEmailServiceOutput).ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationOtpEmailServicePtrInput is an input type that accepts ProjectAuthenticationOtpEmailServiceArgs, ProjectAuthenticationOtpEmailServicePtr and ProjectAuthenticationOtpEmailServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpEmailServicePtrInput` via:
//
//	        ProjectAuthenticationOtpEmailServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOtpEmailServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpEmailServicePtrOutput() ProjectAuthenticationOtpEmailServicePtrOutput
	ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(context.Context) ProjectAuthenticationOtpEmailServicePtrOutput
}

type projectAuthenticationOtpEmailServicePtrType ProjectAuthenticationOtpEmailServiceArgs

func ProjectAuthenticationOtpEmailServicePtr(v *ProjectAuthenticationOtpEmailServiceArgs) ProjectAuthenticationOtpEmailServicePtrInput {
	return (*projectAuthenticationOtpEmailServicePtrType)(v)
}

func (*projectAuthenticationOtpEmailServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpEmailService)(nil)).Elem()
}

func (i *projectAuthenticationOtpEmailServicePtrType) ToProjectAuthenticationOtpEmailServicePtrOutput() ProjectAuthenticationOtpEmailServicePtrOutput {
	return i.ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOtpEmailServicePtrType) ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpEmailServicePtrOutput)
}

type ProjectAuthenticationOtpEmailServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpEmailServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpEmailServiceOutput) ToProjectAuthenticationOtpEmailServiceOutput() ProjectAuthenticationOtpEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServiceOutput) ToProjectAuthenticationOtpEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServiceOutput) ToProjectAuthenticationOtpEmailServicePtrOutput() ProjectAuthenticationOtpEmailServicePtrOutput {
	return o.ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOtpEmailServiceOutput) ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOtpEmailService) *ProjectAuthenticationOtpEmailService {
		return &v
	}).(ProjectAuthenticationOtpEmailServicePtrOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationOtpEmailServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationOtpEmailServiceOutput) Templates() ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailService) []ProjectAuthenticationOtpEmailServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationOtpEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpEmailServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpEmailServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpEmailServicePtrOutput) ToProjectAuthenticationOtpEmailServicePtrOutput() ProjectAuthenticationOtpEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServicePtrOutput) ToProjectAuthenticationOtpEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServicePtrOutput) Elem() ProjectAuthenticationOtpEmailServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpEmailService) ProjectAuthenticationOtpEmailService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOtpEmailService
		return ret
	}).(ProjectAuthenticationOtpEmailServiceOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationOtpEmailServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpEmailService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationOtpEmailServicePtrOutput) Templates() ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpEmailService) []ProjectAuthenticationOtpEmailServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationOtpEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpEmailServiceTemplate struct {
	// Whether this email template is currently active and in use.
	Active *bool `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody *string `pulumi:"htmlBody"`
	Id       *string `pulumi:"id"`
	// Unique name for this email template.
	Name string `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody *string `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject string `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody *bool `pulumi:"usePlainTextBody"`
}

// ProjectAuthenticationOtpEmailServiceTemplateInput is an input type that accepts ProjectAuthenticationOtpEmailServiceTemplateArgs and ProjectAuthenticationOtpEmailServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpEmailServiceTemplateInput` via:
//
//	ProjectAuthenticationOtpEmailServiceTemplateArgs{...}
type ProjectAuthenticationOtpEmailServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpEmailServiceTemplateOutput() ProjectAuthenticationOtpEmailServiceTemplateOutput
	ToProjectAuthenticationOtpEmailServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationOtpEmailServiceTemplateOutput
}

type ProjectAuthenticationOtpEmailServiceTemplateArgs struct {
	// Whether this email template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody pulumi.StringPtrInput `pulumi:"htmlBody"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this email template.
	Name pulumi.StringInput `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody pulumi.StringPtrInput `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody pulumi.BoolPtrInput `pulumi:"usePlainTextBody"`
}

func (ProjectAuthenticationOtpEmailServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpEmailServiceTemplateArgs) ToProjectAuthenticationOtpEmailServiceTemplateOutput() ProjectAuthenticationOtpEmailServiceTemplateOutput {
	return i.ToProjectAuthenticationOtpEmailServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpEmailServiceTemplateArgs) ToProjectAuthenticationOtpEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpEmailServiceTemplateOutput)
}

// ProjectAuthenticationOtpEmailServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationOtpEmailServiceTemplateArray and ProjectAuthenticationOtpEmailServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpEmailServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationOtpEmailServiceTemplateArray{ ProjectAuthenticationOtpEmailServiceTemplateArgs{...} }
type ProjectAuthenticationOtpEmailServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpEmailServiceTemplateArrayOutput() ProjectAuthenticationOtpEmailServiceTemplateArrayOutput
	ToProjectAuthenticationOtpEmailServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationOtpEmailServiceTemplateArrayOutput
}

type ProjectAuthenticationOtpEmailServiceTemplateArray []ProjectAuthenticationOtpEmailServiceTemplateInput

func (ProjectAuthenticationOtpEmailServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpEmailServiceTemplateArray) ToProjectAuthenticationOtpEmailServiceTemplateArrayOutput() ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationOtpEmailServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpEmailServiceTemplateArray) ToProjectAuthenticationOtpEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpEmailServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpEmailServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) ToProjectAuthenticationOtpEmailServiceTemplateOutput() ProjectAuthenticationOtpEmailServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) ToProjectAuthenticationOtpEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceTemplateOutput {
	return o
}

// Whether this email template is currently active and in use.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// HTML content of the email message body, required if `usePlainTextBody` isn't set.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) HtmlBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) *string { return v.HtmlBody }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this email template.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) PlainTextBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) *string { return v.PlainTextBody }).(pulumi.StringPtrOutput)
}

// Subject line of the email message.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) string { return v.Subject }).(pulumi.StringOutput)
}

// Whether to use the plain text body instead of HTML for the email.
func (o ProjectAuthenticationOtpEmailServiceTemplateOutput) UsePlainTextBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpEmailServiceTemplate) *bool { return v.UsePlainTextBody }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationOtpEmailServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpEmailServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpEmailServiceTemplateArrayOutput) ToProjectAuthenticationOtpEmailServiceTemplateArrayOutput() ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServiceTemplateArrayOutput) ToProjectAuthenticationOtpEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpEmailServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationOtpEmailServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationOtpEmailServiceTemplate {
		return vs[0].([]ProjectAuthenticationOtpEmailServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationOtpEmailServiceTemplateOutput)
}

type ProjectAuthenticationOtpTextService struct {
	// The name of the SMS/text connector to use for sending text messages.
	Connector string `pulumi:"connector"`
	// A list of text message templates for different authentication flows.
	Templates []ProjectAuthenticationOtpTextServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationOtpTextServiceInput is an input type that accepts ProjectAuthenticationOtpTextServiceArgs and ProjectAuthenticationOtpTextServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpTextServiceInput` via:
//
//	ProjectAuthenticationOtpTextServiceArgs{...}
type ProjectAuthenticationOtpTextServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpTextServiceOutput() ProjectAuthenticationOtpTextServiceOutput
	ToProjectAuthenticationOtpTextServiceOutputWithContext(context.Context) ProjectAuthenticationOtpTextServiceOutput
}

type ProjectAuthenticationOtpTextServiceArgs struct {
	// The name of the SMS/text connector to use for sending text messages.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of text message templates for different authentication flows.
	Templates ProjectAuthenticationOtpTextServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationOtpTextServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpTextService)(nil)).Elem()
}

func (i ProjectAuthenticationOtpTextServiceArgs) ToProjectAuthenticationOtpTextServiceOutput() ProjectAuthenticationOtpTextServiceOutput {
	return i.ToProjectAuthenticationOtpTextServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpTextServiceArgs) ToProjectAuthenticationOtpTextServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpTextServiceOutput)
}

func (i ProjectAuthenticationOtpTextServiceArgs) ToProjectAuthenticationOtpTextServicePtrOutput() ProjectAuthenticationOtpTextServicePtrOutput {
	return i.ToProjectAuthenticationOtpTextServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpTextServiceArgs) ToProjectAuthenticationOtpTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpTextServiceOutput).ToProjectAuthenticationOtpTextServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationOtpTextServicePtrInput is an input type that accepts ProjectAuthenticationOtpTextServiceArgs, ProjectAuthenticationOtpTextServicePtr and ProjectAuthenticationOtpTextServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpTextServicePtrInput` via:
//
//	        ProjectAuthenticationOtpTextServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOtpTextServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpTextServicePtrOutput() ProjectAuthenticationOtpTextServicePtrOutput
	ToProjectAuthenticationOtpTextServicePtrOutputWithContext(context.Context) ProjectAuthenticationOtpTextServicePtrOutput
}

type projectAuthenticationOtpTextServicePtrType ProjectAuthenticationOtpTextServiceArgs

func ProjectAuthenticationOtpTextServicePtr(v *ProjectAuthenticationOtpTextServiceArgs) ProjectAuthenticationOtpTextServicePtrInput {
	return (*projectAuthenticationOtpTextServicePtrType)(v)
}

func (*projectAuthenticationOtpTextServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpTextService)(nil)).Elem()
}

func (i *projectAuthenticationOtpTextServicePtrType) ToProjectAuthenticationOtpTextServicePtrOutput() ProjectAuthenticationOtpTextServicePtrOutput {
	return i.ToProjectAuthenticationOtpTextServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOtpTextServicePtrType) ToProjectAuthenticationOtpTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpTextServicePtrOutput)
}

type ProjectAuthenticationOtpTextServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpTextServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpTextService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpTextServiceOutput) ToProjectAuthenticationOtpTextServiceOutput() ProjectAuthenticationOtpTextServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServiceOutput) ToProjectAuthenticationOtpTextServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServiceOutput) ToProjectAuthenticationOtpTextServicePtrOutput() ProjectAuthenticationOtpTextServicePtrOutput {
	return o.ToProjectAuthenticationOtpTextServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOtpTextServiceOutput) ToProjectAuthenticationOtpTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOtpTextService) *ProjectAuthenticationOtpTextService {
		return &v
	}).(ProjectAuthenticationOtpTextServicePtrOutput)
}

// The name of the SMS/text connector to use for sending text messages.
func (o ProjectAuthenticationOtpTextServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of text message templates for different authentication flows.
func (o ProjectAuthenticationOtpTextServiceOutput) Templates() ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextService) []ProjectAuthenticationOtpTextServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationOtpTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpTextServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpTextServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpTextService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpTextServicePtrOutput) ToProjectAuthenticationOtpTextServicePtrOutput() ProjectAuthenticationOtpTextServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServicePtrOutput) ToProjectAuthenticationOtpTextServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServicePtrOutput) Elem() ProjectAuthenticationOtpTextServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpTextService) ProjectAuthenticationOtpTextService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOtpTextService
		return ret
	}).(ProjectAuthenticationOtpTextServiceOutput)
}

// The name of the SMS/text connector to use for sending text messages.
func (o ProjectAuthenticationOtpTextServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpTextService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of text message templates for different authentication flows.
func (o ProjectAuthenticationOtpTextServicePtrOutput) Templates() ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpTextService) []ProjectAuthenticationOtpTextServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationOtpTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpTextServiceTemplate struct {
	// Whether this text template is currently active and in use.
	Active *bool `pulumi:"active"`
	// The content of the text message.
	Body string  `pulumi:"body"`
	Id   *string `pulumi:"id"`
	// Unique name for this text template.
	Name string `pulumi:"name"`
}

// ProjectAuthenticationOtpTextServiceTemplateInput is an input type that accepts ProjectAuthenticationOtpTextServiceTemplateArgs and ProjectAuthenticationOtpTextServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpTextServiceTemplateInput` via:
//
//	ProjectAuthenticationOtpTextServiceTemplateArgs{...}
type ProjectAuthenticationOtpTextServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpTextServiceTemplateOutput() ProjectAuthenticationOtpTextServiceTemplateOutput
	ToProjectAuthenticationOtpTextServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationOtpTextServiceTemplateOutput
}

type ProjectAuthenticationOtpTextServiceTemplateArgs struct {
	// Whether this text template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// The content of the text message.
	Body pulumi.StringInput    `pulumi:"body"`
	Id   pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this text template.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectAuthenticationOtpTextServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpTextServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpTextServiceTemplateArgs) ToProjectAuthenticationOtpTextServiceTemplateOutput() ProjectAuthenticationOtpTextServiceTemplateOutput {
	return i.ToProjectAuthenticationOtpTextServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpTextServiceTemplateArgs) ToProjectAuthenticationOtpTextServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpTextServiceTemplateOutput)
}

// ProjectAuthenticationOtpTextServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationOtpTextServiceTemplateArray and ProjectAuthenticationOtpTextServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpTextServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationOtpTextServiceTemplateArray{ ProjectAuthenticationOtpTextServiceTemplateArgs{...} }
type ProjectAuthenticationOtpTextServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpTextServiceTemplateArrayOutput() ProjectAuthenticationOtpTextServiceTemplateArrayOutput
	ToProjectAuthenticationOtpTextServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationOtpTextServiceTemplateArrayOutput
}

type ProjectAuthenticationOtpTextServiceTemplateArray []ProjectAuthenticationOtpTextServiceTemplateInput

func (ProjectAuthenticationOtpTextServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpTextServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpTextServiceTemplateArray) ToProjectAuthenticationOtpTextServiceTemplateArrayOutput() ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationOtpTextServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpTextServiceTemplateArray) ToProjectAuthenticationOtpTextServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpTextServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpTextServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpTextServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpTextServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpTextServiceTemplateOutput) ToProjectAuthenticationOtpTextServiceTemplateOutput() ProjectAuthenticationOtpTextServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServiceTemplateOutput) ToProjectAuthenticationOtpTextServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceTemplateOutput {
	return o
}

// Whether this text template is currently active and in use.
func (o ProjectAuthenticationOtpTextServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// The content of the text message.
func (o ProjectAuthenticationOtpTextServiceTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextServiceTemplate) string { return v.Body }).(pulumi.StringOutput)
}

func (o ProjectAuthenticationOtpTextServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this text template.
func (o ProjectAuthenticationOtpTextServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpTextServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectAuthenticationOtpTextServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpTextServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpTextServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpTextServiceTemplateArrayOutput) ToProjectAuthenticationOtpTextServiceTemplateArrayOutput() ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServiceTemplateArrayOutput) ToProjectAuthenticationOtpTextServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpTextServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpTextServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationOtpTextServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationOtpTextServiceTemplate {
		return vs[0].([]ProjectAuthenticationOtpTextServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationOtpTextServiceTemplateOutput)
}

type ProjectAuthenticationOtpVoiceService struct {
	// The name of the voice connector to use for making voice calls.
	Connector string `pulumi:"connector"`
	// A list of voice message templates for different purposes.
	Templates []ProjectAuthenticationOtpVoiceServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationOtpVoiceServiceInput is an input type that accepts ProjectAuthenticationOtpVoiceServiceArgs and ProjectAuthenticationOtpVoiceServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpVoiceServiceInput` via:
//
//	ProjectAuthenticationOtpVoiceServiceArgs{...}
type ProjectAuthenticationOtpVoiceServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpVoiceServiceOutput() ProjectAuthenticationOtpVoiceServiceOutput
	ToProjectAuthenticationOtpVoiceServiceOutputWithContext(context.Context) ProjectAuthenticationOtpVoiceServiceOutput
}

type ProjectAuthenticationOtpVoiceServiceArgs struct {
	// The name of the voice connector to use for making voice calls.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of voice message templates for different purposes.
	Templates ProjectAuthenticationOtpVoiceServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationOtpVoiceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpVoiceService)(nil)).Elem()
}

func (i ProjectAuthenticationOtpVoiceServiceArgs) ToProjectAuthenticationOtpVoiceServiceOutput() ProjectAuthenticationOtpVoiceServiceOutput {
	return i.ToProjectAuthenticationOtpVoiceServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpVoiceServiceArgs) ToProjectAuthenticationOtpVoiceServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpVoiceServiceOutput)
}

func (i ProjectAuthenticationOtpVoiceServiceArgs) ToProjectAuthenticationOtpVoiceServicePtrOutput() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return i.ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpVoiceServiceArgs) ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpVoiceServiceOutput).ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationOtpVoiceServicePtrInput is an input type that accepts ProjectAuthenticationOtpVoiceServiceArgs, ProjectAuthenticationOtpVoiceServicePtr and ProjectAuthenticationOtpVoiceServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpVoiceServicePtrInput` via:
//
//	        ProjectAuthenticationOtpVoiceServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationOtpVoiceServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpVoiceServicePtrOutput() ProjectAuthenticationOtpVoiceServicePtrOutput
	ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(context.Context) ProjectAuthenticationOtpVoiceServicePtrOutput
}

type projectAuthenticationOtpVoiceServicePtrType ProjectAuthenticationOtpVoiceServiceArgs

func ProjectAuthenticationOtpVoiceServicePtr(v *ProjectAuthenticationOtpVoiceServiceArgs) ProjectAuthenticationOtpVoiceServicePtrInput {
	return (*projectAuthenticationOtpVoiceServicePtrType)(v)
}

func (*projectAuthenticationOtpVoiceServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpVoiceService)(nil)).Elem()
}

func (i *projectAuthenticationOtpVoiceServicePtrType) ToProjectAuthenticationOtpVoiceServicePtrOutput() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return i.ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationOtpVoiceServicePtrType) ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpVoiceServicePtrOutput)
}

type ProjectAuthenticationOtpVoiceServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpVoiceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpVoiceService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpVoiceServiceOutput) ToProjectAuthenticationOtpVoiceServiceOutput() ProjectAuthenticationOtpVoiceServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServiceOutput) ToProjectAuthenticationOtpVoiceServiceOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServiceOutput) ToProjectAuthenticationOtpVoiceServicePtrOutput() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o.ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationOtpVoiceServiceOutput) ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationOtpVoiceService) *ProjectAuthenticationOtpVoiceService {
		return &v
	}).(ProjectAuthenticationOtpVoiceServicePtrOutput)
}

// The name of the voice connector to use for making voice calls.
func (o ProjectAuthenticationOtpVoiceServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of voice message templates for different purposes.
func (o ProjectAuthenticationOtpVoiceServiceOutput) Templates() ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceService) []ProjectAuthenticationOtpVoiceServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpVoiceServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpVoiceServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationOtpVoiceService)(nil)).Elem()
}

func (o ProjectAuthenticationOtpVoiceServicePtrOutput) ToProjectAuthenticationOtpVoiceServicePtrOutput() ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServicePtrOutput) ToProjectAuthenticationOtpVoiceServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServicePtrOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServicePtrOutput) Elem() ProjectAuthenticationOtpVoiceServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpVoiceService) ProjectAuthenticationOtpVoiceService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationOtpVoiceService
		return ret
	}).(ProjectAuthenticationOtpVoiceServiceOutput)
}

// The name of the voice connector to use for making voice calls.
func (o ProjectAuthenticationOtpVoiceServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpVoiceService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of voice message templates for different purposes.
func (o ProjectAuthenticationOtpVoiceServicePtrOutput) Templates() ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationOtpVoiceService) []ProjectAuthenticationOtpVoiceServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpVoiceServiceTemplate struct {
	// Whether this voice template is currently active and in use.
	Active *bool `pulumi:"active"`
	// The content of the voice message that will be spoken.
	Body string  `pulumi:"body"`
	Id   *string `pulumi:"id"`
	// Unique name for this voice template.
	Name string `pulumi:"name"`
}

// ProjectAuthenticationOtpVoiceServiceTemplateInput is an input type that accepts ProjectAuthenticationOtpVoiceServiceTemplateArgs and ProjectAuthenticationOtpVoiceServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpVoiceServiceTemplateInput` via:
//
//	ProjectAuthenticationOtpVoiceServiceTemplateArgs{...}
type ProjectAuthenticationOtpVoiceServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpVoiceServiceTemplateOutput() ProjectAuthenticationOtpVoiceServiceTemplateOutput
	ToProjectAuthenticationOtpVoiceServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationOtpVoiceServiceTemplateOutput
}

type ProjectAuthenticationOtpVoiceServiceTemplateArgs struct {
	// Whether this voice template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// The content of the voice message that will be spoken.
	Body pulumi.StringInput    `pulumi:"body"`
	Id   pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this voice template.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectAuthenticationOtpVoiceServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpVoiceServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpVoiceServiceTemplateArgs) ToProjectAuthenticationOtpVoiceServiceTemplateOutput() ProjectAuthenticationOtpVoiceServiceTemplateOutput {
	return i.ToProjectAuthenticationOtpVoiceServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpVoiceServiceTemplateArgs) ToProjectAuthenticationOtpVoiceServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpVoiceServiceTemplateOutput)
}

// ProjectAuthenticationOtpVoiceServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationOtpVoiceServiceTemplateArray and ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationOtpVoiceServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationOtpVoiceServiceTemplateArray{ ProjectAuthenticationOtpVoiceServiceTemplateArgs{...} }
type ProjectAuthenticationOtpVoiceServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutput() ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput
	ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput
}

type ProjectAuthenticationOtpVoiceServiceTemplateArray []ProjectAuthenticationOtpVoiceServiceTemplateInput

func (ProjectAuthenticationOtpVoiceServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpVoiceServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationOtpVoiceServiceTemplateArray) ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutput() ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationOtpVoiceServiceTemplateArray) ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput)
}

type ProjectAuthenticationOtpVoiceServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpVoiceServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationOtpVoiceServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) ToProjectAuthenticationOtpVoiceServiceTemplateOutput() ProjectAuthenticationOtpVoiceServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) ToProjectAuthenticationOtpVoiceServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceTemplateOutput {
	return o
}

// Whether this voice template is currently active and in use.
func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// The content of the voice message that will be spoken.
func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceServiceTemplate) string { return v.Body }).(pulumi.StringOutput)
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this voice template.
func (o ProjectAuthenticationOtpVoiceServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationOtpVoiceServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationOtpVoiceServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput) ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutput() ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput) ToProjectAuthenticationOtpVoiceServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationOtpVoiceServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationOtpVoiceServiceTemplate {
		return vs[0].([]ProjectAuthenticationOtpVoiceServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationOtpVoiceServiceTemplateOutput)
}

type ProjectAuthenticationPasskeys struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Passkeys will be usable in the following domain and all its subdomains.
	TopLevelDomain *string `pulumi:"topLevelDomain"`
}

// ProjectAuthenticationPasskeysInput is an input type that accepts ProjectAuthenticationPasskeysArgs and ProjectAuthenticationPasskeysOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasskeysInput` via:
//
//	ProjectAuthenticationPasskeysArgs{...}
type ProjectAuthenticationPasskeysInput interface {
	pulumi.Input

	ToProjectAuthenticationPasskeysOutput() ProjectAuthenticationPasskeysOutput
	ToProjectAuthenticationPasskeysOutputWithContext(context.Context) ProjectAuthenticationPasskeysOutput
}

type ProjectAuthenticationPasskeysArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Passkeys will be usable in the following domain and all its subdomains.
	TopLevelDomain pulumi.StringPtrInput `pulumi:"topLevelDomain"`
}

func (ProjectAuthenticationPasskeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasskeys)(nil)).Elem()
}

func (i ProjectAuthenticationPasskeysArgs) ToProjectAuthenticationPasskeysOutput() ProjectAuthenticationPasskeysOutput {
	return i.ToProjectAuthenticationPasskeysOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasskeysArgs) ToProjectAuthenticationPasskeysOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasskeysOutput)
}

func (i ProjectAuthenticationPasskeysArgs) ToProjectAuthenticationPasskeysPtrOutput() ProjectAuthenticationPasskeysPtrOutput {
	return i.ToProjectAuthenticationPasskeysPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasskeysArgs) ToProjectAuthenticationPasskeysPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasskeysOutput).ToProjectAuthenticationPasskeysPtrOutputWithContext(ctx)
}

// ProjectAuthenticationPasskeysPtrInput is an input type that accepts ProjectAuthenticationPasskeysArgs, ProjectAuthenticationPasskeysPtr and ProjectAuthenticationPasskeysPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasskeysPtrInput` via:
//
//	        ProjectAuthenticationPasskeysArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationPasskeysPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationPasskeysPtrOutput() ProjectAuthenticationPasskeysPtrOutput
	ToProjectAuthenticationPasskeysPtrOutputWithContext(context.Context) ProjectAuthenticationPasskeysPtrOutput
}

type projectAuthenticationPasskeysPtrType ProjectAuthenticationPasskeysArgs

func ProjectAuthenticationPasskeysPtr(v *ProjectAuthenticationPasskeysArgs) ProjectAuthenticationPasskeysPtrInput {
	return (*projectAuthenticationPasskeysPtrType)(v)
}

func (*projectAuthenticationPasskeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPasskeys)(nil)).Elem()
}

func (i *projectAuthenticationPasskeysPtrType) ToProjectAuthenticationPasskeysPtrOutput() ProjectAuthenticationPasskeysPtrOutput {
	return i.ToProjectAuthenticationPasskeysPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationPasskeysPtrType) ToProjectAuthenticationPasskeysPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasskeysPtrOutput)
}

type ProjectAuthenticationPasskeysOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasskeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasskeys)(nil)).Elem()
}

func (o ProjectAuthenticationPasskeysOutput) ToProjectAuthenticationPasskeysOutput() ProjectAuthenticationPasskeysOutput {
	return o
}

func (o ProjectAuthenticationPasskeysOutput) ToProjectAuthenticationPasskeysOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysOutput {
	return o
}

func (o ProjectAuthenticationPasskeysOutput) ToProjectAuthenticationPasskeysPtrOutput() ProjectAuthenticationPasskeysPtrOutput {
	return o.ToProjectAuthenticationPasskeysPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationPasskeysOutput) ToProjectAuthenticationPasskeysPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationPasskeys) *ProjectAuthenticationPasskeys {
		return &v
	}).(ProjectAuthenticationPasskeysPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationPasskeysOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasskeys) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Passkeys will be usable in the following domain and all its subdomains.
func (o ProjectAuthenticationPasskeysOutput) TopLevelDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasskeys) *string { return v.TopLevelDomain }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationPasskeysPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasskeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPasskeys)(nil)).Elem()
}

func (o ProjectAuthenticationPasskeysPtrOutput) ToProjectAuthenticationPasskeysPtrOutput() ProjectAuthenticationPasskeysPtrOutput {
	return o
}

func (o ProjectAuthenticationPasskeysPtrOutput) ToProjectAuthenticationPasskeysPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasskeysPtrOutput {
	return o
}

func (o ProjectAuthenticationPasskeysPtrOutput) Elem() ProjectAuthenticationPasskeysOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasskeys) ProjectAuthenticationPasskeys {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationPasskeys
		return ret
	}).(ProjectAuthenticationPasskeysOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationPasskeysPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasskeys) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Passkeys will be usable in the following domain and all its subdomains.
func (o ProjectAuthenticationPasskeysPtrOutput) TopLevelDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasskeys) *string {
		if v == nil {
			return nil
		}
		return v.TopLevelDomain
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationPassword struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Settings related to sending password reset emails as part of the password feature.
	EmailService *ProjectAuthenticationPasswordEmailService `pulumi:"emailService"`
	// Whether users are required to change their password periodically.
	Expiration *bool `pulumi:"expiration"`
	// The number of weeks after which a user's password expires and they need to replace it.
	ExpirationWeeks *int `pulumi:"expirationWeeks"`
	// Whether the user account should be locked after a specified number of failed login attempts.
	Lock *bool `pulumi:"lock"`
	// The number of failed login attempts allowed before an account is locked.
	LockAttempts *int `pulumi:"lockAttempts"`
	// Whether passwords must contain at least one lowercase letter.
	Lowercase *bool `pulumi:"lowercase"`
	// The minimum length of the password that users are required to use. The maximum length is always `64`.
	MinLength *int `pulumi:"minLength"`
	// Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
	NonAlphanumeric *bool `pulumi:"nonAlphanumeric"`
	// Whether passwords must contain at least one number.
	Number *bool `pulumi:"number"`
	// Whether to forbid password reuse when users change their password.
	Reuse *bool `pulumi:"reuse"`
	// The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
	ReuseAmount *int `pulumi:"reuseAmount"`
	// Whether passwords must contain at least one uppercase letter.
	Uppercase *bool `pulumi:"uppercase"`
}

// ProjectAuthenticationPasswordInput is an input type that accepts ProjectAuthenticationPasswordArgs and ProjectAuthenticationPasswordOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordInput` via:
//
//	ProjectAuthenticationPasswordArgs{...}
type ProjectAuthenticationPasswordInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordOutput() ProjectAuthenticationPasswordOutput
	ToProjectAuthenticationPasswordOutputWithContext(context.Context) ProjectAuthenticationPasswordOutput
}

type ProjectAuthenticationPasswordArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Settings related to sending password reset emails as part of the password feature.
	EmailService ProjectAuthenticationPasswordEmailServicePtrInput `pulumi:"emailService"`
	// Whether users are required to change their password periodically.
	Expiration pulumi.BoolPtrInput `pulumi:"expiration"`
	// The number of weeks after which a user's password expires and they need to replace it.
	ExpirationWeeks pulumi.IntPtrInput `pulumi:"expirationWeeks"`
	// Whether the user account should be locked after a specified number of failed login attempts.
	Lock pulumi.BoolPtrInput `pulumi:"lock"`
	// The number of failed login attempts allowed before an account is locked.
	LockAttempts pulumi.IntPtrInput `pulumi:"lockAttempts"`
	// Whether passwords must contain at least one lowercase letter.
	Lowercase pulumi.BoolPtrInput `pulumi:"lowercase"`
	// The minimum length of the password that users are required to use. The maximum length is always `64`.
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
	NonAlphanumeric pulumi.BoolPtrInput `pulumi:"nonAlphanumeric"`
	// Whether passwords must contain at least one number.
	Number pulumi.BoolPtrInput `pulumi:"number"`
	// Whether to forbid password reuse when users change their password.
	Reuse pulumi.BoolPtrInput `pulumi:"reuse"`
	// The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
	ReuseAmount pulumi.IntPtrInput `pulumi:"reuseAmount"`
	// Whether passwords must contain at least one uppercase letter.
	Uppercase pulumi.BoolPtrInput `pulumi:"uppercase"`
}

func (ProjectAuthenticationPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPassword)(nil)).Elem()
}

func (i ProjectAuthenticationPasswordArgs) ToProjectAuthenticationPasswordOutput() ProjectAuthenticationPasswordOutput {
	return i.ToProjectAuthenticationPasswordOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordArgs) ToProjectAuthenticationPasswordOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordOutput)
}

func (i ProjectAuthenticationPasswordArgs) ToProjectAuthenticationPasswordPtrOutput() ProjectAuthenticationPasswordPtrOutput {
	return i.ToProjectAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordArgs) ToProjectAuthenticationPasswordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordOutput).ToProjectAuthenticationPasswordPtrOutputWithContext(ctx)
}

// ProjectAuthenticationPasswordPtrInput is an input type that accepts ProjectAuthenticationPasswordArgs, ProjectAuthenticationPasswordPtr and ProjectAuthenticationPasswordPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordPtrInput` via:
//
//	        ProjectAuthenticationPasswordArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationPasswordPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordPtrOutput() ProjectAuthenticationPasswordPtrOutput
	ToProjectAuthenticationPasswordPtrOutputWithContext(context.Context) ProjectAuthenticationPasswordPtrOutput
}

type projectAuthenticationPasswordPtrType ProjectAuthenticationPasswordArgs

func ProjectAuthenticationPasswordPtr(v *ProjectAuthenticationPasswordArgs) ProjectAuthenticationPasswordPtrInput {
	return (*projectAuthenticationPasswordPtrType)(v)
}

func (*projectAuthenticationPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPassword)(nil)).Elem()
}

func (i *projectAuthenticationPasswordPtrType) ToProjectAuthenticationPasswordPtrOutput() ProjectAuthenticationPasswordPtrOutput {
	return i.ToProjectAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationPasswordPtrType) ToProjectAuthenticationPasswordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordPtrOutput)
}

type ProjectAuthenticationPasswordOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPassword)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordOutput) ToProjectAuthenticationPasswordOutput() ProjectAuthenticationPasswordOutput {
	return o
}

func (o ProjectAuthenticationPasswordOutput) ToProjectAuthenticationPasswordOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordOutput {
	return o
}

func (o ProjectAuthenticationPasswordOutput) ToProjectAuthenticationPasswordPtrOutput() ProjectAuthenticationPasswordPtrOutput {
	return o.ToProjectAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationPasswordOutput) ToProjectAuthenticationPasswordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationPassword) *ProjectAuthenticationPassword {
		return &v
	}).(ProjectAuthenticationPasswordPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationPasswordOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Settings related to sending password reset emails as part of the password feature.
func (o ProjectAuthenticationPasswordOutput) EmailService() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *ProjectAuthenticationPasswordEmailService {
		return v.EmailService
	}).(ProjectAuthenticationPasswordEmailServicePtrOutput)
}

// Whether users are required to change their password periodically.
func (o ProjectAuthenticationPasswordOutput) Expiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Expiration }).(pulumi.BoolPtrOutput)
}

// The number of weeks after which a user's password expires and they need to replace it.
func (o ProjectAuthenticationPasswordOutput) ExpirationWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *int { return v.ExpirationWeeks }).(pulumi.IntPtrOutput)
}

// Whether the user account should be locked after a specified number of failed login attempts.
func (o ProjectAuthenticationPasswordOutput) Lock() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Lock }).(pulumi.BoolPtrOutput)
}

// The number of failed login attempts allowed before an account is locked.
func (o ProjectAuthenticationPasswordOutput) LockAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *int { return v.LockAttempts }).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one lowercase letter.
func (o ProjectAuthenticationPasswordOutput) Lowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Lowercase }).(pulumi.BoolPtrOutput)
}

// The minimum length of the password that users are required to use. The maximum length is always `64`.
func (o ProjectAuthenticationPasswordOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
func (o ProjectAuthenticationPasswordOutput) NonAlphanumeric() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.NonAlphanumeric }).(pulumi.BoolPtrOutput)
}

// Whether passwords must contain at least one number.
func (o ProjectAuthenticationPasswordOutput) Number() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Number }).(pulumi.BoolPtrOutput)
}

// Whether to forbid password reuse when users change their password.
func (o ProjectAuthenticationPasswordOutput) Reuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Reuse }).(pulumi.BoolPtrOutput)
}

// The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
func (o ProjectAuthenticationPasswordOutput) ReuseAmount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *int { return v.ReuseAmount }).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one uppercase letter.
func (o ProjectAuthenticationPasswordOutput) Uppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPassword) *bool { return v.Uppercase }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationPasswordPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPassword)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordPtrOutput) ToProjectAuthenticationPasswordPtrOutput() ProjectAuthenticationPasswordPtrOutput {
	return o
}

func (o ProjectAuthenticationPasswordPtrOutput) ToProjectAuthenticationPasswordPtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordPtrOutput {
	return o
}

func (o ProjectAuthenticationPasswordPtrOutput) Elem() ProjectAuthenticationPasswordOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) ProjectAuthenticationPassword {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationPassword
		return ret
	}).(ProjectAuthenticationPasswordOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationPasswordPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Settings related to sending password reset emails as part of the password feature.
func (o ProjectAuthenticationPasswordPtrOutput) EmailService() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *ProjectAuthenticationPasswordEmailService {
		if v == nil {
			return nil
		}
		return v.EmailService
	}).(ProjectAuthenticationPasswordEmailServicePtrOutput)
}

// Whether users are required to change their password periodically.
func (o ProjectAuthenticationPasswordPtrOutput) Expiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(pulumi.BoolPtrOutput)
}

// The number of weeks after which a user's password expires and they need to replace it.
func (o ProjectAuthenticationPasswordPtrOutput) ExpirationWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationWeeks
	}).(pulumi.IntPtrOutput)
}

// Whether the user account should be locked after a specified number of failed login attempts.
func (o ProjectAuthenticationPasswordPtrOutput) Lock() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Lock
	}).(pulumi.BoolPtrOutput)
}

// The number of failed login attempts allowed before an account is locked.
func (o ProjectAuthenticationPasswordPtrOutput) LockAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *int {
		if v == nil {
			return nil
		}
		return v.LockAttempts
	}).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one lowercase letter.
func (o ProjectAuthenticationPasswordPtrOutput) Lowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Lowercase
	}).(pulumi.BoolPtrOutput)
}

// The minimum length of the password that users are required to use. The maximum length is always `64`.
func (o ProjectAuthenticationPasswordPtrOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *int {
		if v == nil {
			return nil
		}
		return v.MinLength
	}).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one non-alphanumeric character (e.g. `!`, `@`, `#`).
func (o ProjectAuthenticationPasswordPtrOutput) NonAlphanumeric() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.NonAlphanumeric
	}).(pulumi.BoolPtrOutput)
}

// Whether passwords must contain at least one number.
func (o ProjectAuthenticationPasswordPtrOutput) Number() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.BoolPtrOutput)
}

// Whether to forbid password reuse when users change their password.
func (o ProjectAuthenticationPasswordPtrOutput) Reuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Reuse
	}).(pulumi.BoolPtrOutput)
}

// The number of previous passwords whose hashes are kept to prevent users from reusing old passwords.
func (o ProjectAuthenticationPasswordPtrOutput) ReuseAmount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *int {
		if v == nil {
			return nil
		}
		return v.ReuseAmount
	}).(pulumi.IntPtrOutput)
}

// Whether passwords must contain at least one uppercase letter.
func (o ProjectAuthenticationPasswordPtrOutput) Uppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Uppercase
	}).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationPasswordEmailService struct {
	// The name of the email connector to use for sending emails.
	Connector string `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates []ProjectAuthenticationPasswordEmailServiceTemplate `pulumi:"templates"`
}

// ProjectAuthenticationPasswordEmailServiceInput is an input type that accepts ProjectAuthenticationPasswordEmailServiceArgs and ProjectAuthenticationPasswordEmailServiceOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordEmailServiceInput` via:
//
//	ProjectAuthenticationPasswordEmailServiceArgs{...}
type ProjectAuthenticationPasswordEmailServiceInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordEmailServiceOutput() ProjectAuthenticationPasswordEmailServiceOutput
	ToProjectAuthenticationPasswordEmailServiceOutputWithContext(context.Context) ProjectAuthenticationPasswordEmailServiceOutput
}

type ProjectAuthenticationPasswordEmailServiceArgs struct {
	// The name of the email connector to use for sending emails.
	Connector pulumi.StringInput `pulumi:"connector"`
	// A list of email templates for different authentication flows.
	Templates ProjectAuthenticationPasswordEmailServiceTemplateArrayInput `pulumi:"templates"`
}

func (ProjectAuthenticationPasswordEmailServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasswordEmailService)(nil)).Elem()
}

func (i ProjectAuthenticationPasswordEmailServiceArgs) ToProjectAuthenticationPasswordEmailServiceOutput() ProjectAuthenticationPasswordEmailServiceOutput {
	return i.ToProjectAuthenticationPasswordEmailServiceOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordEmailServiceArgs) ToProjectAuthenticationPasswordEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordEmailServiceOutput)
}

func (i ProjectAuthenticationPasswordEmailServiceArgs) ToProjectAuthenticationPasswordEmailServicePtrOutput() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return i.ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordEmailServiceArgs) ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordEmailServiceOutput).ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(ctx)
}

// ProjectAuthenticationPasswordEmailServicePtrInput is an input type that accepts ProjectAuthenticationPasswordEmailServiceArgs, ProjectAuthenticationPasswordEmailServicePtr and ProjectAuthenticationPasswordEmailServicePtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordEmailServicePtrInput` via:
//
//	        ProjectAuthenticationPasswordEmailServiceArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationPasswordEmailServicePtrInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordEmailServicePtrOutput() ProjectAuthenticationPasswordEmailServicePtrOutput
	ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(context.Context) ProjectAuthenticationPasswordEmailServicePtrOutput
}

type projectAuthenticationPasswordEmailServicePtrType ProjectAuthenticationPasswordEmailServiceArgs

func ProjectAuthenticationPasswordEmailServicePtr(v *ProjectAuthenticationPasswordEmailServiceArgs) ProjectAuthenticationPasswordEmailServicePtrInput {
	return (*projectAuthenticationPasswordEmailServicePtrType)(v)
}

func (*projectAuthenticationPasswordEmailServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPasswordEmailService)(nil)).Elem()
}

func (i *projectAuthenticationPasswordEmailServicePtrType) ToProjectAuthenticationPasswordEmailServicePtrOutput() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return i.ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationPasswordEmailServicePtrType) ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordEmailServicePtrOutput)
}

type ProjectAuthenticationPasswordEmailServiceOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordEmailServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasswordEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordEmailServiceOutput) ToProjectAuthenticationPasswordEmailServiceOutput() ProjectAuthenticationPasswordEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServiceOutput) ToProjectAuthenticationPasswordEmailServiceOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServiceOutput) ToProjectAuthenticationPasswordEmailServicePtrOutput() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o.ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationPasswordEmailServiceOutput) ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationPasswordEmailService) *ProjectAuthenticationPasswordEmailService {
		return &v
	}).(ProjectAuthenticationPasswordEmailServicePtrOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationPasswordEmailServiceOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailService) string { return v.Connector }).(pulumi.StringOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationPasswordEmailServiceOutput) Templates() ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailService) []ProjectAuthenticationPasswordEmailServiceTemplate {
		return v.Templates
	}).(ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationPasswordEmailServicePtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordEmailServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationPasswordEmailService)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordEmailServicePtrOutput) ToProjectAuthenticationPasswordEmailServicePtrOutput() ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServicePtrOutput) ToProjectAuthenticationPasswordEmailServicePtrOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServicePtrOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServicePtrOutput) Elem() ProjectAuthenticationPasswordEmailServiceOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasswordEmailService) ProjectAuthenticationPasswordEmailService {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationPasswordEmailService
		return ret
	}).(ProjectAuthenticationPasswordEmailServiceOutput)
}

// The name of the email connector to use for sending emails.
func (o ProjectAuthenticationPasswordEmailServicePtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasswordEmailService) *string {
		if v == nil {
			return nil
		}
		return &v.Connector
	}).(pulumi.StringPtrOutput)
}

// A list of email templates for different authentication flows.
func (o ProjectAuthenticationPasswordEmailServicePtrOutput) Templates() ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectAuthenticationPasswordEmailService) []ProjectAuthenticationPasswordEmailServiceTemplate {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationPasswordEmailServiceTemplate struct {
	// Whether this email template is currently active and in use.
	Active *bool `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody *string `pulumi:"htmlBody"`
	Id       *string `pulumi:"id"`
	// Unique name for this email template.
	Name string `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody *string `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject string `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody *bool `pulumi:"usePlainTextBody"`
}

// ProjectAuthenticationPasswordEmailServiceTemplateInput is an input type that accepts ProjectAuthenticationPasswordEmailServiceTemplateArgs and ProjectAuthenticationPasswordEmailServiceTemplateOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordEmailServiceTemplateInput` via:
//
//	ProjectAuthenticationPasswordEmailServiceTemplateArgs{...}
type ProjectAuthenticationPasswordEmailServiceTemplateInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordEmailServiceTemplateOutput() ProjectAuthenticationPasswordEmailServiceTemplateOutput
	ToProjectAuthenticationPasswordEmailServiceTemplateOutputWithContext(context.Context) ProjectAuthenticationPasswordEmailServiceTemplateOutput
}

type ProjectAuthenticationPasswordEmailServiceTemplateArgs struct {
	// Whether this email template is currently active and in use.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// HTML content of the email message body, required if `usePlainTextBody` isn't set.
	HtmlBody pulumi.StringPtrInput `pulumi:"htmlBody"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// Unique name for this email template.
	Name pulumi.StringInput `pulumi:"name"`
	// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
	PlainTextBody pulumi.StringPtrInput `pulumi:"plainTextBody"`
	// Subject line of the email message.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Whether to use the plain text body instead of HTML for the email.
	UsePlainTextBody pulumi.BoolPtrInput `pulumi:"usePlainTextBody"`
}

func (ProjectAuthenticationPasswordEmailServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasswordEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationPasswordEmailServiceTemplateArgs) ToProjectAuthenticationPasswordEmailServiceTemplateOutput() ProjectAuthenticationPasswordEmailServiceTemplateOutput {
	return i.ToProjectAuthenticationPasswordEmailServiceTemplateOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordEmailServiceTemplateArgs) ToProjectAuthenticationPasswordEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordEmailServiceTemplateOutput)
}

// ProjectAuthenticationPasswordEmailServiceTemplateArrayInput is an input type that accepts ProjectAuthenticationPasswordEmailServiceTemplateArray and ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectAuthenticationPasswordEmailServiceTemplateArrayInput` via:
//
//	ProjectAuthenticationPasswordEmailServiceTemplateArray{ ProjectAuthenticationPasswordEmailServiceTemplateArgs{...} }
type ProjectAuthenticationPasswordEmailServiceTemplateArrayInput interface {
	pulumi.Input

	ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutput() ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput
	ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutputWithContext(context.Context) ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput
}

type ProjectAuthenticationPasswordEmailServiceTemplateArray []ProjectAuthenticationPasswordEmailServiceTemplateInput

func (ProjectAuthenticationPasswordEmailServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationPasswordEmailServiceTemplate)(nil)).Elem()
}

func (i ProjectAuthenticationPasswordEmailServiceTemplateArray) ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutput() ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return i.ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectAuthenticationPasswordEmailServiceTemplateArray) ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput)
}

type ProjectAuthenticationPasswordEmailServiceTemplateOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordEmailServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationPasswordEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) ToProjectAuthenticationPasswordEmailServiceTemplateOutput() ProjectAuthenticationPasswordEmailServiceTemplateOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) ToProjectAuthenticationPasswordEmailServiceTemplateOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceTemplateOutput {
	return o
}

// Whether this email template is currently active and in use.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// HTML content of the email message body, required if `usePlainTextBody` isn't set.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) HtmlBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) *string { return v.HtmlBody }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique name for this email template.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// Plain text version of the email message body, required if `usePlainTextBody` is set to `true`.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) PlainTextBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) *string { return v.PlainTextBody }).(pulumi.StringPtrOutput)
}

// Subject line of the email message.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) string { return v.Subject }).(pulumi.StringOutput)
}

// Whether to use the plain text body instead of HTML for the email.
func (o ProjectAuthenticationPasswordEmailServiceTemplateOutput) UsePlainTextBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationPasswordEmailServiceTemplate) *bool { return v.UsePlainTextBody }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthenticationPasswordEmailServiceTemplate)(nil)).Elem()
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput) ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutput() ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput) ToProjectAuthenticationPasswordEmailServiceTemplateArrayOutputWithContext(ctx context.Context) ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput {
	return o
}

func (o ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput) Index(i pulumi.IntInput) ProjectAuthenticationPasswordEmailServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthenticationPasswordEmailServiceTemplate {
		return vs[0].([]ProjectAuthenticationPasswordEmailServiceTemplate)[vs[1].(int)]
	}).(ProjectAuthenticationPasswordEmailServiceTemplateOutput)
}

type ProjectAuthenticationSso struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
	// Whether to merge existing user accounts with new ones created through SSO authentication.
	MergeUsers *bool `pulumi:"mergeUsers"`
	// The URL the end user is redirected to after a successful authentication. If one is specified in tenant level settings or SDK/API call, they will override this value.
	RedirectUrl *string `pulumi:"redirectUrl"`
}

// ProjectAuthenticationSsoInput is an input type that accepts ProjectAuthenticationSsoArgs and ProjectAuthenticationSsoOutput values.
// You can construct a concrete instance of `ProjectAuthenticationSsoInput` via:
//
//	ProjectAuthenticationSsoArgs{...}
type ProjectAuthenticationSsoInput interface {
	pulumi.Input

	ToProjectAuthenticationSsoOutput() ProjectAuthenticationSsoOutput
	ToProjectAuthenticationSsoOutputWithContext(context.Context) ProjectAuthenticationSsoOutput
}

type ProjectAuthenticationSsoArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Whether to merge existing user accounts with new ones created through SSO authentication.
	MergeUsers pulumi.BoolPtrInput `pulumi:"mergeUsers"`
	// The URL the end user is redirected to after a successful authentication. If one is specified in tenant level settings or SDK/API call, they will override this value.
	RedirectUrl pulumi.StringPtrInput `pulumi:"redirectUrl"`
}

func (ProjectAuthenticationSsoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationSso)(nil)).Elem()
}

func (i ProjectAuthenticationSsoArgs) ToProjectAuthenticationSsoOutput() ProjectAuthenticationSsoOutput {
	return i.ToProjectAuthenticationSsoOutputWithContext(context.Background())
}

func (i ProjectAuthenticationSsoArgs) ToProjectAuthenticationSsoOutputWithContext(ctx context.Context) ProjectAuthenticationSsoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationSsoOutput)
}

func (i ProjectAuthenticationSsoArgs) ToProjectAuthenticationSsoPtrOutput() ProjectAuthenticationSsoPtrOutput {
	return i.ToProjectAuthenticationSsoPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationSsoArgs) ToProjectAuthenticationSsoPtrOutputWithContext(ctx context.Context) ProjectAuthenticationSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationSsoOutput).ToProjectAuthenticationSsoPtrOutputWithContext(ctx)
}

// ProjectAuthenticationSsoPtrInput is an input type that accepts ProjectAuthenticationSsoArgs, ProjectAuthenticationSsoPtr and ProjectAuthenticationSsoPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationSsoPtrInput` via:
//
//	        ProjectAuthenticationSsoArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationSsoPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationSsoPtrOutput() ProjectAuthenticationSsoPtrOutput
	ToProjectAuthenticationSsoPtrOutputWithContext(context.Context) ProjectAuthenticationSsoPtrOutput
}

type projectAuthenticationSsoPtrType ProjectAuthenticationSsoArgs

func ProjectAuthenticationSsoPtr(v *ProjectAuthenticationSsoArgs) ProjectAuthenticationSsoPtrInput {
	return (*projectAuthenticationSsoPtrType)(v)
}

func (*projectAuthenticationSsoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationSso)(nil)).Elem()
}

func (i *projectAuthenticationSsoPtrType) ToProjectAuthenticationSsoPtrOutput() ProjectAuthenticationSsoPtrOutput {
	return i.ToProjectAuthenticationSsoPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationSsoPtrType) ToProjectAuthenticationSsoPtrOutputWithContext(ctx context.Context) ProjectAuthenticationSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationSsoPtrOutput)
}

type ProjectAuthenticationSsoOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationSsoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationSso)(nil)).Elem()
}

func (o ProjectAuthenticationSsoOutput) ToProjectAuthenticationSsoOutput() ProjectAuthenticationSsoOutput {
	return o
}

func (o ProjectAuthenticationSsoOutput) ToProjectAuthenticationSsoOutputWithContext(ctx context.Context) ProjectAuthenticationSsoOutput {
	return o
}

func (o ProjectAuthenticationSsoOutput) ToProjectAuthenticationSsoPtrOutput() ProjectAuthenticationSsoPtrOutput {
	return o.ToProjectAuthenticationSsoPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationSsoOutput) ToProjectAuthenticationSsoPtrOutputWithContext(ctx context.Context) ProjectAuthenticationSsoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationSso) *ProjectAuthenticationSso {
		return &v
	}).(ProjectAuthenticationSsoPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationSsoOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationSso) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through SSO authentication.
func (o ProjectAuthenticationSsoOutput) MergeUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationSso) *bool { return v.MergeUsers }).(pulumi.BoolPtrOutput)
}

// The URL the end user is redirected to after a successful authentication. If one is specified in tenant level settings or SDK/API call, they will override this value.
func (o ProjectAuthenticationSsoOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationSso) *string { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationSsoPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationSsoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationSso)(nil)).Elem()
}

func (o ProjectAuthenticationSsoPtrOutput) ToProjectAuthenticationSsoPtrOutput() ProjectAuthenticationSsoPtrOutput {
	return o
}

func (o ProjectAuthenticationSsoPtrOutput) ToProjectAuthenticationSsoPtrOutputWithContext(ctx context.Context) ProjectAuthenticationSsoPtrOutput {
	return o
}

func (o ProjectAuthenticationSsoPtrOutput) Elem() ProjectAuthenticationSsoOutput {
	return o.ApplyT(func(v *ProjectAuthenticationSso) ProjectAuthenticationSso {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationSso
		return ret
	}).(ProjectAuthenticationSsoOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationSsoPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationSso) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Whether to merge existing user accounts with new ones created through SSO authentication.
func (o ProjectAuthenticationSsoPtrOutput) MergeUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationSso) *bool {
		if v == nil {
			return nil
		}
		return v.MergeUsers
	}).(pulumi.BoolPtrOutput)
}

// The URL the end user is redirected to after a successful authentication. If one is specified in tenant level settings or SDK/API call, they will override this value.
func (o ProjectAuthenticationSsoPtrOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationSso) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUrl
	}).(pulumi.StringPtrOutput)
}

type ProjectAuthenticationTotp struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled *bool `pulumi:"disabled"`
}

// ProjectAuthenticationTotpInput is an input type that accepts ProjectAuthenticationTotpArgs and ProjectAuthenticationTotpOutput values.
// You can construct a concrete instance of `ProjectAuthenticationTotpInput` via:
//
//	ProjectAuthenticationTotpArgs{...}
type ProjectAuthenticationTotpInput interface {
	pulumi.Input

	ToProjectAuthenticationTotpOutput() ProjectAuthenticationTotpOutput
	ToProjectAuthenticationTotpOutputWithContext(context.Context) ProjectAuthenticationTotpOutput
}

type ProjectAuthenticationTotpArgs struct {
	// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (ProjectAuthenticationTotpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationTotp)(nil)).Elem()
}

func (i ProjectAuthenticationTotpArgs) ToProjectAuthenticationTotpOutput() ProjectAuthenticationTotpOutput {
	return i.ToProjectAuthenticationTotpOutputWithContext(context.Background())
}

func (i ProjectAuthenticationTotpArgs) ToProjectAuthenticationTotpOutputWithContext(ctx context.Context) ProjectAuthenticationTotpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationTotpOutput)
}

func (i ProjectAuthenticationTotpArgs) ToProjectAuthenticationTotpPtrOutput() ProjectAuthenticationTotpPtrOutput {
	return i.ToProjectAuthenticationTotpPtrOutputWithContext(context.Background())
}

func (i ProjectAuthenticationTotpArgs) ToProjectAuthenticationTotpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationTotpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationTotpOutput).ToProjectAuthenticationTotpPtrOutputWithContext(ctx)
}

// ProjectAuthenticationTotpPtrInput is an input type that accepts ProjectAuthenticationTotpArgs, ProjectAuthenticationTotpPtr and ProjectAuthenticationTotpPtrOutput values.
// You can construct a concrete instance of `ProjectAuthenticationTotpPtrInput` via:
//
//	        ProjectAuthenticationTotpArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthenticationTotpPtrInput interface {
	pulumi.Input

	ToProjectAuthenticationTotpPtrOutput() ProjectAuthenticationTotpPtrOutput
	ToProjectAuthenticationTotpPtrOutputWithContext(context.Context) ProjectAuthenticationTotpPtrOutput
}

type projectAuthenticationTotpPtrType ProjectAuthenticationTotpArgs

func ProjectAuthenticationTotpPtr(v *ProjectAuthenticationTotpArgs) ProjectAuthenticationTotpPtrInput {
	return (*projectAuthenticationTotpPtrType)(v)
}

func (*projectAuthenticationTotpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationTotp)(nil)).Elem()
}

func (i *projectAuthenticationTotpPtrType) ToProjectAuthenticationTotpPtrOutput() ProjectAuthenticationTotpPtrOutput {
	return i.ToProjectAuthenticationTotpPtrOutputWithContext(context.Background())
}

func (i *projectAuthenticationTotpPtrType) ToProjectAuthenticationTotpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationTotpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthenticationTotpPtrOutput)
}

type ProjectAuthenticationTotpOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationTotpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthenticationTotp)(nil)).Elem()
}

func (o ProjectAuthenticationTotpOutput) ToProjectAuthenticationTotpOutput() ProjectAuthenticationTotpOutput {
	return o
}

func (o ProjectAuthenticationTotpOutput) ToProjectAuthenticationTotpOutputWithContext(ctx context.Context) ProjectAuthenticationTotpOutput {
	return o
}

func (o ProjectAuthenticationTotpOutput) ToProjectAuthenticationTotpPtrOutput() ProjectAuthenticationTotpPtrOutput {
	return o.ToProjectAuthenticationTotpPtrOutputWithContext(context.Background())
}

func (o ProjectAuthenticationTotpOutput) ToProjectAuthenticationTotpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationTotpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthenticationTotp) *ProjectAuthenticationTotp {
		return &v
	}).(ProjectAuthenticationTotpPtrOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationTotpOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectAuthenticationTotp) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type ProjectAuthenticationTotpPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthenticationTotpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthenticationTotp)(nil)).Elem()
}

func (o ProjectAuthenticationTotpPtrOutput) ToProjectAuthenticationTotpPtrOutput() ProjectAuthenticationTotpPtrOutput {
	return o
}

func (o ProjectAuthenticationTotpPtrOutput) ToProjectAuthenticationTotpPtrOutputWithContext(ctx context.Context) ProjectAuthenticationTotpPtrOutput {
	return o
}

func (o ProjectAuthenticationTotpPtrOutput) Elem() ProjectAuthenticationTotpOutput {
	return o.ApplyT(func(v *ProjectAuthenticationTotp) ProjectAuthenticationTotp {
		if v != nil {
			return *v
		}
		var ret ProjectAuthenticationTotp
		return ret
	}).(ProjectAuthenticationTotpOutput)
}

// Setting this to `true` will disallow using this authentication method directly via API and SDK calls. Note that this does not affect authentication flows that are configured to use this authentication method.
func (o ProjectAuthenticationTotpPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectAuthenticationTotp) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

type ProjectAuthorization struct {
	// A list of `Permission` objects.
	Permissions []ProjectAuthorizationPermission `pulumi:"permissions"`
	// A list of `Role` objects.
	Roles []ProjectAuthorizationRole `pulumi:"roles"`
}

// ProjectAuthorizationInput is an input type that accepts ProjectAuthorizationArgs and ProjectAuthorizationOutput values.
// You can construct a concrete instance of `ProjectAuthorizationInput` via:
//
//	ProjectAuthorizationArgs{...}
type ProjectAuthorizationInput interface {
	pulumi.Input

	ToProjectAuthorizationOutput() ProjectAuthorizationOutput
	ToProjectAuthorizationOutputWithContext(context.Context) ProjectAuthorizationOutput
}

type ProjectAuthorizationArgs struct {
	// A list of `Permission` objects.
	Permissions ProjectAuthorizationPermissionArrayInput `pulumi:"permissions"`
	// A list of `Role` objects.
	Roles ProjectAuthorizationRoleArrayInput `pulumi:"roles"`
}

func (ProjectAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorization)(nil)).Elem()
}

func (i ProjectAuthorizationArgs) ToProjectAuthorizationOutput() ProjectAuthorizationOutput {
	return i.ToProjectAuthorizationOutputWithContext(context.Background())
}

func (i ProjectAuthorizationArgs) ToProjectAuthorizationOutputWithContext(ctx context.Context) ProjectAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationOutput)
}

func (i ProjectAuthorizationArgs) ToProjectAuthorizationPtrOutput() ProjectAuthorizationPtrOutput {
	return i.ToProjectAuthorizationPtrOutputWithContext(context.Background())
}

func (i ProjectAuthorizationArgs) ToProjectAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationOutput).ToProjectAuthorizationPtrOutputWithContext(ctx)
}

// ProjectAuthorizationPtrInput is an input type that accepts ProjectAuthorizationArgs, ProjectAuthorizationPtr and ProjectAuthorizationPtrOutput values.
// You can construct a concrete instance of `ProjectAuthorizationPtrInput` via:
//
//	        ProjectAuthorizationArgs{...}
//
//	or:
//
//	        nil
type ProjectAuthorizationPtrInput interface {
	pulumi.Input

	ToProjectAuthorizationPtrOutput() ProjectAuthorizationPtrOutput
	ToProjectAuthorizationPtrOutputWithContext(context.Context) ProjectAuthorizationPtrOutput
}

type projectAuthorizationPtrType ProjectAuthorizationArgs

func ProjectAuthorizationPtr(v *ProjectAuthorizationArgs) ProjectAuthorizationPtrInput {
	return (*projectAuthorizationPtrType)(v)
}

func (*projectAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthorization)(nil)).Elem()
}

func (i *projectAuthorizationPtrType) ToProjectAuthorizationPtrOutput() ProjectAuthorizationPtrOutput {
	return i.ToProjectAuthorizationPtrOutputWithContext(context.Background())
}

func (i *projectAuthorizationPtrType) ToProjectAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationPtrOutput)
}

type ProjectAuthorizationOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorization)(nil)).Elem()
}

func (o ProjectAuthorizationOutput) ToProjectAuthorizationOutput() ProjectAuthorizationOutput {
	return o
}

func (o ProjectAuthorizationOutput) ToProjectAuthorizationOutputWithContext(ctx context.Context) ProjectAuthorizationOutput {
	return o
}

func (o ProjectAuthorizationOutput) ToProjectAuthorizationPtrOutput() ProjectAuthorizationPtrOutput {
	return o.ToProjectAuthorizationPtrOutputWithContext(context.Background())
}

func (o ProjectAuthorizationOutput) ToProjectAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAuthorization) *ProjectAuthorization {
		return &v
	}).(ProjectAuthorizationPtrOutput)
}

// A list of `Permission` objects.
func (o ProjectAuthorizationOutput) Permissions() ProjectAuthorizationPermissionArrayOutput {
	return o.ApplyT(func(v ProjectAuthorization) []ProjectAuthorizationPermission { return v.Permissions }).(ProjectAuthorizationPermissionArrayOutput)
}

// A list of `Role` objects.
func (o ProjectAuthorizationOutput) Roles() ProjectAuthorizationRoleArrayOutput {
	return o.ApplyT(func(v ProjectAuthorization) []ProjectAuthorizationRole { return v.Roles }).(ProjectAuthorizationRoleArrayOutput)
}

type ProjectAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAuthorization)(nil)).Elem()
}

func (o ProjectAuthorizationPtrOutput) ToProjectAuthorizationPtrOutput() ProjectAuthorizationPtrOutput {
	return o
}

func (o ProjectAuthorizationPtrOutput) ToProjectAuthorizationPtrOutputWithContext(ctx context.Context) ProjectAuthorizationPtrOutput {
	return o
}

func (o ProjectAuthorizationPtrOutput) Elem() ProjectAuthorizationOutput {
	return o.ApplyT(func(v *ProjectAuthorization) ProjectAuthorization {
		if v != nil {
			return *v
		}
		var ret ProjectAuthorization
		return ret
	}).(ProjectAuthorizationOutput)
}

// A list of `Permission` objects.
func (o ProjectAuthorizationPtrOutput) Permissions() ProjectAuthorizationPermissionArrayOutput {
	return o.ApplyT(func(v *ProjectAuthorization) []ProjectAuthorizationPermission {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(ProjectAuthorizationPermissionArrayOutput)
}

// A list of `Role` objects.
func (o ProjectAuthorizationPtrOutput) Roles() ProjectAuthorizationRoleArrayOutput {
	return o.ApplyT(func(v *ProjectAuthorization) []ProjectAuthorizationRole {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(ProjectAuthorizationRoleArrayOutput)
}

type ProjectAuthorizationPermission struct {
	// A description for the permission.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A name for the permission.
	Name string `pulumi:"name"`
}

// ProjectAuthorizationPermissionInput is an input type that accepts ProjectAuthorizationPermissionArgs and ProjectAuthorizationPermissionOutput values.
// You can construct a concrete instance of `ProjectAuthorizationPermissionInput` via:
//
//	ProjectAuthorizationPermissionArgs{...}
type ProjectAuthorizationPermissionInput interface {
	pulumi.Input

	ToProjectAuthorizationPermissionOutput() ProjectAuthorizationPermissionOutput
	ToProjectAuthorizationPermissionOutputWithContext(context.Context) ProjectAuthorizationPermissionOutput
}

type ProjectAuthorizationPermissionArgs struct {
	// A description for the permission.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A name for the permission.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectAuthorizationPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorizationPermission)(nil)).Elem()
}

func (i ProjectAuthorizationPermissionArgs) ToProjectAuthorizationPermissionOutput() ProjectAuthorizationPermissionOutput {
	return i.ToProjectAuthorizationPermissionOutputWithContext(context.Background())
}

func (i ProjectAuthorizationPermissionArgs) ToProjectAuthorizationPermissionOutputWithContext(ctx context.Context) ProjectAuthorizationPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationPermissionOutput)
}

// ProjectAuthorizationPermissionArrayInput is an input type that accepts ProjectAuthorizationPermissionArray and ProjectAuthorizationPermissionArrayOutput values.
// You can construct a concrete instance of `ProjectAuthorizationPermissionArrayInput` via:
//
//	ProjectAuthorizationPermissionArray{ ProjectAuthorizationPermissionArgs{...} }
type ProjectAuthorizationPermissionArrayInput interface {
	pulumi.Input

	ToProjectAuthorizationPermissionArrayOutput() ProjectAuthorizationPermissionArrayOutput
	ToProjectAuthorizationPermissionArrayOutputWithContext(context.Context) ProjectAuthorizationPermissionArrayOutput
}

type ProjectAuthorizationPermissionArray []ProjectAuthorizationPermissionInput

func (ProjectAuthorizationPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthorizationPermission)(nil)).Elem()
}

func (i ProjectAuthorizationPermissionArray) ToProjectAuthorizationPermissionArrayOutput() ProjectAuthorizationPermissionArrayOutput {
	return i.ToProjectAuthorizationPermissionArrayOutputWithContext(context.Background())
}

func (i ProjectAuthorizationPermissionArray) ToProjectAuthorizationPermissionArrayOutputWithContext(ctx context.Context) ProjectAuthorizationPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationPermissionArrayOutput)
}

type ProjectAuthorizationPermissionOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorizationPermission)(nil)).Elem()
}

func (o ProjectAuthorizationPermissionOutput) ToProjectAuthorizationPermissionOutput() ProjectAuthorizationPermissionOutput {
	return o
}

func (o ProjectAuthorizationPermissionOutput) ToProjectAuthorizationPermissionOutputWithContext(ctx context.Context) ProjectAuthorizationPermissionOutput {
	return o
}

// A description for the permission.
func (o ProjectAuthorizationPermissionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthorizationPermission) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthorizationPermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthorizationPermission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A name for the permission.
func (o ProjectAuthorizationPermissionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthorizationPermission) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectAuthorizationPermissionArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthorizationPermission)(nil)).Elem()
}

func (o ProjectAuthorizationPermissionArrayOutput) ToProjectAuthorizationPermissionArrayOutput() ProjectAuthorizationPermissionArrayOutput {
	return o
}

func (o ProjectAuthorizationPermissionArrayOutput) ToProjectAuthorizationPermissionArrayOutputWithContext(ctx context.Context) ProjectAuthorizationPermissionArrayOutput {
	return o
}

func (o ProjectAuthorizationPermissionArrayOutput) Index(i pulumi.IntInput) ProjectAuthorizationPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthorizationPermission {
		return vs[0].([]ProjectAuthorizationPermission)[vs[1].(int)]
	}).(ProjectAuthorizationPermissionOutput)
}

type ProjectAuthorizationRole struct {
	// A description for the role.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A name for the role.
	Name string `pulumi:"name"`
	// A list of permissions by name to be included in the role.
	Permissions []string `pulumi:"permissions"`
}

// ProjectAuthorizationRoleInput is an input type that accepts ProjectAuthorizationRoleArgs and ProjectAuthorizationRoleOutput values.
// You can construct a concrete instance of `ProjectAuthorizationRoleInput` via:
//
//	ProjectAuthorizationRoleArgs{...}
type ProjectAuthorizationRoleInput interface {
	pulumi.Input

	ToProjectAuthorizationRoleOutput() ProjectAuthorizationRoleOutput
	ToProjectAuthorizationRoleOutputWithContext(context.Context) ProjectAuthorizationRoleOutput
}

type ProjectAuthorizationRoleArgs struct {
	// A description for the role.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A name for the role.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of permissions by name to be included in the role.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (ProjectAuthorizationRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorizationRole)(nil)).Elem()
}

func (i ProjectAuthorizationRoleArgs) ToProjectAuthorizationRoleOutput() ProjectAuthorizationRoleOutput {
	return i.ToProjectAuthorizationRoleOutputWithContext(context.Background())
}

func (i ProjectAuthorizationRoleArgs) ToProjectAuthorizationRoleOutputWithContext(ctx context.Context) ProjectAuthorizationRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationRoleOutput)
}

// ProjectAuthorizationRoleArrayInput is an input type that accepts ProjectAuthorizationRoleArray and ProjectAuthorizationRoleArrayOutput values.
// You can construct a concrete instance of `ProjectAuthorizationRoleArrayInput` via:
//
//	ProjectAuthorizationRoleArray{ ProjectAuthorizationRoleArgs{...} }
type ProjectAuthorizationRoleArrayInput interface {
	pulumi.Input

	ToProjectAuthorizationRoleArrayOutput() ProjectAuthorizationRoleArrayOutput
	ToProjectAuthorizationRoleArrayOutputWithContext(context.Context) ProjectAuthorizationRoleArrayOutput
}

type ProjectAuthorizationRoleArray []ProjectAuthorizationRoleInput

func (ProjectAuthorizationRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthorizationRole)(nil)).Elem()
}

func (i ProjectAuthorizationRoleArray) ToProjectAuthorizationRoleArrayOutput() ProjectAuthorizationRoleArrayOutput {
	return i.ToProjectAuthorizationRoleArrayOutputWithContext(context.Background())
}

func (i ProjectAuthorizationRoleArray) ToProjectAuthorizationRoleArrayOutputWithContext(ctx context.Context) ProjectAuthorizationRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAuthorizationRoleArrayOutput)
}

type ProjectAuthorizationRoleOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAuthorizationRole)(nil)).Elem()
}

func (o ProjectAuthorizationRoleOutput) ToProjectAuthorizationRoleOutput() ProjectAuthorizationRoleOutput {
	return o
}

func (o ProjectAuthorizationRoleOutput) ToProjectAuthorizationRoleOutputWithContext(ctx context.Context) ProjectAuthorizationRoleOutput {
	return o
}

// A description for the role.
func (o ProjectAuthorizationRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthorizationRole) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectAuthorizationRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAuthorizationRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A name for the role.
func (o ProjectAuthorizationRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAuthorizationRole) string { return v.Name }).(pulumi.StringOutput)
}

// A list of permissions by name to be included in the role.
func (o ProjectAuthorizationRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectAuthorizationRole) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type ProjectAuthorizationRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectAuthorizationRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAuthorizationRole)(nil)).Elem()
}

func (o ProjectAuthorizationRoleArrayOutput) ToProjectAuthorizationRoleArrayOutput() ProjectAuthorizationRoleArrayOutput {
	return o
}

func (o ProjectAuthorizationRoleArrayOutput) ToProjectAuthorizationRoleArrayOutputWithContext(ctx context.Context) ProjectAuthorizationRoleArrayOutput {
	return o
}

func (o ProjectAuthorizationRoleArrayOutput) Index(i pulumi.IntInput) ProjectAuthorizationRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAuthorizationRole {
		return vs[0].([]ProjectAuthorizationRole)[vs[1].(int)]
	}).(ProjectAuthorizationRoleOutput)
}

type ProjectConnectors struct {
	// Utilize IP threat intelligence to block malicious login attempts with the AbuseIPDB connector.
	Abuseipdbs []ProjectConnectorsAbuseipdb `pulumi:"abuseipdbs"`
	// Track user activity and traits at any point in your user journey with the Amplitude connector.
	Amplitudes []ProjectConnectorsAmplitude `pulumi:"amplitudes"`
	// Send audit events to a custom webhook.
	AuditWebhooks []ProjectConnectorsAuditWebhook `pulumi:"auditWebhooks"`
	// Stream authentication audit logs with the Amazon S3 connector.
	AwsS3s []ProjectConnectorsAwsS3 `pulumi:"awsS3s"`
	// Localize the language of your login and user journey screens with the Amazon Translate connector.
	AwsTranslates []ProjectConnectorsAwsTranslate `pulumi:"awsTranslates"`
	// Utilize threat intelligence to block malicious login attempts or check leaks with the Cybersixgill connector.
	Cybersixgills []ProjectConnectorsCybersixgill `pulumi:"cybersixgills"`
	// Stream authentication audit logs with the Datadog connector.
	Datadogs []ProjectConnectorsDatadog `pulumi:"datadogs"`
	// DevRev Grow is a Growth CRM that brings salespeople, product marketers, and PMs onto an AI-native platform to follow the journey of a visitor to a lead, to a contact, and then to a user - to create a champion, not a churned user.
	DevrevGrows []ProjectConnectorsDevrevGrow `pulumi:"devrevGrows"`
	// Get user information from Docebo in your Descope user journeys with the Docebo connector.
	Docebos []ProjectConnectorsDocebo `pulumi:"docebos"`
	// Send Viber messages to the user.
	EightByEightVibers []ProjectConnectorsEightByEightViber `pulumi:"eightByEightVibers"`
	// Send WhatsApp messages to the user.
	EightByEightWhatsapps []ProjectConnectorsEightByEightWhatsapp `pulumi:"eightByEightWhatsapps"`
	// Use this connector to obtain an identity trust score.
	Elephants []ProjectConnectorsElephant `pulumi:"elephants"`
	// A generic HTTP token connector.
	ExternalTokenHttps []ProjectConnectorsExternalTokenHttp `pulumi:"externalTokenHttps"`
	// Descope Fingerprint capabilities for fraud detection and risk assessment.
	FingerprintDescopes []ProjectConnectorsFingerprintDescope `pulumi:"fingerprintDescopes"`
	// Prevent fraud by adding device intelligence with the Fingerprint connector.
	Fingerprints []ProjectConnectorsFingerprint `pulumi:"fingerprints"`
	// Firebase connector enables you to utilize Firebase's APIs to generate a Firebase user token for a given Descope user.
	FirebaseAdmins []ProjectConnectorsFirebaseAdmin `pulumi:"firebaseAdmins"`
	// Leverage ML-based risk scores for fraud prevention with the Forter connector.
	Forters []ProjectConnectorsForter `pulumi:"forters"`
	// Send emails using a generic Email gateway.
	GenericEmailGateways []ProjectConnectorsGenericEmailGateway `pulumi:"genericEmailGateways"`
	// Send messages using a generic SMS gateway.
	GenericSmsGateways []ProjectConnectorsGenericSmsGateway `pulumi:"genericSmsGateways"`
	// Stream logs and audit events with the Google Cloud Logging connector.
	GoogleCloudLoggings []ProjectConnectorsGoogleCloudLogging `pulumi:"googleCloudLoggings"`
	// Localize the language of your login and user journey screens with the Google Cloud Translation connector.
	GoogleCloudTranslations []ProjectConnectorsGoogleCloudTranslation `pulumi:"googleCloudTranslations"`
	// Get address autocompletions from Place Autocomplete Data API.
	GoogleMapsPlaces []ProjectConnectorsGoogleMapsPlace `pulumi:"googleMapsPlaces"`
	// Check if passwords have been previously exposed in data breaches with the Have I Been Pwned connector.
	Hibps []ProjectConnectorsHibp `pulumi:"hibps"`
	// A general purpose HTTP client
	Https []ProjectConnectorsHttp `pulumi:"https"`
	// Orchestrate customer identity information from your Descope user journey with the HubSpot connector.
	Hubspots []ProjectConnectorsHubspot `pulumi:"hubspots"`
	// Use the Incode connection to run identity verification processes like document checks or facial recognition.
	Incodes []ProjectConnectorsIncode `pulumi:"incodes"`
	// Orchestrate customer identity information from your Descope user journey with the Intercom connector.
	Intercoms []ProjectConnectorsIntercom `pulumi:"intercoms"`
	// Localize the language of your login and user journey screens with the Lokalise connector.
	Lokalises []ProjectConnectorsLokalise `pulumi:"lokalises"`
	// Track and send user event data (e.g. page views, purchases, etc.) across connected tools using the mParticle connector.
	Mparticles []ProjectConnectorsMparticle `pulumi:"mparticles"`
	// Stream authentication audit logs with the New Relic connector.
	Newrelics []ProjectConnectorsNewrelic `pulumi:"newrelics"`
	// Get address autocompletions from Radar Autocomplete API.
	Radars []ProjectConnectorsRadar `pulumi:"radars"`
	// Mitigate fraud using advanced risk analysis and add adaptive MFA with the reCAPTCHA Enterprise connector.
	RecaptchaEnterprises []ProjectConnectorsRecaptchaEnterprise `pulumi:"recaptchaEnterprises"`
	// Prevent bot attacks on your login pages with the reCAPTCHA v3 connector.
	Recaptchas []ProjectConnectorsRecaptcha `pulumi:"recaptchas"`
	// Add image recognition capabilities for identity verification and fraud prevention with the Amazon Rekognition connector.
	Rekognitions []ProjectConnectorsRekognition `pulumi:"rekognitions"`
	// Send transactional messages with the Salesforce Marketing Cloud connector.
	SalesforceMarketingClouds []ProjectConnectorsSalesforceMarketingCloud `pulumi:"salesforceMarketingClouds"`
	// Run SQL queries to retrieve user roles, profiles, account status, and more with the Salesforce connector.
	Salesforces []ProjectConnectorsSalesforce `pulumi:"salesforces"`
	// Evaluate customer risk using Sardine
	Sardines []ProjectConnectorsSardine `pulumi:"sardines"`
	// Orchestrate customer identity traits and signals from your Descope user journey with the Segment connector.
	Segments []ProjectConnectorsSegment `pulumi:"segments"`
	// SendGrid is a cloud-based SMTP provider that allows you to send emails without having to maintain email servers.
	Sendgrids []ProjectConnectorsSendgrid `pulumi:"sendgrids"`
	// Amazon Simple Email Service (SES) for sending emails through AWS infrastructure.
	Ses []ProjectConnectorsSe `pulumi:"ses"`
	// Send updates to your team on Slack.
	Slacks []ProjectConnectorsSlack `pulumi:"slacks"`
	// Localize the language of your login and user journey screens with the Smartling connector.
	Smartlings []ProjectConnectorsSmartling `pulumi:"smartlings"`
	// Simple Mail Transfer Protocol (SMTP) server for sending emails.
	Smtps []ProjectConnectorsSmtp `pulumi:"smtps"`
	// Amazon Simple Notification Service (SNS) for sending SMS messages through AWS.
	Sns []ProjectConnectorsSn `pulumi:"sns"`
	// Stream logs and audit events with the Sumo Logic connector.
	Sumologics []ProjectConnectorsSumologic `pulumi:"sumologics"`
	// Generate external tokens for user authentication in Supabase projects.
	Supabases []ProjectConnectorsSupabase `pulumi:"supabases"`
	// Verify phone numbers and leverage granular risk scores for adaptive MFA with the Telesign Intelligence connector.
	Telesigns []ProjectConnectorsTelesign `pulumi:"telesigns"`
	// Identify and respond to fraudulent login activity with the Traceable Digital Fraud Prevention connector.
	Traceables []ProjectConnectorsTraceable `pulumi:"traceables"`
	// Prevent bot attacks on your login pages with the Turnstile connector.
	Turnstiles []ProjectConnectorsTurnstile `pulumi:"turnstiles"`
	// Twilio is a cloud-based communication provider of communication tools for making and receiving phone calls, sending and receiving text messages, and performing other communication functions.
	TwilioCores []ProjectConnectorsTwilioCore `pulumi:"twilioCores"`
	// Twilio Verify is an OTP service that can be used via text messages, instant messaging platforms, voice and e-mail. Choose this connector only if you are a Twilio Verify customer.
	TwilioVerifies []ProjectConnectorsTwilioVerify `pulumi:"twilioVerifies"`
}

// ProjectConnectorsInput is an input type that accepts ProjectConnectorsArgs and ProjectConnectorsOutput values.
// You can construct a concrete instance of `ProjectConnectorsInput` via:
//
//	ProjectConnectorsArgs{...}
type ProjectConnectorsInput interface {
	pulumi.Input

	ToProjectConnectorsOutput() ProjectConnectorsOutput
	ToProjectConnectorsOutputWithContext(context.Context) ProjectConnectorsOutput
}

type ProjectConnectorsArgs struct {
	// Utilize IP threat intelligence to block malicious login attempts with the AbuseIPDB connector.
	Abuseipdbs ProjectConnectorsAbuseipdbArrayInput `pulumi:"abuseipdbs"`
	// Track user activity and traits at any point in your user journey with the Amplitude connector.
	Amplitudes ProjectConnectorsAmplitudeArrayInput `pulumi:"amplitudes"`
	// Send audit events to a custom webhook.
	AuditWebhooks ProjectConnectorsAuditWebhookArrayInput `pulumi:"auditWebhooks"`
	// Stream authentication audit logs with the Amazon S3 connector.
	AwsS3s ProjectConnectorsAwsS3ArrayInput `pulumi:"awsS3s"`
	// Localize the language of your login and user journey screens with the Amazon Translate connector.
	AwsTranslates ProjectConnectorsAwsTranslateArrayInput `pulumi:"awsTranslates"`
	// Utilize threat intelligence to block malicious login attempts or check leaks with the Cybersixgill connector.
	Cybersixgills ProjectConnectorsCybersixgillArrayInput `pulumi:"cybersixgills"`
	// Stream authentication audit logs with the Datadog connector.
	Datadogs ProjectConnectorsDatadogArrayInput `pulumi:"datadogs"`
	// DevRev Grow is a Growth CRM that brings salespeople, product marketers, and PMs onto an AI-native platform to follow the journey of a visitor to a lead, to a contact, and then to a user - to create a champion, not a churned user.
	DevrevGrows ProjectConnectorsDevrevGrowArrayInput `pulumi:"devrevGrows"`
	// Get user information from Docebo in your Descope user journeys with the Docebo connector.
	Docebos ProjectConnectorsDoceboArrayInput `pulumi:"docebos"`
	// Send Viber messages to the user.
	EightByEightVibers ProjectConnectorsEightByEightViberArrayInput `pulumi:"eightByEightVibers"`
	// Send WhatsApp messages to the user.
	EightByEightWhatsapps ProjectConnectorsEightByEightWhatsappArrayInput `pulumi:"eightByEightWhatsapps"`
	// Use this connector to obtain an identity trust score.
	Elephants ProjectConnectorsElephantArrayInput `pulumi:"elephants"`
	// A generic HTTP token connector.
	ExternalTokenHttps ProjectConnectorsExternalTokenHttpArrayInput `pulumi:"externalTokenHttps"`
	// Descope Fingerprint capabilities for fraud detection and risk assessment.
	FingerprintDescopes ProjectConnectorsFingerprintDescopeArrayInput `pulumi:"fingerprintDescopes"`
	// Prevent fraud by adding device intelligence with the Fingerprint connector.
	Fingerprints ProjectConnectorsFingerprintArrayInput `pulumi:"fingerprints"`
	// Firebase connector enables you to utilize Firebase's APIs to generate a Firebase user token for a given Descope user.
	FirebaseAdmins ProjectConnectorsFirebaseAdminArrayInput `pulumi:"firebaseAdmins"`
	// Leverage ML-based risk scores for fraud prevention with the Forter connector.
	Forters ProjectConnectorsForterArrayInput `pulumi:"forters"`
	// Send emails using a generic Email gateway.
	GenericEmailGateways ProjectConnectorsGenericEmailGatewayArrayInput `pulumi:"genericEmailGateways"`
	// Send messages using a generic SMS gateway.
	GenericSmsGateways ProjectConnectorsGenericSmsGatewayArrayInput `pulumi:"genericSmsGateways"`
	// Stream logs and audit events with the Google Cloud Logging connector.
	GoogleCloudLoggings ProjectConnectorsGoogleCloudLoggingArrayInput `pulumi:"googleCloudLoggings"`
	// Localize the language of your login and user journey screens with the Google Cloud Translation connector.
	GoogleCloudTranslations ProjectConnectorsGoogleCloudTranslationArrayInput `pulumi:"googleCloudTranslations"`
	// Get address autocompletions from Place Autocomplete Data API.
	GoogleMapsPlaces ProjectConnectorsGoogleMapsPlaceArrayInput `pulumi:"googleMapsPlaces"`
	// Check if passwords have been previously exposed in data breaches with the Have I Been Pwned connector.
	Hibps ProjectConnectorsHibpArrayInput `pulumi:"hibps"`
	// A general purpose HTTP client
	Https ProjectConnectorsHttpArrayInput `pulumi:"https"`
	// Orchestrate customer identity information from your Descope user journey with the HubSpot connector.
	Hubspots ProjectConnectorsHubspotArrayInput `pulumi:"hubspots"`
	// Use the Incode connection to run identity verification processes like document checks or facial recognition.
	Incodes ProjectConnectorsIncodeArrayInput `pulumi:"incodes"`
	// Orchestrate customer identity information from your Descope user journey with the Intercom connector.
	Intercoms ProjectConnectorsIntercomArrayInput `pulumi:"intercoms"`
	// Localize the language of your login and user journey screens with the Lokalise connector.
	Lokalises ProjectConnectorsLokaliseArrayInput `pulumi:"lokalises"`
	// Track and send user event data (e.g. page views, purchases, etc.) across connected tools using the mParticle connector.
	Mparticles ProjectConnectorsMparticleArrayInput `pulumi:"mparticles"`
	// Stream authentication audit logs with the New Relic connector.
	Newrelics ProjectConnectorsNewrelicArrayInput `pulumi:"newrelics"`
	// Get address autocompletions from Radar Autocomplete API.
	Radars ProjectConnectorsRadarArrayInput `pulumi:"radars"`
	// Mitigate fraud using advanced risk analysis and add adaptive MFA with the reCAPTCHA Enterprise connector.
	RecaptchaEnterprises ProjectConnectorsRecaptchaEnterpriseArrayInput `pulumi:"recaptchaEnterprises"`
	// Prevent bot attacks on your login pages with the reCAPTCHA v3 connector.
	Recaptchas ProjectConnectorsRecaptchaArrayInput `pulumi:"recaptchas"`
	// Add image recognition capabilities for identity verification and fraud prevention with the Amazon Rekognition connector.
	Rekognitions ProjectConnectorsRekognitionArrayInput `pulumi:"rekognitions"`
	// Send transactional messages with the Salesforce Marketing Cloud connector.
	SalesforceMarketingClouds ProjectConnectorsSalesforceMarketingCloudArrayInput `pulumi:"salesforceMarketingClouds"`
	// Run SQL queries to retrieve user roles, profiles, account status, and more with the Salesforce connector.
	Salesforces ProjectConnectorsSalesforceArrayInput `pulumi:"salesforces"`
	// Evaluate customer risk using Sardine
	Sardines ProjectConnectorsSardineArrayInput `pulumi:"sardines"`
	// Orchestrate customer identity traits and signals from your Descope user journey with the Segment connector.
	Segments ProjectConnectorsSegmentArrayInput `pulumi:"segments"`
	// SendGrid is a cloud-based SMTP provider that allows you to send emails without having to maintain email servers.
	Sendgrids ProjectConnectorsSendgridArrayInput `pulumi:"sendgrids"`
	// Amazon Simple Email Service (SES) for sending emails through AWS infrastructure.
	Ses ProjectConnectorsSeArrayInput `pulumi:"ses"`
	// Send updates to your team on Slack.
	Slacks ProjectConnectorsSlackArrayInput `pulumi:"slacks"`
	// Localize the language of your login and user journey screens with the Smartling connector.
	Smartlings ProjectConnectorsSmartlingArrayInput `pulumi:"smartlings"`
	// Simple Mail Transfer Protocol (SMTP) server for sending emails.
	Smtps ProjectConnectorsSmtpArrayInput `pulumi:"smtps"`
	// Amazon Simple Notification Service (SNS) for sending SMS messages through AWS.
	Sns ProjectConnectorsSnArrayInput `pulumi:"sns"`
	// Stream logs and audit events with the Sumo Logic connector.
	Sumologics ProjectConnectorsSumologicArrayInput `pulumi:"sumologics"`
	// Generate external tokens for user authentication in Supabase projects.
	Supabases ProjectConnectorsSupabaseArrayInput `pulumi:"supabases"`
	// Verify phone numbers and leverage granular risk scores for adaptive MFA with the Telesign Intelligence connector.
	Telesigns ProjectConnectorsTelesignArrayInput `pulumi:"telesigns"`
	// Identify and respond to fraudulent login activity with the Traceable Digital Fraud Prevention connector.
	Traceables ProjectConnectorsTraceableArrayInput `pulumi:"traceables"`
	// Prevent bot attacks on your login pages with the Turnstile connector.
	Turnstiles ProjectConnectorsTurnstileArrayInput `pulumi:"turnstiles"`
	// Twilio is a cloud-based communication provider of communication tools for making and receiving phone calls, sending and receiving text messages, and performing other communication functions.
	TwilioCores ProjectConnectorsTwilioCoreArrayInput `pulumi:"twilioCores"`
	// Twilio Verify is an OTP service that can be used via text messages, instant messaging platforms, voice and e-mail. Choose this connector only if you are a Twilio Verify customer.
	TwilioVerifies ProjectConnectorsTwilioVerifyArrayInput `pulumi:"twilioVerifies"`
}

func (ProjectConnectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectors)(nil)).Elem()
}

func (i ProjectConnectorsArgs) ToProjectConnectorsOutput() ProjectConnectorsOutput {
	return i.ToProjectConnectorsOutputWithContext(context.Background())
}

func (i ProjectConnectorsArgs) ToProjectConnectorsOutputWithContext(ctx context.Context) ProjectConnectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsOutput)
}

func (i ProjectConnectorsArgs) ToProjectConnectorsPtrOutput() ProjectConnectorsPtrOutput {
	return i.ToProjectConnectorsPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsArgs) ToProjectConnectorsPtrOutputWithContext(ctx context.Context) ProjectConnectorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsOutput).ToProjectConnectorsPtrOutputWithContext(ctx)
}

// ProjectConnectorsPtrInput is an input type that accepts ProjectConnectorsArgs, ProjectConnectorsPtr and ProjectConnectorsPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsPtrInput` via:
//
//	        ProjectConnectorsArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsPtrInput interface {
	pulumi.Input

	ToProjectConnectorsPtrOutput() ProjectConnectorsPtrOutput
	ToProjectConnectorsPtrOutputWithContext(context.Context) ProjectConnectorsPtrOutput
}

type projectConnectorsPtrType ProjectConnectorsArgs

func ProjectConnectorsPtr(v *ProjectConnectorsArgs) ProjectConnectorsPtrInput {
	return (*projectConnectorsPtrType)(v)
}

func (*projectConnectorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectors)(nil)).Elem()
}

func (i *projectConnectorsPtrType) ToProjectConnectorsPtrOutput() ProjectConnectorsPtrOutput {
	return i.ToProjectConnectorsPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsPtrType) ToProjectConnectorsPtrOutputWithContext(ctx context.Context) ProjectConnectorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsPtrOutput)
}

type ProjectConnectorsOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectors)(nil)).Elem()
}

func (o ProjectConnectorsOutput) ToProjectConnectorsOutput() ProjectConnectorsOutput {
	return o
}

func (o ProjectConnectorsOutput) ToProjectConnectorsOutputWithContext(ctx context.Context) ProjectConnectorsOutput {
	return o
}

func (o ProjectConnectorsOutput) ToProjectConnectorsPtrOutput() ProjectConnectorsPtrOutput {
	return o.ToProjectConnectorsPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsOutput) ToProjectConnectorsPtrOutputWithContext(ctx context.Context) ProjectConnectorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectors) *ProjectConnectors {
		return &v
	}).(ProjectConnectorsPtrOutput)
}

// Utilize IP threat intelligence to block malicious login attempts with the AbuseIPDB connector.
func (o ProjectConnectorsOutput) Abuseipdbs() ProjectConnectorsAbuseipdbArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsAbuseipdb { return v.Abuseipdbs }).(ProjectConnectorsAbuseipdbArrayOutput)
}

// Track user activity and traits at any point in your user journey with the Amplitude connector.
func (o ProjectConnectorsOutput) Amplitudes() ProjectConnectorsAmplitudeArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsAmplitude { return v.Amplitudes }).(ProjectConnectorsAmplitudeArrayOutput)
}

// Send audit events to a custom webhook.
func (o ProjectConnectorsOutput) AuditWebhooks() ProjectConnectorsAuditWebhookArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsAuditWebhook { return v.AuditWebhooks }).(ProjectConnectorsAuditWebhookArrayOutput)
}

// Stream authentication audit logs with the Amazon S3 connector.
func (o ProjectConnectorsOutput) AwsS3s() ProjectConnectorsAwsS3ArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsAwsS3 { return v.AwsS3s }).(ProjectConnectorsAwsS3ArrayOutput)
}

// Localize the language of your login and user journey screens with the Amazon Translate connector.
func (o ProjectConnectorsOutput) AwsTranslates() ProjectConnectorsAwsTranslateArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsAwsTranslate { return v.AwsTranslates }).(ProjectConnectorsAwsTranslateArrayOutput)
}

// Utilize threat intelligence to block malicious login attempts or check leaks with the Cybersixgill connector.
func (o ProjectConnectorsOutput) Cybersixgills() ProjectConnectorsCybersixgillArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsCybersixgill { return v.Cybersixgills }).(ProjectConnectorsCybersixgillArrayOutput)
}

// Stream authentication audit logs with the Datadog connector.
func (o ProjectConnectorsOutput) Datadogs() ProjectConnectorsDatadogArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsDatadog { return v.Datadogs }).(ProjectConnectorsDatadogArrayOutput)
}

// DevRev Grow is a Growth CRM that brings salespeople, product marketers, and PMs onto an AI-native platform to follow the journey of a visitor to a lead, to a contact, and then to a user - to create a champion, not a churned user.
func (o ProjectConnectorsOutput) DevrevGrows() ProjectConnectorsDevrevGrowArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsDevrevGrow { return v.DevrevGrows }).(ProjectConnectorsDevrevGrowArrayOutput)
}

// Get user information from Docebo in your Descope user journeys with the Docebo connector.
func (o ProjectConnectorsOutput) Docebos() ProjectConnectorsDoceboArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsDocebo { return v.Docebos }).(ProjectConnectorsDoceboArrayOutput)
}

// Send Viber messages to the user.
func (o ProjectConnectorsOutput) EightByEightVibers() ProjectConnectorsEightByEightViberArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsEightByEightViber { return v.EightByEightVibers }).(ProjectConnectorsEightByEightViberArrayOutput)
}

// Send WhatsApp messages to the user.
func (o ProjectConnectorsOutput) EightByEightWhatsapps() ProjectConnectorsEightByEightWhatsappArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsEightByEightWhatsapp { return v.EightByEightWhatsapps }).(ProjectConnectorsEightByEightWhatsappArrayOutput)
}

// Use this connector to obtain an identity trust score.
func (o ProjectConnectorsOutput) Elephants() ProjectConnectorsElephantArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsElephant { return v.Elephants }).(ProjectConnectorsElephantArrayOutput)
}

// A generic HTTP token connector.
func (o ProjectConnectorsOutput) ExternalTokenHttps() ProjectConnectorsExternalTokenHttpArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsExternalTokenHttp { return v.ExternalTokenHttps }).(ProjectConnectorsExternalTokenHttpArrayOutput)
}

// Descope Fingerprint capabilities for fraud detection and risk assessment.
func (o ProjectConnectorsOutput) FingerprintDescopes() ProjectConnectorsFingerprintDescopeArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsFingerprintDescope { return v.FingerprintDescopes }).(ProjectConnectorsFingerprintDescopeArrayOutput)
}

// Prevent fraud by adding device intelligence with the Fingerprint connector.
func (o ProjectConnectorsOutput) Fingerprints() ProjectConnectorsFingerprintArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsFingerprint { return v.Fingerprints }).(ProjectConnectorsFingerprintArrayOutput)
}

// Firebase connector enables you to utilize Firebase's APIs to generate a Firebase user token for a given Descope user.
func (o ProjectConnectorsOutput) FirebaseAdmins() ProjectConnectorsFirebaseAdminArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsFirebaseAdmin { return v.FirebaseAdmins }).(ProjectConnectorsFirebaseAdminArrayOutput)
}

// Leverage ML-based risk scores for fraud prevention with the Forter connector.
func (o ProjectConnectorsOutput) Forters() ProjectConnectorsForterArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsForter { return v.Forters }).(ProjectConnectorsForterArrayOutput)
}

// Send emails using a generic Email gateway.
func (o ProjectConnectorsOutput) GenericEmailGateways() ProjectConnectorsGenericEmailGatewayArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsGenericEmailGateway { return v.GenericEmailGateways }).(ProjectConnectorsGenericEmailGatewayArrayOutput)
}

// Send messages using a generic SMS gateway.
func (o ProjectConnectorsOutput) GenericSmsGateways() ProjectConnectorsGenericSmsGatewayArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsGenericSmsGateway { return v.GenericSmsGateways }).(ProjectConnectorsGenericSmsGatewayArrayOutput)
}

// Stream logs and audit events with the Google Cloud Logging connector.
func (o ProjectConnectorsOutput) GoogleCloudLoggings() ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsGoogleCloudLogging { return v.GoogleCloudLoggings }).(ProjectConnectorsGoogleCloudLoggingArrayOutput)
}

// Localize the language of your login and user journey screens with the Google Cloud Translation connector.
func (o ProjectConnectorsOutput) GoogleCloudTranslations() ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsGoogleCloudTranslation { return v.GoogleCloudTranslations }).(ProjectConnectorsGoogleCloudTranslationArrayOutput)
}

// Get address autocompletions from Place Autocomplete Data API.
func (o ProjectConnectorsOutput) GoogleMapsPlaces() ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsGoogleMapsPlace { return v.GoogleMapsPlaces }).(ProjectConnectorsGoogleMapsPlaceArrayOutput)
}

// Check if passwords have been previously exposed in data breaches with the Have I Been Pwned connector.
func (o ProjectConnectorsOutput) Hibps() ProjectConnectorsHibpArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsHibp { return v.Hibps }).(ProjectConnectorsHibpArrayOutput)
}

// A general purpose HTTP client
func (o ProjectConnectorsOutput) Https() ProjectConnectorsHttpArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsHttp { return v.Https }).(ProjectConnectorsHttpArrayOutput)
}

// Orchestrate customer identity information from your Descope user journey with the HubSpot connector.
func (o ProjectConnectorsOutput) Hubspots() ProjectConnectorsHubspotArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsHubspot { return v.Hubspots }).(ProjectConnectorsHubspotArrayOutput)
}

// Use the Incode connection to run identity verification processes like document checks or facial recognition.
func (o ProjectConnectorsOutput) Incodes() ProjectConnectorsIncodeArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsIncode { return v.Incodes }).(ProjectConnectorsIncodeArrayOutput)
}

// Orchestrate customer identity information from your Descope user journey with the Intercom connector.
func (o ProjectConnectorsOutput) Intercoms() ProjectConnectorsIntercomArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsIntercom { return v.Intercoms }).(ProjectConnectorsIntercomArrayOutput)
}

// Localize the language of your login and user journey screens with the Lokalise connector.
func (o ProjectConnectorsOutput) Lokalises() ProjectConnectorsLokaliseArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsLokalise { return v.Lokalises }).(ProjectConnectorsLokaliseArrayOutput)
}

// Track and send user event data (e.g. page views, purchases, etc.) across connected tools using the mParticle connector.
func (o ProjectConnectorsOutput) Mparticles() ProjectConnectorsMparticleArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsMparticle { return v.Mparticles }).(ProjectConnectorsMparticleArrayOutput)
}

// Stream authentication audit logs with the New Relic connector.
func (o ProjectConnectorsOutput) Newrelics() ProjectConnectorsNewrelicArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsNewrelic { return v.Newrelics }).(ProjectConnectorsNewrelicArrayOutput)
}

// Get address autocompletions from Radar Autocomplete API.
func (o ProjectConnectorsOutput) Radars() ProjectConnectorsRadarArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsRadar { return v.Radars }).(ProjectConnectorsRadarArrayOutput)
}

// Mitigate fraud using advanced risk analysis and add adaptive MFA with the reCAPTCHA Enterprise connector.
func (o ProjectConnectorsOutput) RecaptchaEnterprises() ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsRecaptchaEnterprise { return v.RecaptchaEnterprises }).(ProjectConnectorsRecaptchaEnterpriseArrayOutput)
}

// Prevent bot attacks on your login pages with the reCAPTCHA v3 connector.
func (o ProjectConnectorsOutput) Recaptchas() ProjectConnectorsRecaptchaArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsRecaptcha { return v.Recaptchas }).(ProjectConnectorsRecaptchaArrayOutput)
}

// Add image recognition capabilities for identity verification and fraud prevention with the Amazon Rekognition connector.
func (o ProjectConnectorsOutput) Rekognitions() ProjectConnectorsRekognitionArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsRekognition { return v.Rekognitions }).(ProjectConnectorsRekognitionArrayOutput)
}

// Send transactional messages with the Salesforce Marketing Cloud connector.
func (o ProjectConnectorsOutput) SalesforceMarketingClouds() ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSalesforceMarketingCloud {
		return v.SalesforceMarketingClouds
	}).(ProjectConnectorsSalesforceMarketingCloudArrayOutput)
}

// Run SQL queries to retrieve user roles, profiles, account status, and more with the Salesforce connector.
func (o ProjectConnectorsOutput) Salesforces() ProjectConnectorsSalesforceArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSalesforce { return v.Salesforces }).(ProjectConnectorsSalesforceArrayOutput)
}

// Evaluate customer risk using Sardine
func (o ProjectConnectorsOutput) Sardines() ProjectConnectorsSardineArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSardine { return v.Sardines }).(ProjectConnectorsSardineArrayOutput)
}

// Orchestrate customer identity traits and signals from your Descope user journey with the Segment connector.
func (o ProjectConnectorsOutput) Segments() ProjectConnectorsSegmentArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSegment { return v.Segments }).(ProjectConnectorsSegmentArrayOutput)
}

// SendGrid is a cloud-based SMTP provider that allows you to send emails without having to maintain email servers.
func (o ProjectConnectorsOutput) Sendgrids() ProjectConnectorsSendgridArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSendgrid { return v.Sendgrids }).(ProjectConnectorsSendgridArrayOutput)
}

// Amazon Simple Email Service (SES) for sending emails through AWS infrastructure.
func (o ProjectConnectorsOutput) Ses() ProjectConnectorsSeArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSe { return v.Ses }).(ProjectConnectorsSeArrayOutput)
}

// Send updates to your team on Slack.
func (o ProjectConnectorsOutput) Slacks() ProjectConnectorsSlackArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSlack { return v.Slacks }).(ProjectConnectorsSlackArrayOutput)
}

// Localize the language of your login and user journey screens with the Smartling connector.
func (o ProjectConnectorsOutput) Smartlings() ProjectConnectorsSmartlingArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSmartling { return v.Smartlings }).(ProjectConnectorsSmartlingArrayOutput)
}

// Simple Mail Transfer Protocol (SMTP) server for sending emails.
func (o ProjectConnectorsOutput) Smtps() ProjectConnectorsSmtpArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSmtp { return v.Smtps }).(ProjectConnectorsSmtpArrayOutput)
}

// Amazon Simple Notification Service (SNS) for sending SMS messages through AWS.
func (o ProjectConnectorsOutput) Sns() ProjectConnectorsSnArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSn { return v.Sns }).(ProjectConnectorsSnArrayOutput)
}

// Stream logs and audit events with the Sumo Logic connector.
func (o ProjectConnectorsOutput) Sumologics() ProjectConnectorsSumologicArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSumologic { return v.Sumologics }).(ProjectConnectorsSumologicArrayOutput)
}

// Generate external tokens for user authentication in Supabase projects.
func (o ProjectConnectorsOutput) Supabases() ProjectConnectorsSupabaseArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsSupabase { return v.Supabases }).(ProjectConnectorsSupabaseArrayOutput)
}

// Verify phone numbers and leverage granular risk scores for adaptive MFA with the Telesign Intelligence connector.
func (o ProjectConnectorsOutput) Telesigns() ProjectConnectorsTelesignArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsTelesign { return v.Telesigns }).(ProjectConnectorsTelesignArrayOutput)
}

// Identify and respond to fraudulent login activity with the Traceable Digital Fraud Prevention connector.
func (o ProjectConnectorsOutput) Traceables() ProjectConnectorsTraceableArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsTraceable { return v.Traceables }).(ProjectConnectorsTraceableArrayOutput)
}

// Prevent bot attacks on your login pages with the Turnstile connector.
func (o ProjectConnectorsOutput) Turnstiles() ProjectConnectorsTurnstileArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsTurnstile { return v.Turnstiles }).(ProjectConnectorsTurnstileArrayOutput)
}

// Twilio is a cloud-based communication provider of communication tools for making and receiving phone calls, sending and receiving text messages, and performing other communication functions.
func (o ProjectConnectorsOutput) TwilioCores() ProjectConnectorsTwilioCoreArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsTwilioCore { return v.TwilioCores }).(ProjectConnectorsTwilioCoreArrayOutput)
}

// Twilio Verify is an OTP service that can be used via text messages, instant messaging platforms, voice and e-mail. Choose this connector only if you are a Twilio Verify customer.
func (o ProjectConnectorsOutput) TwilioVerifies() ProjectConnectorsTwilioVerifyArrayOutput {
	return o.ApplyT(func(v ProjectConnectors) []ProjectConnectorsTwilioVerify { return v.TwilioVerifies }).(ProjectConnectorsTwilioVerifyArrayOutput)
}

type ProjectConnectorsPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectors)(nil)).Elem()
}

func (o ProjectConnectorsPtrOutput) ToProjectConnectorsPtrOutput() ProjectConnectorsPtrOutput {
	return o
}

func (o ProjectConnectorsPtrOutput) ToProjectConnectorsPtrOutputWithContext(ctx context.Context) ProjectConnectorsPtrOutput {
	return o
}

func (o ProjectConnectorsPtrOutput) Elem() ProjectConnectorsOutput {
	return o.ApplyT(func(v *ProjectConnectors) ProjectConnectors {
		if v != nil {
			return *v
		}
		var ret ProjectConnectors
		return ret
	}).(ProjectConnectorsOutput)
}

// Utilize IP threat intelligence to block malicious login attempts with the AbuseIPDB connector.
func (o ProjectConnectorsPtrOutput) Abuseipdbs() ProjectConnectorsAbuseipdbArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsAbuseipdb {
		if v == nil {
			return nil
		}
		return v.Abuseipdbs
	}).(ProjectConnectorsAbuseipdbArrayOutput)
}

// Track user activity and traits at any point in your user journey with the Amplitude connector.
func (o ProjectConnectorsPtrOutput) Amplitudes() ProjectConnectorsAmplitudeArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsAmplitude {
		if v == nil {
			return nil
		}
		return v.Amplitudes
	}).(ProjectConnectorsAmplitudeArrayOutput)
}

// Send audit events to a custom webhook.
func (o ProjectConnectorsPtrOutput) AuditWebhooks() ProjectConnectorsAuditWebhookArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsAuditWebhook {
		if v == nil {
			return nil
		}
		return v.AuditWebhooks
	}).(ProjectConnectorsAuditWebhookArrayOutput)
}

// Stream authentication audit logs with the Amazon S3 connector.
func (o ProjectConnectorsPtrOutput) AwsS3s() ProjectConnectorsAwsS3ArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsAwsS3 {
		if v == nil {
			return nil
		}
		return v.AwsS3s
	}).(ProjectConnectorsAwsS3ArrayOutput)
}

// Localize the language of your login and user journey screens with the Amazon Translate connector.
func (o ProjectConnectorsPtrOutput) AwsTranslates() ProjectConnectorsAwsTranslateArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsAwsTranslate {
		if v == nil {
			return nil
		}
		return v.AwsTranslates
	}).(ProjectConnectorsAwsTranslateArrayOutput)
}

// Utilize threat intelligence to block malicious login attempts or check leaks with the Cybersixgill connector.
func (o ProjectConnectorsPtrOutput) Cybersixgills() ProjectConnectorsCybersixgillArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsCybersixgill {
		if v == nil {
			return nil
		}
		return v.Cybersixgills
	}).(ProjectConnectorsCybersixgillArrayOutput)
}

// Stream authentication audit logs with the Datadog connector.
func (o ProjectConnectorsPtrOutput) Datadogs() ProjectConnectorsDatadogArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsDatadog {
		if v == nil {
			return nil
		}
		return v.Datadogs
	}).(ProjectConnectorsDatadogArrayOutput)
}

// DevRev Grow is a Growth CRM that brings salespeople, product marketers, and PMs onto an AI-native platform to follow the journey of a visitor to a lead, to a contact, and then to a user - to create a champion, not a churned user.
func (o ProjectConnectorsPtrOutput) DevrevGrows() ProjectConnectorsDevrevGrowArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsDevrevGrow {
		if v == nil {
			return nil
		}
		return v.DevrevGrows
	}).(ProjectConnectorsDevrevGrowArrayOutput)
}

// Get user information from Docebo in your Descope user journeys with the Docebo connector.
func (o ProjectConnectorsPtrOutput) Docebos() ProjectConnectorsDoceboArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsDocebo {
		if v == nil {
			return nil
		}
		return v.Docebos
	}).(ProjectConnectorsDoceboArrayOutput)
}

// Send Viber messages to the user.
func (o ProjectConnectorsPtrOutput) EightByEightVibers() ProjectConnectorsEightByEightViberArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsEightByEightViber {
		if v == nil {
			return nil
		}
		return v.EightByEightVibers
	}).(ProjectConnectorsEightByEightViberArrayOutput)
}

// Send WhatsApp messages to the user.
func (o ProjectConnectorsPtrOutput) EightByEightWhatsapps() ProjectConnectorsEightByEightWhatsappArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsEightByEightWhatsapp {
		if v == nil {
			return nil
		}
		return v.EightByEightWhatsapps
	}).(ProjectConnectorsEightByEightWhatsappArrayOutput)
}

// Use this connector to obtain an identity trust score.
func (o ProjectConnectorsPtrOutput) Elephants() ProjectConnectorsElephantArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsElephant {
		if v == nil {
			return nil
		}
		return v.Elephants
	}).(ProjectConnectorsElephantArrayOutput)
}

// A generic HTTP token connector.
func (o ProjectConnectorsPtrOutput) ExternalTokenHttps() ProjectConnectorsExternalTokenHttpArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsExternalTokenHttp {
		if v == nil {
			return nil
		}
		return v.ExternalTokenHttps
	}).(ProjectConnectorsExternalTokenHttpArrayOutput)
}

// Descope Fingerprint capabilities for fraud detection and risk assessment.
func (o ProjectConnectorsPtrOutput) FingerprintDescopes() ProjectConnectorsFingerprintDescopeArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsFingerprintDescope {
		if v == nil {
			return nil
		}
		return v.FingerprintDescopes
	}).(ProjectConnectorsFingerprintDescopeArrayOutput)
}

// Prevent fraud by adding device intelligence with the Fingerprint connector.
func (o ProjectConnectorsPtrOutput) Fingerprints() ProjectConnectorsFingerprintArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsFingerprint {
		if v == nil {
			return nil
		}
		return v.Fingerprints
	}).(ProjectConnectorsFingerprintArrayOutput)
}

// Firebase connector enables you to utilize Firebase's APIs to generate a Firebase user token for a given Descope user.
func (o ProjectConnectorsPtrOutput) FirebaseAdmins() ProjectConnectorsFirebaseAdminArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsFirebaseAdmin {
		if v == nil {
			return nil
		}
		return v.FirebaseAdmins
	}).(ProjectConnectorsFirebaseAdminArrayOutput)
}

// Leverage ML-based risk scores for fraud prevention with the Forter connector.
func (o ProjectConnectorsPtrOutput) Forters() ProjectConnectorsForterArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsForter {
		if v == nil {
			return nil
		}
		return v.Forters
	}).(ProjectConnectorsForterArrayOutput)
}

// Send emails using a generic Email gateway.
func (o ProjectConnectorsPtrOutput) GenericEmailGateways() ProjectConnectorsGenericEmailGatewayArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsGenericEmailGateway {
		if v == nil {
			return nil
		}
		return v.GenericEmailGateways
	}).(ProjectConnectorsGenericEmailGatewayArrayOutput)
}

// Send messages using a generic SMS gateway.
func (o ProjectConnectorsPtrOutput) GenericSmsGateways() ProjectConnectorsGenericSmsGatewayArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsGenericSmsGateway {
		if v == nil {
			return nil
		}
		return v.GenericSmsGateways
	}).(ProjectConnectorsGenericSmsGatewayArrayOutput)
}

// Stream logs and audit events with the Google Cloud Logging connector.
func (o ProjectConnectorsPtrOutput) GoogleCloudLoggings() ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsGoogleCloudLogging {
		if v == nil {
			return nil
		}
		return v.GoogleCloudLoggings
	}).(ProjectConnectorsGoogleCloudLoggingArrayOutput)
}

// Localize the language of your login and user journey screens with the Google Cloud Translation connector.
func (o ProjectConnectorsPtrOutput) GoogleCloudTranslations() ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsGoogleCloudTranslation {
		if v == nil {
			return nil
		}
		return v.GoogleCloudTranslations
	}).(ProjectConnectorsGoogleCloudTranslationArrayOutput)
}

// Get address autocompletions from Place Autocomplete Data API.
func (o ProjectConnectorsPtrOutput) GoogleMapsPlaces() ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsGoogleMapsPlace {
		if v == nil {
			return nil
		}
		return v.GoogleMapsPlaces
	}).(ProjectConnectorsGoogleMapsPlaceArrayOutput)
}

// Check if passwords have been previously exposed in data breaches with the Have I Been Pwned connector.
func (o ProjectConnectorsPtrOutput) Hibps() ProjectConnectorsHibpArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsHibp {
		if v == nil {
			return nil
		}
		return v.Hibps
	}).(ProjectConnectorsHibpArrayOutput)
}

// A general purpose HTTP client
func (o ProjectConnectorsPtrOutput) Https() ProjectConnectorsHttpArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsHttp {
		if v == nil {
			return nil
		}
		return v.Https
	}).(ProjectConnectorsHttpArrayOutput)
}

// Orchestrate customer identity information from your Descope user journey with the HubSpot connector.
func (o ProjectConnectorsPtrOutput) Hubspots() ProjectConnectorsHubspotArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsHubspot {
		if v == nil {
			return nil
		}
		return v.Hubspots
	}).(ProjectConnectorsHubspotArrayOutput)
}

// Use the Incode connection to run identity verification processes like document checks or facial recognition.
func (o ProjectConnectorsPtrOutput) Incodes() ProjectConnectorsIncodeArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsIncode {
		if v == nil {
			return nil
		}
		return v.Incodes
	}).(ProjectConnectorsIncodeArrayOutput)
}

// Orchestrate customer identity information from your Descope user journey with the Intercom connector.
func (o ProjectConnectorsPtrOutput) Intercoms() ProjectConnectorsIntercomArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsIntercom {
		if v == nil {
			return nil
		}
		return v.Intercoms
	}).(ProjectConnectorsIntercomArrayOutput)
}

// Localize the language of your login and user journey screens with the Lokalise connector.
func (o ProjectConnectorsPtrOutput) Lokalises() ProjectConnectorsLokaliseArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsLokalise {
		if v == nil {
			return nil
		}
		return v.Lokalises
	}).(ProjectConnectorsLokaliseArrayOutput)
}

// Track and send user event data (e.g. page views, purchases, etc.) across connected tools using the mParticle connector.
func (o ProjectConnectorsPtrOutput) Mparticles() ProjectConnectorsMparticleArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsMparticle {
		if v == nil {
			return nil
		}
		return v.Mparticles
	}).(ProjectConnectorsMparticleArrayOutput)
}

// Stream authentication audit logs with the New Relic connector.
func (o ProjectConnectorsPtrOutput) Newrelics() ProjectConnectorsNewrelicArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsNewrelic {
		if v == nil {
			return nil
		}
		return v.Newrelics
	}).(ProjectConnectorsNewrelicArrayOutput)
}

// Get address autocompletions from Radar Autocomplete API.
func (o ProjectConnectorsPtrOutput) Radars() ProjectConnectorsRadarArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsRadar {
		if v == nil {
			return nil
		}
		return v.Radars
	}).(ProjectConnectorsRadarArrayOutput)
}

// Mitigate fraud using advanced risk analysis and add adaptive MFA with the reCAPTCHA Enterprise connector.
func (o ProjectConnectorsPtrOutput) RecaptchaEnterprises() ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsRecaptchaEnterprise {
		if v == nil {
			return nil
		}
		return v.RecaptchaEnterprises
	}).(ProjectConnectorsRecaptchaEnterpriseArrayOutput)
}

// Prevent bot attacks on your login pages with the reCAPTCHA v3 connector.
func (o ProjectConnectorsPtrOutput) Recaptchas() ProjectConnectorsRecaptchaArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsRecaptcha {
		if v == nil {
			return nil
		}
		return v.Recaptchas
	}).(ProjectConnectorsRecaptchaArrayOutput)
}

// Add image recognition capabilities for identity verification and fraud prevention with the Amazon Rekognition connector.
func (o ProjectConnectorsPtrOutput) Rekognitions() ProjectConnectorsRekognitionArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsRekognition {
		if v == nil {
			return nil
		}
		return v.Rekognitions
	}).(ProjectConnectorsRekognitionArrayOutput)
}

// Send transactional messages with the Salesforce Marketing Cloud connector.
func (o ProjectConnectorsPtrOutput) SalesforceMarketingClouds() ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSalesforceMarketingCloud {
		if v == nil {
			return nil
		}
		return v.SalesforceMarketingClouds
	}).(ProjectConnectorsSalesforceMarketingCloudArrayOutput)
}

// Run SQL queries to retrieve user roles, profiles, account status, and more with the Salesforce connector.
func (o ProjectConnectorsPtrOutput) Salesforces() ProjectConnectorsSalesforceArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSalesforce {
		if v == nil {
			return nil
		}
		return v.Salesforces
	}).(ProjectConnectorsSalesforceArrayOutput)
}

// Evaluate customer risk using Sardine
func (o ProjectConnectorsPtrOutput) Sardines() ProjectConnectorsSardineArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSardine {
		if v == nil {
			return nil
		}
		return v.Sardines
	}).(ProjectConnectorsSardineArrayOutput)
}

// Orchestrate customer identity traits and signals from your Descope user journey with the Segment connector.
func (o ProjectConnectorsPtrOutput) Segments() ProjectConnectorsSegmentArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSegment {
		if v == nil {
			return nil
		}
		return v.Segments
	}).(ProjectConnectorsSegmentArrayOutput)
}

// SendGrid is a cloud-based SMTP provider that allows you to send emails without having to maintain email servers.
func (o ProjectConnectorsPtrOutput) Sendgrids() ProjectConnectorsSendgridArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSendgrid {
		if v == nil {
			return nil
		}
		return v.Sendgrids
	}).(ProjectConnectorsSendgridArrayOutput)
}

// Amazon Simple Email Service (SES) for sending emails through AWS infrastructure.
func (o ProjectConnectorsPtrOutput) Ses() ProjectConnectorsSeArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSe {
		if v == nil {
			return nil
		}
		return v.Ses
	}).(ProjectConnectorsSeArrayOutput)
}

// Send updates to your team on Slack.
func (o ProjectConnectorsPtrOutput) Slacks() ProjectConnectorsSlackArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSlack {
		if v == nil {
			return nil
		}
		return v.Slacks
	}).(ProjectConnectorsSlackArrayOutput)
}

// Localize the language of your login and user journey screens with the Smartling connector.
func (o ProjectConnectorsPtrOutput) Smartlings() ProjectConnectorsSmartlingArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSmartling {
		if v == nil {
			return nil
		}
		return v.Smartlings
	}).(ProjectConnectorsSmartlingArrayOutput)
}

// Simple Mail Transfer Protocol (SMTP) server for sending emails.
func (o ProjectConnectorsPtrOutput) Smtps() ProjectConnectorsSmtpArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSmtp {
		if v == nil {
			return nil
		}
		return v.Smtps
	}).(ProjectConnectorsSmtpArrayOutput)
}

// Amazon Simple Notification Service (SNS) for sending SMS messages through AWS.
func (o ProjectConnectorsPtrOutput) Sns() ProjectConnectorsSnArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSn {
		if v == nil {
			return nil
		}
		return v.Sns
	}).(ProjectConnectorsSnArrayOutput)
}

// Stream logs and audit events with the Sumo Logic connector.
func (o ProjectConnectorsPtrOutput) Sumologics() ProjectConnectorsSumologicArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSumologic {
		if v == nil {
			return nil
		}
		return v.Sumologics
	}).(ProjectConnectorsSumologicArrayOutput)
}

// Generate external tokens for user authentication in Supabase projects.
func (o ProjectConnectorsPtrOutput) Supabases() ProjectConnectorsSupabaseArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsSupabase {
		if v == nil {
			return nil
		}
		return v.Supabases
	}).(ProjectConnectorsSupabaseArrayOutput)
}

// Verify phone numbers and leverage granular risk scores for adaptive MFA with the Telesign Intelligence connector.
func (o ProjectConnectorsPtrOutput) Telesigns() ProjectConnectorsTelesignArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsTelesign {
		if v == nil {
			return nil
		}
		return v.Telesigns
	}).(ProjectConnectorsTelesignArrayOutput)
}

// Identify and respond to fraudulent login activity with the Traceable Digital Fraud Prevention connector.
func (o ProjectConnectorsPtrOutput) Traceables() ProjectConnectorsTraceableArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsTraceable {
		if v == nil {
			return nil
		}
		return v.Traceables
	}).(ProjectConnectorsTraceableArrayOutput)
}

// Prevent bot attacks on your login pages with the Turnstile connector.
func (o ProjectConnectorsPtrOutput) Turnstiles() ProjectConnectorsTurnstileArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsTurnstile {
		if v == nil {
			return nil
		}
		return v.Turnstiles
	}).(ProjectConnectorsTurnstileArrayOutput)
}

// Twilio is a cloud-based communication provider of communication tools for making and receiving phone calls, sending and receiving text messages, and performing other communication functions.
func (o ProjectConnectorsPtrOutput) TwilioCores() ProjectConnectorsTwilioCoreArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsTwilioCore {
		if v == nil {
			return nil
		}
		return v.TwilioCores
	}).(ProjectConnectorsTwilioCoreArrayOutput)
}

// Twilio Verify is an OTP service that can be used via text messages, instant messaging platforms, voice and e-mail. Choose this connector only if you are a Twilio Verify customer.
func (o ProjectConnectorsPtrOutput) TwilioVerifies() ProjectConnectorsTwilioVerifyArrayOutput {
	return o.ApplyT(func(v *ProjectConnectors) []ProjectConnectorsTwilioVerify {
		if v == nil {
			return nil
		}
		return v.TwilioVerifies
	}).(ProjectConnectorsTwilioVerifyArrayOutput)
}

type ProjectConnectorsAbuseipdb struct {
	// The unique AbuseIPDB API key.
	ApiKey string `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsAbuseipdbInput is an input type that accepts ProjectConnectorsAbuseipdbArgs and ProjectConnectorsAbuseipdbOutput values.
// You can construct a concrete instance of `ProjectConnectorsAbuseipdbInput` via:
//
//	ProjectConnectorsAbuseipdbArgs{...}
type ProjectConnectorsAbuseipdbInput interface {
	pulumi.Input

	ToProjectConnectorsAbuseipdbOutput() ProjectConnectorsAbuseipdbOutput
	ToProjectConnectorsAbuseipdbOutputWithContext(context.Context) ProjectConnectorsAbuseipdbOutput
}

type ProjectConnectorsAbuseipdbArgs struct {
	// The unique AbuseIPDB API key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsAbuseipdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAbuseipdb)(nil)).Elem()
}

func (i ProjectConnectorsAbuseipdbArgs) ToProjectConnectorsAbuseipdbOutput() ProjectConnectorsAbuseipdbOutput {
	return i.ToProjectConnectorsAbuseipdbOutputWithContext(context.Background())
}

func (i ProjectConnectorsAbuseipdbArgs) ToProjectConnectorsAbuseipdbOutputWithContext(ctx context.Context) ProjectConnectorsAbuseipdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAbuseipdbOutput)
}

// ProjectConnectorsAbuseipdbArrayInput is an input type that accepts ProjectConnectorsAbuseipdbArray and ProjectConnectorsAbuseipdbArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAbuseipdbArrayInput` via:
//
//	ProjectConnectorsAbuseipdbArray{ ProjectConnectorsAbuseipdbArgs{...} }
type ProjectConnectorsAbuseipdbArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAbuseipdbArrayOutput() ProjectConnectorsAbuseipdbArrayOutput
	ToProjectConnectorsAbuseipdbArrayOutputWithContext(context.Context) ProjectConnectorsAbuseipdbArrayOutput
}

type ProjectConnectorsAbuseipdbArray []ProjectConnectorsAbuseipdbInput

func (ProjectConnectorsAbuseipdbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAbuseipdb)(nil)).Elem()
}

func (i ProjectConnectorsAbuseipdbArray) ToProjectConnectorsAbuseipdbArrayOutput() ProjectConnectorsAbuseipdbArrayOutput {
	return i.ToProjectConnectorsAbuseipdbArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAbuseipdbArray) ToProjectConnectorsAbuseipdbArrayOutputWithContext(ctx context.Context) ProjectConnectorsAbuseipdbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAbuseipdbArrayOutput)
}

type ProjectConnectorsAbuseipdbOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAbuseipdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAbuseipdb)(nil)).Elem()
}

func (o ProjectConnectorsAbuseipdbOutput) ToProjectConnectorsAbuseipdbOutput() ProjectConnectorsAbuseipdbOutput {
	return o
}

func (o ProjectConnectorsAbuseipdbOutput) ToProjectConnectorsAbuseipdbOutputWithContext(ctx context.Context) ProjectConnectorsAbuseipdbOutput {
	return o
}

// The unique AbuseIPDB API key.
func (o ProjectConnectorsAbuseipdbOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAbuseipdb) string { return v.ApiKey }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsAbuseipdbOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAbuseipdb) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsAbuseipdbOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAbuseipdb) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsAbuseipdbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAbuseipdb) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsAbuseipdbArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAbuseipdbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAbuseipdb)(nil)).Elem()
}

func (o ProjectConnectorsAbuseipdbArrayOutput) ToProjectConnectorsAbuseipdbArrayOutput() ProjectConnectorsAbuseipdbArrayOutput {
	return o
}

func (o ProjectConnectorsAbuseipdbArrayOutput) ToProjectConnectorsAbuseipdbArrayOutputWithContext(ctx context.Context) ProjectConnectorsAbuseipdbArrayOutput {
	return o
}

func (o ProjectConnectorsAbuseipdbArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAbuseipdbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAbuseipdb {
		return vs[0].([]ProjectConnectorsAbuseipdb)[vs[1].(int)]
	}).(ProjectConnectorsAbuseipdbOutput)
}

type ProjectConnectorsAmplitude struct {
	// The Amplitude API Key generated for the Descope service.
	ApiKey string `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The server URL of the Amplitude API, when using different api or a custom domain in Amplitude.
	ServerUrl *string `pulumi:"serverUrl"`
	// `EU` or `US`. Sets the Amplitude server zone. Set this to `EU` for Amplitude projects created in `EU` data center. Default is `US`.
	ServerZone *string `pulumi:"serverZone"`
}

// ProjectConnectorsAmplitudeInput is an input type that accepts ProjectConnectorsAmplitudeArgs and ProjectConnectorsAmplitudeOutput values.
// You can construct a concrete instance of `ProjectConnectorsAmplitudeInput` via:
//
//	ProjectConnectorsAmplitudeArgs{...}
type ProjectConnectorsAmplitudeInput interface {
	pulumi.Input

	ToProjectConnectorsAmplitudeOutput() ProjectConnectorsAmplitudeOutput
	ToProjectConnectorsAmplitudeOutputWithContext(context.Context) ProjectConnectorsAmplitudeOutput
}

type ProjectConnectorsAmplitudeArgs struct {
	// The Amplitude API Key generated for the Descope service.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The server URL of the Amplitude API, when using different api or a custom domain in Amplitude.
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
	// `EU` or `US`. Sets the Amplitude server zone. Set this to `EU` for Amplitude projects created in `EU` data center. Default is `US`.
	ServerZone pulumi.StringPtrInput `pulumi:"serverZone"`
}

func (ProjectConnectorsAmplitudeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAmplitude)(nil)).Elem()
}

func (i ProjectConnectorsAmplitudeArgs) ToProjectConnectorsAmplitudeOutput() ProjectConnectorsAmplitudeOutput {
	return i.ToProjectConnectorsAmplitudeOutputWithContext(context.Background())
}

func (i ProjectConnectorsAmplitudeArgs) ToProjectConnectorsAmplitudeOutputWithContext(ctx context.Context) ProjectConnectorsAmplitudeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAmplitudeOutput)
}

// ProjectConnectorsAmplitudeArrayInput is an input type that accepts ProjectConnectorsAmplitudeArray and ProjectConnectorsAmplitudeArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAmplitudeArrayInput` via:
//
//	ProjectConnectorsAmplitudeArray{ ProjectConnectorsAmplitudeArgs{...} }
type ProjectConnectorsAmplitudeArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAmplitudeArrayOutput() ProjectConnectorsAmplitudeArrayOutput
	ToProjectConnectorsAmplitudeArrayOutputWithContext(context.Context) ProjectConnectorsAmplitudeArrayOutput
}

type ProjectConnectorsAmplitudeArray []ProjectConnectorsAmplitudeInput

func (ProjectConnectorsAmplitudeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAmplitude)(nil)).Elem()
}

func (i ProjectConnectorsAmplitudeArray) ToProjectConnectorsAmplitudeArrayOutput() ProjectConnectorsAmplitudeArrayOutput {
	return i.ToProjectConnectorsAmplitudeArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAmplitudeArray) ToProjectConnectorsAmplitudeArrayOutputWithContext(ctx context.Context) ProjectConnectorsAmplitudeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAmplitudeArrayOutput)
}

type ProjectConnectorsAmplitudeOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAmplitudeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAmplitude)(nil)).Elem()
}

func (o ProjectConnectorsAmplitudeOutput) ToProjectConnectorsAmplitudeOutput() ProjectConnectorsAmplitudeOutput {
	return o
}

func (o ProjectConnectorsAmplitudeOutput) ToProjectConnectorsAmplitudeOutputWithContext(ctx context.Context) ProjectConnectorsAmplitudeOutput {
	return o
}

// The Amplitude API Key generated for the Descope service.
func (o ProjectConnectorsAmplitudeOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) string { return v.ApiKey }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsAmplitudeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsAmplitudeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsAmplitudeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) string { return v.Name }).(pulumi.StringOutput)
}

// The server URL of the Amplitude API, when using different api or a custom domain in Amplitude.
func (o ProjectConnectorsAmplitudeOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// `EU` or `US`. Sets the Amplitude server zone. Set this to `EU` for Amplitude projects created in `EU` data center. Default is `US`.
func (o ProjectConnectorsAmplitudeOutput) ServerZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAmplitude) *string { return v.ServerZone }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAmplitudeArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAmplitudeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAmplitude)(nil)).Elem()
}

func (o ProjectConnectorsAmplitudeArrayOutput) ToProjectConnectorsAmplitudeArrayOutput() ProjectConnectorsAmplitudeArrayOutput {
	return o
}

func (o ProjectConnectorsAmplitudeArrayOutput) ToProjectConnectorsAmplitudeArrayOutputWithContext(ctx context.Context) ProjectConnectorsAmplitudeArrayOutput {
	return o
}

func (o ProjectConnectorsAmplitudeArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAmplitudeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAmplitude {
		return vs[0].([]ProjectConnectorsAmplitude)[vs[1].(int)]
	}).(ProjectConnectorsAmplitudeOutput)
}

type ProjectConnectorsAuditWebhook struct {
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsAuditWebhookAuditFilter `pulumi:"auditFilters"`
	// Authentication Information
	Authentication *ProjectConnectorsAuditWebhookAuthentication `pulumi:"authentication"`
	// The base URL to fetch
	BaseUrl string `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The headers to send with the request
	Headers map[string]string `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret *string `pulumi:"hmacSecret"`
	Id         *string `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure *bool `pulumi:"insecure"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsAuditWebhookInput is an input type that accepts ProjectConnectorsAuditWebhookArgs and ProjectConnectorsAuditWebhookOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookInput` via:
//
//	ProjectConnectorsAuditWebhookArgs{...}
type ProjectConnectorsAuditWebhookInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookOutput() ProjectConnectorsAuditWebhookOutput
	ToProjectConnectorsAuditWebhookOutputWithContext(context.Context) ProjectConnectorsAuditWebhookOutput
}

type ProjectConnectorsAuditWebhookArgs struct {
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsAuditWebhookAuditFilterArrayInput `pulumi:"auditFilters"`
	// Authentication Information
	Authentication ProjectConnectorsAuditWebhookAuthenticationPtrInput `pulumi:"authentication"`
	// The base URL to fetch
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The headers to send with the request
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret pulumi.StringPtrInput `pulumi:"hmacSecret"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsAuditWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhook)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookArgs) ToProjectConnectorsAuditWebhookOutput() ProjectConnectorsAuditWebhookOutput {
	return i.ToProjectConnectorsAuditWebhookOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookArgs) ToProjectConnectorsAuditWebhookOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookOutput)
}

// ProjectConnectorsAuditWebhookArrayInput is an input type that accepts ProjectConnectorsAuditWebhookArray and ProjectConnectorsAuditWebhookArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookArrayInput` via:
//
//	ProjectConnectorsAuditWebhookArray{ ProjectConnectorsAuditWebhookArgs{...} }
type ProjectConnectorsAuditWebhookArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookArrayOutput() ProjectConnectorsAuditWebhookArrayOutput
	ToProjectConnectorsAuditWebhookArrayOutputWithContext(context.Context) ProjectConnectorsAuditWebhookArrayOutput
}

type ProjectConnectorsAuditWebhookArray []ProjectConnectorsAuditWebhookInput

func (ProjectConnectorsAuditWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAuditWebhook)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookArray) ToProjectConnectorsAuditWebhookArrayOutput() ProjectConnectorsAuditWebhookArrayOutput {
	return i.ToProjectConnectorsAuditWebhookArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookArray) ToProjectConnectorsAuditWebhookArrayOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookArrayOutput)
}

type ProjectConnectorsAuditWebhookOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhook)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookOutput) ToProjectConnectorsAuditWebhookOutput() ProjectConnectorsAuditWebhookOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookOutput) ToProjectConnectorsAuditWebhookOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookOutput {
	return o
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsAuditWebhookOutput) AuditFilters() ProjectConnectorsAuditWebhookAuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) []ProjectConnectorsAuditWebhookAuditFilter {
		return v.AuditFilters
	}).(ProjectConnectorsAuditWebhookAuditFilterArrayOutput)
}

// Authentication Information
func (o ProjectConnectorsAuditWebhookOutput) Authentication() ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) *ProjectConnectorsAuditWebhookAuthentication {
		return v.Authentication
	}).(ProjectConnectorsAuditWebhookAuthenticationPtrOutput)
}

// The base URL to fetch
func (o ProjectConnectorsAuditWebhookOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsAuditWebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to send with the request
func (o ProjectConnectorsAuditWebhookOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
func (o ProjectConnectorsAuditWebhookOutput) HmacSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) *string { return v.HmacSecret }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsAuditWebhookOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Will ignore certificate errors raised by the client
func (o ProjectConnectorsAuditWebhookOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsAuditWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhook) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsAuditWebhookArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAuditWebhook)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookArrayOutput) ToProjectConnectorsAuditWebhookArrayOutput() ProjectConnectorsAuditWebhookArrayOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookArrayOutput) ToProjectConnectorsAuditWebhookArrayOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookArrayOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAuditWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAuditWebhook {
		return vs[0].([]ProjectConnectorsAuditWebhook)[vs[1].(int)]
	}).(ProjectConnectorsAuditWebhookOutput)
}

type ProjectConnectorsAuditWebhookAuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsAuditWebhookAuditFilterInput is an input type that accepts ProjectConnectorsAuditWebhookAuditFilterArgs and ProjectConnectorsAuditWebhookAuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuditFilterInput` via:
//
//	ProjectConnectorsAuditWebhookAuditFilterArgs{...}
type ProjectConnectorsAuditWebhookAuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuditFilterOutput() ProjectConnectorsAuditWebhookAuditFilterOutput
	ToProjectConnectorsAuditWebhookAuditFilterOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuditFilterOutput
}

type ProjectConnectorsAuditWebhookAuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsAuditWebhookAuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookAuditFilterArgs) ToProjectConnectorsAuditWebhookAuditFilterOutput() ProjectConnectorsAuditWebhookAuditFilterOutput {
	return i.ToProjectConnectorsAuditWebhookAuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuditFilterArgs) ToProjectConnectorsAuditWebhookAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuditFilterOutput)
}

// ProjectConnectorsAuditWebhookAuditFilterArrayInput is an input type that accepts ProjectConnectorsAuditWebhookAuditFilterArray and ProjectConnectorsAuditWebhookAuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuditFilterArrayInput` via:
//
//	ProjectConnectorsAuditWebhookAuditFilterArray{ ProjectConnectorsAuditWebhookAuditFilterArgs{...} }
type ProjectConnectorsAuditWebhookAuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuditFilterArrayOutput() ProjectConnectorsAuditWebhookAuditFilterArrayOutput
	ToProjectConnectorsAuditWebhookAuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuditFilterArrayOutput
}

type ProjectConnectorsAuditWebhookAuditFilterArray []ProjectConnectorsAuditWebhookAuditFilterInput

func (ProjectConnectorsAuditWebhookAuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAuditWebhookAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookAuditFilterArray) ToProjectConnectorsAuditWebhookAuditFilterArrayOutput() ProjectConnectorsAuditWebhookAuditFilterArrayOutput {
	return i.ToProjectConnectorsAuditWebhookAuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuditFilterArray) ToProjectConnectorsAuditWebhookAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuditFilterArrayOutput)
}

type ProjectConnectorsAuditWebhookAuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuditFilterOutput) ToProjectConnectorsAuditWebhookAuditFilterOutput() ProjectConnectorsAuditWebhookAuditFilterOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuditFilterOutput) ToProjectConnectorsAuditWebhookAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsAuditWebhookAuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsAuditWebhookAuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsAuditWebhookAuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsAuditWebhookAuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAuditWebhookAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuditFilterArrayOutput) ToProjectConnectorsAuditWebhookAuditFilterArrayOutput() ProjectConnectorsAuditWebhookAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuditFilterArrayOutput) ToProjectConnectorsAuditWebhookAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAuditWebhookAuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAuditWebhookAuditFilter {
		return vs[0].([]ProjectConnectorsAuditWebhookAuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsAuditWebhookAuditFilterOutput)
}

type ProjectConnectorsAuditWebhookAuthentication struct {
	// API key authentication configuration.
	ApiKey *ProjectConnectorsAuditWebhookAuthenticationApiKey `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic *ProjectConnectorsAuditWebhookAuthenticationBasic `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken *string `pulumi:"bearerToken"`
}

// ProjectConnectorsAuditWebhookAuthenticationInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationArgs and ProjectConnectorsAuditWebhookAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationInput` via:
//
//	ProjectConnectorsAuditWebhookAuthenticationArgs{...}
type ProjectConnectorsAuditWebhookAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationOutput() ProjectConnectorsAuditWebhookAuthenticationOutput
	ToProjectConnectorsAuditWebhookAuthenticationOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationOutput
}

type ProjectConnectorsAuditWebhookAuthenticationArgs struct {
	// API key authentication configuration.
	ApiKey ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
}

func (ProjectConnectorsAuditWebhookAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookAuthenticationArgs) ToProjectConnectorsAuditWebhookAuthenticationOutput() ProjectConnectorsAuditWebhookAuthenticationOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationArgs) ToProjectConnectorsAuditWebhookAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationOutput)
}

func (i ProjectConnectorsAuditWebhookAuthenticationArgs) ToProjectConnectorsAuditWebhookAuthenticationPtrOutput() ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationArgs) ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationOutput).ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(ctx)
}

// ProjectConnectorsAuditWebhookAuthenticationPtrInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationArgs, ProjectConnectorsAuditWebhookAuthenticationPtr and ProjectConnectorsAuditWebhookAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationPtrInput` via:
//
//	        ProjectConnectorsAuditWebhookAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsAuditWebhookAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationPtrOutput() ProjectConnectorsAuditWebhookAuthenticationPtrOutput
	ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationPtrOutput
}

type projectConnectorsAuditWebhookAuthenticationPtrType ProjectConnectorsAuditWebhookAuthenticationArgs

func ProjectConnectorsAuditWebhookAuthenticationPtr(v *ProjectConnectorsAuditWebhookAuthenticationArgs) ProjectConnectorsAuditWebhookAuthenticationPtrInput {
	return (*projectConnectorsAuditWebhookAuthenticationPtrType)(v)
}

func (*projectConnectorsAuditWebhookAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthentication)(nil)).Elem()
}

func (i *projectConnectorsAuditWebhookAuthenticationPtrType) ToProjectConnectorsAuditWebhookAuthenticationPtrOutput() ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsAuditWebhookAuthenticationPtrType) ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationOutput) ToProjectConnectorsAuditWebhookAuthenticationOutput() ProjectConnectorsAuditWebhookAuthenticationOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationOutput) ToProjectConnectorsAuditWebhookAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationOutput) ToProjectConnectorsAuditWebhookAuthenticationPtrOutput() ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return o.ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsAuditWebhookAuthenticationOutput) ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsAuditWebhookAuthentication) *ProjectConnectorsAuditWebhookAuthentication {
		return &v
	}).(ProjectConnectorsAuditWebhookAuthenticationPtrOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsAuditWebhookAuthenticationOutput) ApiKey() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthentication) *ProjectConnectorsAuditWebhookAuthenticationApiKey {
		return v.ApiKey
	}).(ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsAuditWebhookAuthenticationOutput) Basic() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthentication) *ProjectConnectorsAuditWebhookAuthenticationBasic {
		return v.Basic
	}).(ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthentication) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationPtrOutput() ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) Elem() ProjectConnectorsAuditWebhookAuthenticationOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthentication) ProjectConnectorsAuditWebhookAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsAuditWebhookAuthentication
		return ret
	}).(ProjectConnectorsAuditWebhookAuthenticationOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) ApiKey() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthentication) *ProjectConnectorsAuditWebhookAuthenticationApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) Basic() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthentication) *ProjectConnectorsAuditWebhookAuthenticationBasic {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationApiKey struct {
	// The API key.
	Key string `pulumi:"key"`
	// The API secret.
	Token string `pulumi:"token"`
}

// ProjectConnectorsAuditWebhookAuthenticationApiKeyInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs and ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationApiKeyInput` via:
//
//	ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs{...}
type ProjectConnectorsAuditWebhookAuthenticationApiKeyInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput
	ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput
}

type ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs struct {
	// The API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The API secret.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationApiKey)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput)
}

func (i ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput).ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(ctx)
}

// ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs, ProjectConnectorsAuditWebhookAuthenticationApiKeyPtr and ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput` via:
//
//	        ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput
	ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput
}

type projectConnectorsAuditWebhookAuthenticationApiKeyPtrType ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs

func ProjectConnectorsAuditWebhookAuthenticationApiKeyPtr(v *ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput {
	return (*projectConnectorsAuditWebhookAuthenticationApiKeyPtrType)(v)
}

func (*projectConnectorsAuditWebhookAuthenticationApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthenticationApiKey)(nil)).Elem()
}

func (i *projectConnectorsAuditWebhookAuthenticationApiKeyPtrType) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsAuditWebhookAuthenticationApiKeyPtrType) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o.ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsAuditWebhookAuthenticationApiKey) *ProjectConnectorsAuditWebhookAuthenticationApiKey {
		return &v
	}).(ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput)
}

// The API key.
func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthenticationApiKey) string { return v.Key }).(pulumi.StringOutput)
}

// The API secret.
func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthenticationApiKey) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput() ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) Elem() ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationApiKey) ProjectConnectorsAuditWebhookAuthenticationApiKey {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsAuditWebhookAuthenticationApiKey
		return ret
	}).(ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput)
}

// The API key.
func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The API secret.
func (o ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationBasic struct {
	// Password for basic HTTP authentication.
	Password string `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsAuditWebhookAuthenticationBasicInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationBasicArgs and ProjectConnectorsAuditWebhookAuthenticationBasicOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationBasicInput` via:
//
//	ProjectConnectorsAuditWebhookAuthenticationBasicArgs{...}
type ProjectConnectorsAuditWebhookAuthenticationBasicInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationBasicOutput() ProjectConnectorsAuditWebhookAuthenticationBasicOutput
	ToProjectConnectorsAuditWebhookAuthenticationBasicOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicOutput
}

type ProjectConnectorsAuditWebhookAuthenticationBasicArgs struct {
	// Password for basic HTTP authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationBasic)(nil)).Elem()
}

func (i ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ToProjectConnectorsAuditWebhookAuthenticationBasicOutput() ProjectConnectorsAuditWebhookAuthenticationBasicOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationBasicOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ToProjectConnectorsAuditWebhookAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationBasicOutput)
}

func (i ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationBasicOutput).ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(ctx)
}

// ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput is an input type that accepts ProjectConnectorsAuditWebhookAuthenticationBasicArgs, ProjectConnectorsAuditWebhookAuthenticationBasicPtr and ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput` via:
//
//	        ProjectConnectorsAuditWebhookAuthenticationBasicArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput interface {
	pulumi.Input

	ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput
	ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput
}

type projectConnectorsAuditWebhookAuthenticationBasicPtrType ProjectConnectorsAuditWebhookAuthenticationBasicArgs

func ProjectConnectorsAuditWebhookAuthenticationBasicPtr(v *ProjectConnectorsAuditWebhookAuthenticationBasicArgs) ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput {
	return (*projectConnectorsAuditWebhookAuthenticationBasicPtrType)(v)
}

func (*projectConnectorsAuditWebhookAuthenticationBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthenticationBasic)(nil)).Elem()
}

func (i *projectConnectorsAuditWebhookAuthenticationBasicPtrType) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsAuditWebhookAuthenticationBasicPtrType) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationBasicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicOutput() ProjectConnectorsAuditWebhookAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o.ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsAuditWebhookAuthenticationBasic) *ProjectConnectorsAuditWebhookAuthenticationBasic {
		return &v
	}).(ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthenticationBasic) string { return v.Password }).(pulumi.StringOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAuditWebhookAuthenticationBasic) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsAuditWebhookAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput() ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) ToProjectConnectorsAuditWebhookAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) Elem() ProjectConnectorsAuditWebhookAuthenticationBasicOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationBasic) ProjectConnectorsAuditWebhookAuthenticationBasic {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsAuditWebhookAuthenticationBasic
		return ret
	}).(ProjectConnectorsAuditWebhookAuthenticationBasicOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsAuditWebhookAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAwsS3 struct {
	// The unique AWS access key ID.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// Whether to enable streaming of audit events.
	AuditEnabled *bool `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsAwsS3AuditFilter `pulumi:"auditFilters"`
	// The authentication type to use.
	AuthType *string `pulumi:"authType"`
	// The AWS S3 bucket. This bucket should already exist for the connector to work.
	Bucket string `pulumi:"bucket"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The external ID to use when assuming the role.
	ExternalId *string `pulumi:"externalId"`
	Id         *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The AWS S3 region, e.g. `us-east-1`.
	Region string `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the role to assume.
	RoleArn *string `pulumi:"roleArn"`
	// The secret AWS access key.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled *bool `pulumi:"troubleshootLogEnabled"`
}

// ProjectConnectorsAwsS3Input is an input type that accepts ProjectConnectorsAwsS3Args and ProjectConnectorsAwsS3Output values.
// You can construct a concrete instance of `ProjectConnectorsAwsS3Input` via:
//
//	ProjectConnectorsAwsS3Args{...}
type ProjectConnectorsAwsS3Input interface {
	pulumi.Input

	ToProjectConnectorsAwsS3Output() ProjectConnectorsAwsS3Output
	ToProjectConnectorsAwsS3OutputWithContext(context.Context) ProjectConnectorsAwsS3Output
}

type ProjectConnectorsAwsS3Args struct {
	// The unique AWS access key ID.
	AccessKeyId pulumi.StringPtrInput `pulumi:"accessKeyId"`
	// Whether to enable streaming of audit events.
	AuditEnabled pulumi.BoolPtrInput `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsAwsS3AuditFilterArrayInput `pulumi:"auditFilters"`
	// The authentication type to use.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// The AWS S3 bucket. This bucket should already exist for the connector to work.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The external ID to use when assuming the role.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS S3 region, e.g. `us-east-1`.
	Region pulumi.StringInput `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the role to assume.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The secret AWS access key.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled pulumi.BoolPtrInput `pulumi:"troubleshootLogEnabled"`
}

func (ProjectConnectorsAwsS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsS3)(nil)).Elem()
}

func (i ProjectConnectorsAwsS3Args) ToProjectConnectorsAwsS3Output() ProjectConnectorsAwsS3Output {
	return i.ToProjectConnectorsAwsS3OutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsS3Args) ToProjectConnectorsAwsS3OutputWithContext(ctx context.Context) ProjectConnectorsAwsS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsS3Output)
}

// ProjectConnectorsAwsS3ArrayInput is an input type that accepts ProjectConnectorsAwsS3Array and ProjectConnectorsAwsS3ArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAwsS3ArrayInput` via:
//
//	ProjectConnectorsAwsS3Array{ ProjectConnectorsAwsS3Args{...} }
type ProjectConnectorsAwsS3ArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAwsS3ArrayOutput() ProjectConnectorsAwsS3ArrayOutput
	ToProjectConnectorsAwsS3ArrayOutputWithContext(context.Context) ProjectConnectorsAwsS3ArrayOutput
}

type ProjectConnectorsAwsS3Array []ProjectConnectorsAwsS3Input

func (ProjectConnectorsAwsS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsS3)(nil)).Elem()
}

func (i ProjectConnectorsAwsS3Array) ToProjectConnectorsAwsS3ArrayOutput() ProjectConnectorsAwsS3ArrayOutput {
	return i.ToProjectConnectorsAwsS3ArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsS3Array) ToProjectConnectorsAwsS3ArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsS3ArrayOutput)
}

type ProjectConnectorsAwsS3Output struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsS3)(nil)).Elem()
}

func (o ProjectConnectorsAwsS3Output) ToProjectConnectorsAwsS3Output() ProjectConnectorsAwsS3Output {
	return o
}

func (o ProjectConnectorsAwsS3Output) ToProjectConnectorsAwsS3OutputWithContext(ctx context.Context) ProjectConnectorsAwsS3Output {
	return o
}

// The unique AWS access key ID.
func (o ProjectConnectorsAwsS3Output) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// Whether to enable streaming of audit events.
func (o ProjectConnectorsAwsS3Output) AuditEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *bool { return v.AuditEnabled }).(pulumi.BoolPtrOutput)
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsAwsS3Output) AuditFilters() ProjectConnectorsAwsS3AuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) []ProjectConnectorsAwsS3AuditFilter { return v.AuditFilters }).(ProjectConnectorsAwsS3AuditFilterArrayOutput)
}

// The authentication type to use.
func (o ProjectConnectorsAwsS3Output) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// The AWS S3 bucket. This bucket should already exist for the connector to work.
func (o ProjectConnectorsAwsS3Output) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) string { return v.Bucket }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsAwsS3Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The external ID to use when assuming the role.
func (o ProjectConnectorsAwsS3Output) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsAwsS3Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsAwsS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS S3 region, e.g. `us-east-1`.
func (o ProjectConnectorsAwsS3Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) string { return v.Region }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the role to assume.
func (o ProjectConnectorsAwsS3Output) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The secret AWS access key.
func (o ProjectConnectorsAwsS3Output) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// Whether to send troubleshooting events.
func (o ProjectConnectorsAwsS3Output) TroubleshootLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3) *bool { return v.TroubleshootLogEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsAwsS3ArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsS3)(nil)).Elem()
}

func (o ProjectConnectorsAwsS3ArrayOutput) ToProjectConnectorsAwsS3ArrayOutput() ProjectConnectorsAwsS3ArrayOutput {
	return o
}

func (o ProjectConnectorsAwsS3ArrayOutput) ToProjectConnectorsAwsS3ArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3ArrayOutput {
	return o
}

func (o ProjectConnectorsAwsS3ArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAwsS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAwsS3 {
		return vs[0].([]ProjectConnectorsAwsS3)[vs[1].(int)]
	}).(ProjectConnectorsAwsS3Output)
}

type ProjectConnectorsAwsS3AuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsAwsS3AuditFilterInput is an input type that accepts ProjectConnectorsAwsS3AuditFilterArgs and ProjectConnectorsAwsS3AuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsAwsS3AuditFilterInput` via:
//
//	ProjectConnectorsAwsS3AuditFilterArgs{...}
type ProjectConnectorsAwsS3AuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsAwsS3AuditFilterOutput() ProjectConnectorsAwsS3AuditFilterOutput
	ToProjectConnectorsAwsS3AuditFilterOutputWithContext(context.Context) ProjectConnectorsAwsS3AuditFilterOutput
}

type ProjectConnectorsAwsS3AuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsAwsS3AuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsS3AuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsAwsS3AuditFilterArgs) ToProjectConnectorsAwsS3AuditFilterOutput() ProjectConnectorsAwsS3AuditFilterOutput {
	return i.ToProjectConnectorsAwsS3AuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsS3AuditFilterArgs) ToProjectConnectorsAwsS3AuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3AuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsS3AuditFilterOutput)
}

// ProjectConnectorsAwsS3AuditFilterArrayInput is an input type that accepts ProjectConnectorsAwsS3AuditFilterArray and ProjectConnectorsAwsS3AuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAwsS3AuditFilterArrayInput` via:
//
//	ProjectConnectorsAwsS3AuditFilterArray{ ProjectConnectorsAwsS3AuditFilterArgs{...} }
type ProjectConnectorsAwsS3AuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAwsS3AuditFilterArrayOutput() ProjectConnectorsAwsS3AuditFilterArrayOutput
	ToProjectConnectorsAwsS3AuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsAwsS3AuditFilterArrayOutput
}

type ProjectConnectorsAwsS3AuditFilterArray []ProjectConnectorsAwsS3AuditFilterInput

func (ProjectConnectorsAwsS3AuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsS3AuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsAwsS3AuditFilterArray) ToProjectConnectorsAwsS3AuditFilterArrayOutput() ProjectConnectorsAwsS3AuditFilterArrayOutput {
	return i.ToProjectConnectorsAwsS3AuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsS3AuditFilterArray) ToProjectConnectorsAwsS3AuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3AuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsS3AuditFilterArrayOutput)
}

type ProjectConnectorsAwsS3AuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsS3AuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsS3AuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsAwsS3AuditFilterOutput) ToProjectConnectorsAwsS3AuditFilterOutput() ProjectConnectorsAwsS3AuditFilterOutput {
	return o
}

func (o ProjectConnectorsAwsS3AuditFilterOutput) ToProjectConnectorsAwsS3AuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3AuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsAwsS3AuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3AuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsAwsS3AuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3AuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsAwsS3AuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsS3AuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsAwsS3AuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsS3AuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsS3AuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsAwsS3AuditFilterArrayOutput) ToProjectConnectorsAwsS3AuditFilterArrayOutput() ProjectConnectorsAwsS3AuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsAwsS3AuditFilterArrayOutput) ToProjectConnectorsAwsS3AuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsS3AuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsAwsS3AuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAwsS3AuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAwsS3AuditFilter {
		return vs[0].([]ProjectConnectorsAwsS3AuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsAwsS3AuditFilterOutput)
}

type ProjectConnectorsAwsTranslate struct {
	// AWS access key ID.
	AccessKeyId string `pulumi:"accessKeyId"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The AWS region to which this client will send requests. (e.g. us-east-1.)
	Region string `pulumi:"region"`
	// AWS secret access key.
	SecretAccessKey string `pulumi:"secretAccessKey"`
	// (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
	SessionToken *string `pulumi:"sessionToken"`
}

// ProjectConnectorsAwsTranslateInput is an input type that accepts ProjectConnectorsAwsTranslateArgs and ProjectConnectorsAwsTranslateOutput values.
// You can construct a concrete instance of `ProjectConnectorsAwsTranslateInput` via:
//
//	ProjectConnectorsAwsTranslateArgs{...}
type ProjectConnectorsAwsTranslateInput interface {
	pulumi.Input

	ToProjectConnectorsAwsTranslateOutput() ProjectConnectorsAwsTranslateOutput
	ToProjectConnectorsAwsTranslateOutputWithContext(context.Context) ProjectConnectorsAwsTranslateOutput
}

type ProjectConnectorsAwsTranslateArgs struct {
	// AWS access key ID.
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS region to which this client will send requests. (e.g. us-east-1.)
	Region pulumi.StringInput `pulumi:"region"`
	// AWS secret access key.
	SecretAccessKey pulumi.StringInput `pulumi:"secretAccessKey"`
	// (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
	SessionToken pulumi.StringPtrInput `pulumi:"sessionToken"`
}

func (ProjectConnectorsAwsTranslateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsTranslate)(nil)).Elem()
}

func (i ProjectConnectorsAwsTranslateArgs) ToProjectConnectorsAwsTranslateOutput() ProjectConnectorsAwsTranslateOutput {
	return i.ToProjectConnectorsAwsTranslateOutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsTranslateArgs) ToProjectConnectorsAwsTranslateOutputWithContext(ctx context.Context) ProjectConnectorsAwsTranslateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsTranslateOutput)
}

// ProjectConnectorsAwsTranslateArrayInput is an input type that accepts ProjectConnectorsAwsTranslateArray and ProjectConnectorsAwsTranslateArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsAwsTranslateArrayInput` via:
//
//	ProjectConnectorsAwsTranslateArray{ ProjectConnectorsAwsTranslateArgs{...} }
type ProjectConnectorsAwsTranslateArrayInput interface {
	pulumi.Input

	ToProjectConnectorsAwsTranslateArrayOutput() ProjectConnectorsAwsTranslateArrayOutput
	ToProjectConnectorsAwsTranslateArrayOutputWithContext(context.Context) ProjectConnectorsAwsTranslateArrayOutput
}

type ProjectConnectorsAwsTranslateArray []ProjectConnectorsAwsTranslateInput

func (ProjectConnectorsAwsTranslateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsTranslate)(nil)).Elem()
}

func (i ProjectConnectorsAwsTranslateArray) ToProjectConnectorsAwsTranslateArrayOutput() ProjectConnectorsAwsTranslateArrayOutput {
	return i.ToProjectConnectorsAwsTranslateArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsAwsTranslateArray) ToProjectConnectorsAwsTranslateArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsTranslateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsAwsTranslateArrayOutput)
}

type ProjectConnectorsAwsTranslateOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsTranslateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsAwsTranslate)(nil)).Elem()
}

func (o ProjectConnectorsAwsTranslateOutput) ToProjectConnectorsAwsTranslateOutput() ProjectConnectorsAwsTranslateOutput {
	return o
}

func (o ProjectConnectorsAwsTranslateOutput) ToProjectConnectorsAwsTranslateOutputWithContext(ctx context.Context) ProjectConnectorsAwsTranslateOutput {
	return o
}

// AWS access key ID.
func (o ProjectConnectorsAwsTranslateOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsAwsTranslateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsAwsTranslateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsAwsTranslateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS region to which this client will send requests. (e.g. us-east-1.)
func (o ProjectConnectorsAwsTranslateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) string { return v.Region }).(pulumi.StringOutput)
}

// AWS secret access key.
func (o ProjectConnectorsAwsTranslateOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) string { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// (Optional) A security or session token to use with these credentials. Usually present for temporary credentials.
func (o ProjectConnectorsAwsTranslateOutput) SessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsAwsTranslate) *string { return v.SessionToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsAwsTranslateArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsAwsTranslateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsAwsTranslate)(nil)).Elem()
}

func (o ProjectConnectorsAwsTranslateArrayOutput) ToProjectConnectorsAwsTranslateArrayOutput() ProjectConnectorsAwsTranslateArrayOutput {
	return o
}

func (o ProjectConnectorsAwsTranslateArrayOutput) ToProjectConnectorsAwsTranslateArrayOutputWithContext(ctx context.Context) ProjectConnectorsAwsTranslateArrayOutput {
	return o
}

func (o ProjectConnectorsAwsTranslateArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsAwsTranslateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsAwsTranslate {
		return vs[0].([]ProjectConnectorsAwsTranslate)[vs[1].(int)]
	}).(ProjectConnectorsAwsTranslateOutput)
}

type ProjectConnectorsCybersixgill struct {
	// API Client ID issued when you create the credentials in Cybersixgill.
	ClientId string `pulumi:"clientId"`
	// Client secret issued when you create the credentials in Cybersixgill.
	ClientSecret string `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsCybersixgillInput is an input type that accepts ProjectConnectorsCybersixgillArgs and ProjectConnectorsCybersixgillOutput values.
// You can construct a concrete instance of `ProjectConnectorsCybersixgillInput` via:
//
//	ProjectConnectorsCybersixgillArgs{...}
type ProjectConnectorsCybersixgillInput interface {
	pulumi.Input

	ToProjectConnectorsCybersixgillOutput() ProjectConnectorsCybersixgillOutput
	ToProjectConnectorsCybersixgillOutputWithContext(context.Context) ProjectConnectorsCybersixgillOutput
}

type ProjectConnectorsCybersixgillArgs struct {
	// API Client ID issued when you create the credentials in Cybersixgill.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client secret issued when you create the credentials in Cybersixgill.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsCybersixgillArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsCybersixgill)(nil)).Elem()
}

func (i ProjectConnectorsCybersixgillArgs) ToProjectConnectorsCybersixgillOutput() ProjectConnectorsCybersixgillOutput {
	return i.ToProjectConnectorsCybersixgillOutputWithContext(context.Background())
}

func (i ProjectConnectorsCybersixgillArgs) ToProjectConnectorsCybersixgillOutputWithContext(ctx context.Context) ProjectConnectorsCybersixgillOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsCybersixgillOutput)
}

// ProjectConnectorsCybersixgillArrayInput is an input type that accepts ProjectConnectorsCybersixgillArray and ProjectConnectorsCybersixgillArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsCybersixgillArrayInput` via:
//
//	ProjectConnectorsCybersixgillArray{ ProjectConnectorsCybersixgillArgs{...} }
type ProjectConnectorsCybersixgillArrayInput interface {
	pulumi.Input

	ToProjectConnectorsCybersixgillArrayOutput() ProjectConnectorsCybersixgillArrayOutput
	ToProjectConnectorsCybersixgillArrayOutputWithContext(context.Context) ProjectConnectorsCybersixgillArrayOutput
}

type ProjectConnectorsCybersixgillArray []ProjectConnectorsCybersixgillInput

func (ProjectConnectorsCybersixgillArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsCybersixgill)(nil)).Elem()
}

func (i ProjectConnectorsCybersixgillArray) ToProjectConnectorsCybersixgillArrayOutput() ProjectConnectorsCybersixgillArrayOutput {
	return i.ToProjectConnectorsCybersixgillArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsCybersixgillArray) ToProjectConnectorsCybersixgillArrayOutputWithContext(ctx context.Context) ProjectConnectorsCybersixgillArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsCybersixgillArrayOutput)
}

type ProjectConnectorsCybersixgillOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsCybersixgillOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsCybersixgill)(nil)).Elem()
}

func (o ProjectConnectorsCybersixgillOutput) ToProjectConnectorsCybersixgillOutput() ProjectConnectorsCybersixgillOutput {
	return o
}

func (o ProjectConnectorsCybersixgillOutput) ToProjectConnectorsCybersixgillOutputWithContext(ctx context.Context) ProjectConnectorsCybersixgillOutput {
	return o
}

// API Client ID issued when you create the credentials in Cybersixgill.
func (o ProjectConnectorsCybersixgillOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsCybersixgill) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret issued when you create the credentials in Cybersixgill.
func (o ProjectConnectorsCybersixgillOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsCybersixgill) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsCybersixgillOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsCybersixgill) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsCybersixgillOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsCybersixgill) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsCybersixgillOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsCybersixgill) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsCybersixgillArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsCybersixgillArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsCybersixgill)(nil)).Elem()
}

func (o ProjectConnectorsCybersixgillArrayOutput) ToProjectConnectorsCybersixgillArrayOutput() ProjectConnectorsCybersixgillArrayOutput {
	return o
}

func (o ProjectConnectorsCybersixgillArrayOutput) ToProjectConnectorsCybersixgillArrayOutputWithContext(ctx context.Context) ProjectConnectorsCybersixgillArrayOutput {
	return o
}

func (o ProjectConnectorsCybersixgillArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsCybersixgillOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsCybersixgill {
		return vs[0].([]ProjectConnectorsCybersixgill)[vs[1].(int)]
	}).(ProjectConnectorsCybersixgillOutput)
}

type ProjectConnectorsDatadog struct {
	// The unique Datadog organization key.
	ApiKey string `pulumi:"apiKey"`
	// Whether to enable streaming of audit events.
	AuditEnabled *bool `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsDatadogAuditFilter `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Datadog site to send logs to. Default is `datadoghq.com`. European, free tier and other customers should set their site accordingly.
	Site *string `pulumi:"site"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled *bool `pulumi:"troubleshootLogEnabled"`
}

// ProjectConnectorsDatadogInput is an input type that accepts ProjectConnectorsDatadogArgs and ProjectConnectorsDatadogOutput values.
// You can construct a concrete instance of `ProjectConnectorsDatadogInput` via:
//
//	ProjectConnectorsDatadogArgs{...}
type ProjectConnectorsDatadogInput interface {
	pulumi.Input

	ToProjectConnectorsDatadogOutput() ProjectConnectorsDatadogOutput
	ToProjectConnectorsDatadogOutputWithContext(context.Context) ProjectConnectorsDatadogOutput
}

type ProjectConnectorsDatadogArgs struct {
	// The unique Datadog organization key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Whether to enable streaming of audit events.
	AuditEnabled pulumi.BoolPtrInput `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsDatadogAuditFilterArrayInput `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Datadog site to send logs to. Default is `datadoghq.com`. European, free tier and other customers should set their site accordingly.
	Site pulumi.StringPtrInput `pulumi:"site"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled pulumi.BoolPtrInput `pulumi:"troubleshootLogEnabled"`
}

func (ProjectConnectorsDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDatadog)(nil)).Elem()
}

func (i ProjectConnectorsDatadogArgs) ToProjectConnectorsDatadogOutput() ProjectConnectorsDatadogOutput {
	return i.ToProjectConnectorsDatadogOutputWithContext(context.Background())
}

func (i ProjectConnectorsDatadogArgs) ToProjectConnectorsDatadogOutputWithContext(ctx context.Context) ProjectConnectorsDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDatadogOutput)
}

// ProjectConnectorsDatadogArrayInput is an input type that accepts ProjectConnectorsDatadogArray and ProjectConnectorsDatadogArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsDatadogArrayInput` via:
//
//	ProjectConnectorsDatadogArray{ ProjectConnectorsDatadogArgs{...} }
type ProjectConnectorsDatadogArrayInput interface {
	pulumi.Input

	ToProjectConnectorsDatadogArrayOutput() ProjectConnectorsDatadogArrayOutput
	ToProjectConnectorsDatadogArrayOutputWithContext(context.Context) ProjectConnectorsDatadogArrayOutput
}

type ProjectConnectorsDatadogArray []ProjectConnectorsDatadogInput

func (ProjectConnectorsDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDatadog)(nil)).Elem()
}

func (i ProjectConnectorsDatadogArray) ToProjectConnectorsDatadogArrayOutput() ProjectConnectorsDatadogArrayOutput {
	return i.ToProjectConnectorsDatadogArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsDatadogArray) ToProjectConnectorsDatadogArrayOutputWithContext(ctx context.Context) ProjectConnectorsDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDatadogArrayOutput)
}

type ProjectConnectorsDatadogOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDatadog)(nil)).Elem()
}

func (o ProjectConnectorsDatadogOutput) ToProjectConnectorsDatadogOutput() ProjectConnectorsDatadogOutput {
	return o
}

func (o ProjectConnectorsDatadogOutput) ToProjectConnectorsDatadogOutputWithContext(ctx context.Context) ProjectConnectorsDatadogOutput {
	return o
}

// The unique Datadog organization key.
func (o ProjectConnectorsDatadogOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Whether to enable streaming of audit events.
func (o ProjectConnectorsDatadogOutput) AuditEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) *bool { return v.AuditEnabled }).(pulumi.BoolPtrOutput)
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsDatadogOutput) AuditFilters() ProjectConnectorsDatadogAuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) []ProjectConnectorsDatadogAuditFilter { return v.AuditFilters }).(ProjectConnectorsDatadogAuditFilterArrayOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsDatadogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsDatadogOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// The Datadog site to send logs to. Default is `datadoghq.com`. European, free tier and other customers should set their site accordingly.
func (o ProjectConnectorsDatadogOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) *string { return v.Site }).(pulumi.StringPtrOutput)
}

// Whether to send troubleshooting events.
func (o ProjectConnectorsDatadogOutput) TroubleshootLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadog) *bool { return v.TroubleshootLogEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsDatadogArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDatadog)(nil)).Elem()
}

func (o ProjectConnectorsDatadogArrayOutput) ToProjectConnectorsDatadogArrayOutput() ProjectConnectorsDatadogArrayOutput {
	return o
}

func (o ProjectConnectorsDatadogArrayOutput) ToProjectConnectorsDatadogArrayOutputWithContext(ctx context.Context) ProjectConnectorsDatadogArrayOutput {
	return o
}

func (o ProjectConnectorsDatadogArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsDatadog {
		return vs[0].([]ProjectConnectorsDatadog)[vs[1].(int)]
	}).(ProjectConnectorsDatadogOutput)
}

type ProjectConnectorsDatadogAuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsDatadogAuditFilterInput is an input type that accepts ProjectConnectorsDatadogAuditFilterArgs and ProjectConnectorsDatadogAuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsDatadogAuditFilterInput` via:
//
//	ProjectConnectorsDatadogAuditFilterArgs{...}
type ProjectConnectorsDatadogAuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsDatadogAuditFilterOutput() ProjectConnectorsDatadogAuditFilterOutput
	ToProjectConnectorsDatadogAuditFilterOutputWithContext(context.Context) ProjectConnectorsDatadogAuditFilterOutput
}

type ProjectConnectorsDatadogAuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsDatadogAuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDatadogAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsDatadogAuditFilterArgs) ToProjectConnectorsDatadogAuditFilterOutput() ProjectConnectorsDatadogAuditFilterOutput {
	return i.ToProjectConnectorsDatadogAuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsDatadogAuditFilterArgs) ToProjectConnectorsDatadogAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsDatadogAuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDatadogAuditFilterOutput)
}

// ProjectConnectorsDatadogAuditFilterArrayInput is an input type that accepts ProjectConnectorsDatadogAuditFilterArray and ProjectConnectorsDatadogAuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsDatadogAuditFilterArrayInput` via:
//
//	ProjectConnectorsDatadogAuditFilterArray{ ProjectConnectorsDatadogAuditFilterArgs{...} }
type ProjectConnectorsDatadogAuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsDatadogAuditFilterArrayOutput() ProjectConnectorsDatadogAuditFilterArrayOutput
	ToProjectConnectorsDatadogAuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsDatadogAuditFilterArrayOutput
}

type ProjectConnectorsDatadogAuditFilterArray []ProjectConnectorsDatadogAuditFilterInput

func (ProjectConnectorsDatadogAuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDatadogAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsDatadogAuditFilterArray) ToProjectConnectorsDatadogAuditFilterArrayOutput() ProjectConnectorsDatadogAuditFilterArrayOutput {
	return i.ToProjectConnectorsDatadogAuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsDatadogAuditFilterArray) ToProjectConnectorsDatadogAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsDatadogAuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDatadogAuditFilterArrayOutput)
}

type ProjectConnectorsDatadogAuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDatadogAuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDatadogAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsDatadogAuditFilterOutput) ToProjectConnectorsDatadogAuditFilterOutput() ProjectConnectorsDatadogAuditFilterOutput {
	return o
}

func (o ProjectConnectorsDatadogAuditFilterOutput) ToProjectConnectorsDatadogAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsDatadogAuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsDatadogAuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadogAuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsDatadogAuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadogAuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsDatadogAuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsDatadogAuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsDatadogAuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDatadogAuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDatadogAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsDatadogAuditFilterArrayOutput) ToProjectConnectorsDatadogAuditFilterArrayOutput() ProjectConnectorsDatadogAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsDatadogAuditFilterArrayOutput) ToProjectConnectorsDatadogAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsDatadogAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsDatadogAuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsDatadogAuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsDatadogAuditFilter {
		return vs[0].([]ProjectConnectorsDatadogAuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsDatadogAuditFilterOutput)
}

type ProjectConnectorsDevrevGrow struct {
	// Authentication to DevRev APIs requires a personal access token (PAT).
	ApiKey string `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsDevrevGrowInput is an input type that accepts ProjectConnectorsDevrevGrowArgs and ProjectConnectorsDevrevGrowOutput values.
// You can construct a concrete instance of `ProjectConnectorsDevrevGrowInput` via:
//
//	ProjectConnectorsDevrevGrowArgs{...}
type ProjectConnectorsDevrevGrowInput interface {
	pulumi.Input

	ToProjectConnectorsDevrevGrowOutput() ProjectConnectorsDevrevGrowOutput
	ToProjectConnectorsDevrevGrowOutputWithContext(context.Context) ProjectConnectorsDevrevGrowOutput
}

type ProjectConnectorsDevrevGrowArgs struct {
	// Authentication to DevRev APIs requires a personal access token (PAT).
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsDevrevGrowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDevrevGrow)(nil)).Elem()
}

func (i ProjectConnectorsDevrevGrowArgs) ToProjectConnectorsDevrevGrowOutput() ProjectConnectorsDevrevGrowOutput {
	return i.ToProjectConnectorsDevrevGrowOutputWithContext(context.Background())
}

func (i ProjectConnectorsDevrevGrowArgs) ToProjectConnectorsDevrevGrowOutputWithContext(ctx context.Context) ProjectConnectorsDevrevGrowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDevrevGrowOutput)
}

// ProjectConnectorsDevrevGrowArrayInput is an input type that accepts ProjectConnectorsDevrevGrowArray and ProjectConnectorsDevrevGrowArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsDevrevGrowArrayInput` via:
//
//	ProjectConnectorsDevrevGrowArray{ ProjectConnectorsDevrevGrowArgs{...} }
type ProjectConnectorsDevrevGrowArrayInput interface {
	pulumi.Input

	ToProjectConnectorsDevrevGrowArrayOutput() ProjectConnectorsDevrevGrowArrayOutput
	ToProjectConnectorsDevrevGrowArrayOutputWithContext(context.Context) ProjectConnectorsDevrevGrowArrayOutput
}

type ProjectConnectorsDevrevGrowArray []ProjectConnectorsDevrevGrowInput

func (ProjectConnectorsDevrevGrowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDevrevGrow)(nil)).Elem()
}

func (i ProjectConnectorsDevrevGrowArray) ToProjectConnectorsDevrevGrowArrayOutput() ProjectConnectorsDevrevGrowArrayOutput {
	return i.ToProjectConnectorsDevrevGrowArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsDevrevGrowArray) ToProjectConnectorsDevrevGrowArrayOutputWithContext(ctx context.Context) ProjectConnectorsDevrevGrowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDevrevGrowArrayOutput)
}

type ProjectConnectorsDevrevGrowOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDevrevGrowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDevrevGrow)(nil)).Elem()
}

func (o ProjectConnectorsDevrevGrowOutput) ToProjectConnectorsDevrevGrowOutput() ProjectConnectorsDevrevGrowOutput {
	return o
}

func (o ProjectConnectorsDevrevGrowOutput) ToProjectConnectorsDevrevGrowOutputWithContext(ctx context.Context) ProjectConnectorsDevrevGrowOutput {
	return o
}

// Authentication to DevRev APIs requires a personal access token (PAT).
func (o ProjectConnectorsDevrevGrowOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDevrevGrow) string { return v.ApiKey }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsDevrevGrowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDevrevGrow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsDevrevGrowOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDevrevGrow) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsDevrevGrowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDevrevGrow) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsDevrevGrowArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDevrevGrowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDevrevGrow)(nil)).Elem()
}

func (o ProjectConnectorsDevrevGrowArrayOutput) ToProjectConnectorsDevrevGrowArrayOutput() ProjectConnectorsDevrevGrowArrayOutput {
	return o
}

func (o ProjectConnectorsDevrevGrowArrayOutput) ToProjectConnectorsDevrevGrowArrayOutputWithContext(ctx context.Context) ProjectConnectorsDevrevGrowArrayOutput {
	return o
}

func (o ProjectConnectorsDevrevGrowArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsDevrevGrowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsDevrevGrow {
		return vs[0].([]ProjectConnectorsDevrevGrow)[vs[1].(int)]
	}).(ProjectConnectorsDevrevGrowOutput)
}

type ProjectConnectorsDocebo struct {
	// The Docebo api base url.
	BaseUrl string `pulumi:"baseUrl"`
	// The Docebo OAuth 2.0 app client ID.
	ClientId string `pulumi:"clientId"`
	// The Docebo OAuth 2.0 app client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Docebo user's password.
	Password string `pulumi:"password"`
	// The Docebo username.
	Username string `pulumi:"username"`
}

// ProjectConnectorsDoceboInput is an input type that accepts ProjectConnectorsDoceboArgs and ProjectConnectorsDoceboOutput values.
// You can construct a concrete instance of `ProjectConnectorsDoceboInput` via:
//
//	ProjectConnectorsDoceboArgs{...}
type ProjectConnectorsDoceboInput interface {
	pulumi.Input

	ToProjectConnectorsDoceboOutput() ProjectConnectorsDoceboOutput
	ToProjectConnectorsDoceboOutputWithContext(context.Context) ProjectConnectorsDoceboOutput
}

type ProjectConnectorsDoceboArgs struct {
	// The Docebo api base url.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The Docebo OAuth 2.0 app client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Docebo OAuth 2.0 app client secret.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Docebo user's password.
	Password pulumi.StringInput `pulumi:"password"`
	// The Docebo username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsDoceboArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDocebo)(nil)).Elem()
}

func (i ProjectConnectorsDoceboArgs) ToProjectConnectorsDoceboOutput() ProjectConnectorsDoceboOutput {
	return i.ToProjectConnectorsDoceboOutputWithContext(context.Background())
}

func (i ProjectConnectorsDoceboArgs) ToProjectConnectorsDoceboOutputWithContext(ctx context.Context) ProjectConnectorsDoceboOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDoceboOutput)
}

// ProjectConnectorsDoceboArrayInput is an input type that accepts ProjectConnectorsDoceboArray and ProjectConnectorsDoceboArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsDoceboArrayInput` via:
//
//	ProjectConnectorsDoceboArray{ ProjectConnectorsDoceboArgs{...} }
type ProjectConnectorsDoceboArrayInput interface {
	pulumi.Input

	ToProjectConnectorsDoceboArrayOutput() ProjectConnectorsDoceboArrayOutput
	ToProjectConnectorsDoceboArrayOutputWithContext(context.Context) ProjectConnectorsDoceboArrayOutput
}

type ProjectConnectorsDoceboArray []ProjectConnectorsDoceboInput

func (ProjectConnectorsDoceboArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDocebo)(nil)).Elem()
}

func (i ProjectConnectorsDoceboArray) ToProjectConnectorsDoceboArrayOutput() ProjectConnectorsDoceboArrayOutput {
	return i.ToProjectConnectorsDoceboArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsDoceboArray) ToProjectConnectorsDoceboArrayOutputWithContext(ctx context.Context) ProjectConnectorsDoceboArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsDoceboArrayOutput)
}

type ProjectConnectorsDoceboOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDoceboOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsDocebo)(nil)).Elem()
}

func (o ProjectConnectorsDoceboOutput) ToProjectConnectorsDoceboOutput() ProjectConnectorsDoceboOutput {
	return o
}

func (o ProjectConnectorsDoceboOutput) ToProjectConnectorsDoceboOutputWithContext(ctx context.Context) ProjectConnectorsDoceboOutput {
	return o
}

// The Docebo api base url.
func (o ProjectConnectorsDoceboOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The Docebo OAuth 2.0 app client ID.
func (o ProjectConnectorsDoceboOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.ClientId }).(pulumi.StringOutput)
}

// The Docebo OAuth 2.0 app client secret.
func (o ProjectConnectorsDoceboOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsDoceboOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsDoceboOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsDoceboOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.Name }).(pulumi.StringOutput)
}

// The Docebo user's password.
func (o ProjectConnectorsDoceboOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.Password }).(pulumi.StringOutput)
}

// The Docebo username.
func (o ProjectConnectorsDoceboOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsDocebo) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsDoceboArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsDoceboArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsDocebo)(nil)).Elem()
}

func (o ProjectConnectorsDoceboArrayOutput) ToProjectConnectorsDoceboArrayOutput() ProjectConnectorsDoceboArrayOutput {
	return o
}

func (o ProjectConnectorsDoceboArrayOutput) ToProjectConnectorsDoceboArrayOutputWithContext(ctx context.Context) ProjectConnectorsDoceboArrayOutput {
	return o
}

func (o ProjectConnectorsDoceboArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsDoceboOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsDocebo {
		return vs[0].([]ProjectConnectorsDocebo)[vs[1].(int)]
	}).(ProjectConnectorsDoceboOutput)
}

type ProjectConnectorsEightByEightViber struct {
	// The 8x8 API key for authentication.
	ApiKey string `pulumi:"apiKey"`
	// The country code or region where your Viber messaging service is configured.
	Country *string `pulumi:"country"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The 8x8 sub-account ID is required for the Messaging API.
	SubAccountId string `pulumi:"subAccountId"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsEightByEightViberInput is an input type that accepts ProjectConnectorsEightByEightViberArgs and ProjectConnectorsEightByEightViberOutput values.
// You can construct a concrete instance of `ProjectConnectorsEightByEightViberInput` via:
//
//	ProjectConnectorsEightByEightViberArgs{...}
type ProjectConnectorsEightByEightViberInput interface {
	pulumi.Input

	ToProjectConnectorsEightByEightViberOutput() ProjectConnectorsEightByEightViberOutput
	ToProjectConnectorsEightByEightViberOutputWithContext(context.Context) ProjectConnectorsEightByEightViberOutput
}

type ProjectConnectorsEightByEightViberArgs struct {
	// The 8x8 API key for authentication.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The country code or region where your Viber messaging service is configured.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The 8x8 sub-account ID is required for the Messaging API.
	SubAccountId pulumi.StringInput `pulumi:"subAccountId"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsEightByEightViberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsEightByEightViber)(nil)).Elem()
}

func (i ProjectConnectorsEightByEightViberArgs) ToProjectConnectorsEightByEightViberOutput() ProjectConnectorsEightByEightViberOutput {
	return i.ToProjectConnectorsEightByEightViberOutputWithContext(context.Background())
}

func (i ProjectConnectorsEightByEightViberArgs) ToProjectConnectorsEightByEightViberOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightViberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsEightByEightViberOutput)
}

// ProjectConnectorsEightByEightViberArrayInput is an input type that accepts ProjectConnectorsEightByEightViberArray and ProjectConnectorsEightByEightViberArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsEightByEightViberArrayInput` via:
//
//	ProjectConnectorsEightByEightViberArray{ ProjectConnectorsEightByEightViberArgs{...} }
type ProjectConnectorsEightByEightViberArrayInput interface {
	pulumi.Input

	ToProjectConnectorsEightByEightViberArrayOutput() ProjectConnectorsEightByEightViberArrayOutput
	ToProjectConnectorsEightByEightViberArrayOutputWithContext(context.Context) ProjectConnectorsEightByEightViberArrayOutput
}

type ProjectConnectorsEightByEightViberArray []ProjectConnectorsEightByEightViberInput

func (ProjectConnectorsEightByEightViberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsEightByEightViber)(nil)).Elem()
}

func (i ProjectConnectorsEightByEightViberArray) ToProjectConnectorsEightByEightViberArrayOutput() ProjectConnectorsEightByEightViberArrayOutput {
	return i.ToProjectConnectorsEightByEightViberArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsEightByEightViberArray) ToProjectConnectorsEightByEightViberArrayOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightViberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsEightByEightViberArrayOutput)
}

type ProjectConnectorsEightByEightViberOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsEightByEightViberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsEightByEightViber)(nil)).Elem()
}

func (o ProjectConnectorsEightByEightViberOutput) ToProjectConnectorsEightByEightViberOutput() ProjectConnectorsEightByEightViberOutput {
	return o
}

func (o ProjectConnectorsEightByEightViberOutput) ToProjectConnectorsEightByEightViberOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightViberOutput {
	return o
}

// The 8x8 API key for authentication.
func (o ProjectConnectorsEightByEightViberOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The country code or region where your Viber messaging service is configured.
func (o ProjectConnectorsEightByEightViberOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsEightByEightViberOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsEightByEightViberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsEightByEightViberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) string { return v.Name }).(pulumi.StringOutput)
}

// The 8x8 sub-account ID is required for the Messaging API.
func (o ProjectConnectorsEightByEightViberOutput) SubAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) string { return v.SubAccountId }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsEightByEightViberOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightViber) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsEightByEightViberArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsEightByEightViberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsEightByEightViber)(nil)).Elem()
}

func (o ProjectConnectorsEightByEightViberArrayOutput) ToProjectConnectorsEightByEightViberArrayOutput() ProjectConnectorsEightByEightViberArrayOutput {
	return o
}

func (o ProjectConnectorsEightByEightViberArrayOutput) ToProjectConnectorsEightByEightViberArrayOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightViberArrayOutput {
	return o
}

func (o ProjectConnectorsEightByEightViberArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsEightByEightViberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsEightByEightViber {
		return vs[0].([]ProjectConnectorsEightByEightViber)[vs[1].(int)]
	}).(ProjectConnectorsEightByEightViberOutput)
}

type ProjectConnectorsEightByEightWhatsapp struct {
	// The 8x8 API key for authentication.
	ApiKey string `pulumi:"apiKey"`
	// The country code or region where your Viber messaging service is configured.
	Country *string `pulumi:"country"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The 8x8 sub-account ID is required for the Messaging API.
	SubAccountId string `pulumi:"subAccountId"`
	// The ID of a WhatsApp message template.
	TemplateId string `pulumi:"templateId"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsEightByEightWhatsappInput is an input type that accepts ProjectConnectorsEightByEightWhatsappArgs and ProjectConnectorsEightByEightWhatsappOutput values.
// You can construct a concrete instance of `ProjectConnectorsEightByEightWhatsappInput` via:
//
//	ProjectConnectorsEightByEightWhatsappArgs{...}
type ProjectConnectorsEightByEightWhatsappInput interface {
	pulumi.Input

	ToProjectConnectorsEightByEightWhatsappOutput() ProjectConnectorsEightByEightWhatsappOutput
	ToProjectConnectorsEightByEightWhatsappOutputWithContext(context.Context) ProjectConnectorsEightByEightWhatsappOutput
}

type ProjectConnectorsEightByEightWhatsappArgs struct {
	// The 8x8 API key for authentication.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The country code or region where your Viber messaging service is configured.
	Country pulumi.StringPtrInput `pulumi:"country"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The 8x8 sub-account ID is required for the Messaging API.
	SubAccountId pulumi.StringInput `pulumi:"subAccountId"`
	// The ID of a WhatsApp message template.
	TemplateId pulumi.StringInput `pulumi:"templateId"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsEightByEightWhatsappArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsEightByEightWhatsapp)(nil)).Elem()
}

func (i ProjectConnectorsEightByEightWhatsappArgs) ToProjectConnectorsEightByEightWhatsappOutput() ProjectConnectorsEightByEightWhatsappOutput {
	return i.ToProjectConnectorsEightByEightWhatsappOutputWithContext(context.Background())
}

func (i ProjectConnectorsEightByEightWhatsappArgs) ToProjectConnectorsEightByEightWhatsappOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightWhatsappOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsEightByEightWhatsappOutput)
}

// ProjectConnectorsEightByEightWhatsappArrayInput is an input type that accepts ProjectConnectorsEightByEightWhatsappArray and ProjectConnectorsEightByEightWhatsappArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsEightByEightWhatsappArrayInput` via:
//
//	ProjectConnectorsEightByEightWhatsappArray{ ProjectConnectorsEightByEightWhatsappArgs{...} }
type ProjectConnectorsEightByEightWhatsappArrayInput interface {
	pulumi.Input

	ToProjectConnectorsEightByEightWhatsappArrayOutput() ProjectConnectorsEightByEightWhatsappArrayOutput
	ToProjectConnectorsEightByEightWhatsappArrayOutputWithContext(context.Context) ProjectConnectorsEightByEightWhatsappArrayOutput
}

type ProjectConnectorsEightByEightWhatsappArray []ProjectConnectorsEightByEightWhatsappInput

func (ProjectConnectorsEightByEightWhatsappArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsEightByEightWhatsapp)(nil)).Elem()
}

func (i ProjectConnectorsEightByEightWhatsappArray) ToProjectConnectorsEightByEightWhatsappArrayOutput() ProjectConnectorsEightByEightWhatsappArrayOutput {
	return i.ToProjectConnectorsEightByEightWhatsappArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsEightByEightWhatsappArray) ToProjectConnectorsEightByEightWhatsappArrayOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightWhatsappArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsEightByEightWhatsappArrayOutput)
}

type ProjectConnectorsEightByEightWhatsappOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsEightByEightWhatsappOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsEightByEightWhatsapp)(nil)).Elem()
}

func (o ProjectConnectorsEightByEightWhatsappOutput) ToProjectConnectorsEightByEightWhatsappOutput() ProjectConnectorsEightByEightWhatsappOutput {
	return o
}

func (o ProjectConnectorsEightByEightWhatsappOutput) ToProjectConnectorsEightByEightWhatsappOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightWhatsappOutput {
	return o
}

// The 8x8 API key for authentication.
func (o ProjectConnectorsEightByEightWhatsappOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The country code or region where your Viber messaging service is configured.
func (o ProjectConnectorsEightByEightWhatsappOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsEightByEightWhatsappOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsEightByEightWhatsappOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsEightByEightWhatsappOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) string { return v.Name }).(pulumi.StringOutput)
}

// The 8x8 sub-account ID is required for the Messaging API.
func (o ProjectConnectorsEightByEightWhatsappOutput) SubAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) string { return v.SubAccountId }).(pulumi.StringOutput)
}

// The ID of a WhatsApp message template.
func (o ProjectConnectorsEightByEightWhatsappOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) string { return v.TemplateId }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsEightByEightWhatsappOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsEightByEightWhatsapp) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsEightByEightWhatsappArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsEightByEightWhatsappArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsEightByEightWhatsapp)(nil)).Elem()
}

func (o ProjectConnectorsEightByEightWhatsappArrayOutput) ToProjectConnectorsEightByEightWhatsappArrayOutput() ProjectConnectorsEightByEightWhatsappArrayOutput {
	return o
}

func (o ProjectConnectorsEightByEightWhatsappArrayOutput) ToProjectConnectorsEightByEightWhatsappArrayOutputWithContext(ctx context.Context) ProjectConnectorsEightByEightWhatsappArrayOutput {
	return o
}

func (o ProjectConnectorsEightByEightWhatsappArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsEightByEightWhatsappOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsEightByEightWhatsapp {
		return vs[0].([]ProjectConnectorsEightByEightWhatsapp)[vs[1].(int)]
	}).(ProjectConnectorsEightByEightWhatsappOutput)
}

type ProjectConnectorsElephant struct {
	// The Elephant access key.
	AccessKey string `pulumi:"accessKey"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsElephantInput is an input type that accepts ProjectConnectorsElephantArgs and ProjectConnectorsElephantOutput values.
// You can construct a concrete instance of `ProjectConnectorsElephantInput` via:
//
//	ProjectConnectorsElephantArgs{...}
type ProjectConnectorsElephantInput interface {
	pulumi.Input

	ToProjectConnectorsElephantOutput() ProjectConnectorsElephantOutput
	ToProjectConnectorsElephantOutputWithContext(context.Context) ProjectConnectorsElephantOutput
}

type ProjectConnectorsElephantArgs struct {
	// The Elephant access key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsElephantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsElephant)(nil)).Elem()
}

func (i ProjectConnectorsElephantArgs) ToProjectConnectorsElephantOutput() ProjectConnectorsElephantOutput {
	return i.ToProjectConnectorsElephantOutputWithContext(context.Background())
}

func (i ProjectConnectorsElephantArgs) ToProjectConnectorsElephantOutputWithContext(ctx context.Context) ProjectConnectorsElephantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsElephantOutput)
}

// ProjectConnectorsElephantArrayInput is an input type that accepts ProjectConnectorsElephantArray and ProjectConnectorsElephantArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsElephantArrayInput` via:
//
//	ProjectConnectorsElephantArray{ ProjectConnectorsElephantArgs{...} }
type ProjectConnectorsElephantArrayInput interface {
	pulumi.Input

	ToProjectConnectorsElephantArrayOutput() ProjectConnectorsElephantArrayOutput
	ToProjectConnectorsElephantArrayOutputWithContext(context.Context) ProjectConnectorsElephantArrayOutput
}

type ProjectConnectorsElephantArray []ProjectConnectorsElephantInput

func (ProjectConnectorsElephantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsElephant)(nil)).Elem()
}

func (i ProjectConnectorsElephantArray) ToProjectConnectorsElephantArrayOutput() ProjectConnectorsElephantArrayOutput {
	return i.ToProjectConnectorsElephantArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsElephantArray) ToProjectConnectorsElephantArrayOutputWithContext(ctx context.Context) ProjectConnectorsElephantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsElephantArrayOutput)
}

type ProjectConnectorsElephantOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsElephantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsElephant)(nil)).Elem()
}

func (o ProjectConnectorsElephantOutput) ToProjectConnectorsElephantOutput() ProjectConnectorsElephantOutput {
	return o
}

func (o ProjectConnectorsElephantOutput) ToProjectConnectorsElephantOutputWithContext(ctx context.Context) ProjectConnectorsElephantOutput {
	return o
}

// The Elephant access key.
func (o ProjectConnectorsElephantOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsElephant) string { return v.AccessKey }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsElephantOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsElephant) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsElephantOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsElephant) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsElephantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsElephant) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsElephantArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsElephantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsElephant)(nil)).Elem()
}

func (o ProjectConnectorsElephantArrayOutput) ToProjectConnectorsElephantArrayOutput() ProjectConnectorsElephantArrayOutput {
	return o
}

func (o ProjectConnectorsElephantArrayOutput) ToProjectConnectorsElephantArrayOutputWithContext(ctx context.Context) ProjectConnectorsElephantArrayOutput {
	return o
}

func (o ProjectConnectorsElephantArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsElephantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsElephant {
		return vs[0].([]ProjectConnectorsElephant)[vs[1].(int)]
	}).(ProjectConnectorsElephantOutput)
}

type ProjectConnectorsExternalTokenHttp struct {
	// Authentication Information
	Authentication *ProjectConnectorsExternalTokenHttpAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The endpoint to get the token from (Using POST method). Descope will send the user information in the body of the request, and should return a JSON response with a 'token' string field.
	Endpoint string `pulumi:"endpoint"`
	// The headers to send with the request
	Headers map[string]string `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret *string `pulumi:"hmacSecret"`
	Id         *string `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure *bool `pulumi:"insecure"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsExternalTokenHttpInput is an input type that accepts ProjectConnectorsExternalTokenHttpArgs and ProjectConnectorsExternalTokenHttpOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpInput` via:
//
//	ProjectConnectorsExternalTokenHttpArgs{...}
type ProjectConnectorsExternalTokenHttpInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpOutput() ProjectConnectorsExternalTokenHttpOutput
	ToProjectConnectorsExternalTokenHttpOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpOutput
}

type ProjectConnectorsExternalTokenHttpArgs struct {
	// Authentication Information
	Authentication ProjectConnectorsExternalTokenHttpAuthenticationPtrInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The endpoint to get the token from (Using POST method). Descope will send the user information in the body of the request, and should return a JSON response with a 'token' string field.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The headers to send with the request
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret pulumi.StringPtrInput `pulumi:"hmacSecret"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsExternalTokenHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttp)(nil)).Elem()
}

func (i ProjectConnectorsExternalTokenHttpArgs) ToProjectConnectorsExternalTokenHttpOutput() ProjectConnectorsExternalTokenHttpOutput {
	return i.ToProjectConnectorsExternalTokenHttpOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpArgs) ToProjectConnectorsExternalTokenHttpOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpOutput)
}

// ProjectConnectorsExternalTokenHttpArrayInput is an input type that accepts ProjectConnectorsExternalTokenHttpArray and ProjectConnectorsExternalTokenHttpArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpArrayInput` via:
//
//	ProjectConnectorsExternalTokenHttpArray{ ProjectConnectorsExternalTokenHttpArgs{...} }
type ProjectConnectorsExternalTokenHttpArrayInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpArrayOutput() ProjectConnectorsExternalTokenHttpArrayOutput
	ToProjectConnectorsExternalTokenHttpArrayOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpArrayOutput
}

type ProjectConnectorsExternalTokenHttpArray []ProjectConnectorsExternalTokenHttpInput

func (ProjectConnectorsExternalTokenHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsExternalTokenHttp)(nil)).Elem()
}

func (i ProjectConnectorsExternalTokenHttpArray) ToProjectConnectorsExternalTokenHttpArrayOutput() ProjectConnectorsExternalTokenHttpArrayOutput {
	return i.ToProjectConnectorsExternalTokenHttpArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpArray) ToProjectConnectorsExternalTokenHttpArrayOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpArrayOutput)
}

type ProjectConnectorsExternalTokenHttpOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttp)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpOutput) ToProjectConnectorsExternalTokenHttpOutput() ProjectConnectorsExternalTokenHttpOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpOutput) ToProjectConnectorsExternalTokenHttpOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpOutput {
	return o
}

// Authentication Information
func (o ProjectConnectorsExternalTokenHttpOutput) Authentication() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *ProjectConnectorsExternalTokenHttpAuthentication {
		return v.Authentication
	}).(ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsExternalTokenHttpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint to get the token from (Using POST method). Descope will send the user information in the body of the request, and should return a JSON response with a 'token' string field.
func (o ProjectConnectorsExternalTokenHttpOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The headers to send with the request
func (o ProjectConnectorsExternalTokenHttpOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
func (o ProjectConnectorsExternalTokenHttpOutput) HmacSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *string { return v.HmacSecret }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsExternalTokenHttpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Will ignore certificate errors raised by the client
func (o ProjectConnectorsExternalTokenHttpOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsExternalTokenHttpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsExternalTokenHttpOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttp) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsExternalTokenHttpArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsExternalTokenHttp)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpArrayOutput) ToProjectConnectorsExternalTokenHttpArrayOutput() ProjectConnectorsExternalTokenHttpArrayOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpArrayOutput) ToProjectConnectorsExternalTokenHttpArrayOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpArrayOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsExternalTokenHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsExternalTokenHttp {
		return vs[0].([]ProjectConnectorsExternalTokenHttp)[vs[1].(int)]
	}).(ProjectConnectorsExternalTokenHttpOutput)
}

type ProjectConnectorsExternalTokenHttpAuthentication struct {
	// API key authentication configuration.
	ApiKey *ProjectConnectorsExternalTokenHttpAuthenticationApiKey `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic *ProjectConnectorsExternalTokenHttpAuthenticationBasic `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken *string `pulumi:"bearerToken"`
}

// ProjectConnectorsExternalTokenHttpAuthenticationInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationArgs and ProjectConnectorsExternalTokenHttpAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationInput` via:
//
//	ProjectConnectorsExternalTokenHttpAuthenticationArgs{...}
type ProjectConnectorsExternalTokenHttpAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationOutput() ProjectConnectorsExternalTokenHttpAuthenticationOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationOutput
}

type ProjectConnectorsExternalTokenHttpAuthenticationArgs struct {
	// API key authentication configuration.
	ApiKey ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
}

func (ProjectConnectorsExternalTokenHttpAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationArgs) ToProjectConnectorsExternalTokenHttpAuthenticationOutput() ProjectConnectorsExternalTokenHttpAuthenticationOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationArgs) ToProjectConnectorsExternalTokenHttpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationOutput)
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationArgs) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationArgs) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationOutput).ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(ctx)
}

// ProjectConnectorsExternalTokenHttpAuthenticationPtrInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationArgs, ProjectConnectorsExternalTokenHttpAuthenticationPtr and ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationPtrInput` via:
//
//	        ProjectConnectorsExternalTokenHttpAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsExternalTokenHttpAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput
}

type projectConnectorsExternalTokenHttpAuthenticationPtrType ProjectConnectorsExternalTokenHttpAuthenticationArgs

func ProjectConnectorsExternalTokenHttpAuthenticationPtr(v *ProjectConnectorsExternalTokenHttpAuthenticationArgs) ProjectConnectorsExternalTokenHttpAuthenticationPtrInput {
	return (*projectConnectorsExternalTokenHttpAuthenticationPtrType)(v)
}

func (*projectConnectorsExternalTokenHttpAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthentication)(nil)).Elem()
}

func (i *projectConnectorsExternalTokenHttpAuthenticationPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsExternalTokenHttpAuthenticationPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) ToProjectConnectorsExternalTokenHttpAuthenticationOutput() ProjectConnectorsExternalTokenHttpAuthenticationOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) ToProjectConnectorsExternalTokenHttpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return o.ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsExternalTokenHttpAuthentication) *ProjectConnectorsExternalTokenHttpAuthentication {
		return &v
	}).(ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) ApiKey() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthentication) *ProjectConnectorsExternalTokenHttpAuthenticationApiKey {
		return v.ApiKey
	}).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) Basic() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthentication) *ProjectConnectorsExternalTokenHttpAuthenticationBasic {
		return v.Basic
	}).(ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthentication) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) Elem() ProjectConnectorsExternalTokenHttpAuthenticationOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthentication) ProjectConnectorsExternalTokenHttpAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsExternalTokenHttpAuthentication
		return ret
	}).(ProjectConnectorsExternalTokenHttpAuthenticationOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) ApiKey() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthentication) *ProjectConnectorsExternalTokenHttpAuthenticationApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) Basic() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthentication) *ProjectConnectorsExternalTokenHttpAuthenticationBasic {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationApiKey struct {
	// The API key.
	Key string `pulumi:"key"`
	// The API secret.
	Token string `pulumi:"token"`
}

// ProjectConnectorsExternalTokenHttpAuthenticationApiKeyInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs and ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationApiKeyInput` via:
//
//	ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs{...}
type ProjectConnectorsExternalTokenHttpAuthenticationApiKeyInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput
}

type ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs struct {
	// The API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The API secret.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationApiKey)(nil)).Elem()
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput)
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput).ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(ctx)
}

// ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs, ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtr and ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput` via:
//
//	        ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput
}

type projectConnectorsExternalTokenHttpAuthenticationApiKeyPtrType ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs

func ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtr(v *ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput {
	return (*projectConnectorsExternalTokenHttpAuthenticationApiKeyPtrType)(v)
}

func (*projectConnectorsExternalTokenHttpAuthenticationApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthenticationApiKey)(nil)).Elem()
}

func (i *projectConnectorsExternalTokenHttpAuthenticationApiKeyPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsExternalTokenHttpAuthenticationApiKeyPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o.ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsExternalTokenHttpAuthenticationApiKey) *ProjectConnectorsExternalTokenHttpAuthenticationApiKey {
		return &v
	}).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput)
}

// The API key.
func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthenticationApiKey) string { return v.Key }).(pulumi.StringOutput)
}

// The API secret.
func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthenticationApiKey) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) Elem() ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationApiKey) ProjectConnectorsExternalTokenHttpAuthenticationApiKey {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsExternalTokenHttpAuthenticationApiKey
		return ret
	}).(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput)
}

// The API key.
func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The API secret.
func (o ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationBasic struct {
	// Password for basic HTTP authentication.
	Password string `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsExternalTokenHttpAuthenticationBasicInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs and ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationBasicInput` via:
//
//	ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs{...}
type ProjectConnectorsExternalTokenHttpAuthenticationBasicInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput
}

type ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs struct {
	// Password for basic HTTP authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationBasic)(nil)).Elem()
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput)
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput).ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(ctx)
}

// ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput is an input type that accepts ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs, ProjectConnectorsExternalTokenHttpAuthenticationBasicPtr and ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput` via:
//
//	        ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput interface {
	pulumi.Input

	ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput
	ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput
}

type projectConnectorsExternalTokenHttpAuthenticationBasicPtrType ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs

func ProjectConnectorsExternalTokenHttpAuthenticationBasicPtr(v *ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput {
	return (*projectConnectorsExternalTokenHttpAuthenticationBasicPtrType)(v)
}

func (*projectConnectorsExternalTokenHttpAuthenticationBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthenticationBasic)(nil)).Elem()
}

func (i *projectConnectorsExternalTokenHttpAuthenticationBasicPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsExternalTokenHttpAuthenticationBasicPtrType) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o.ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsExternalTokenHttpAuthenticationBasic) *ProjectConnectorsExternalTokenHttpAuthenticationBasic {
		return &v
	}).(ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthenticationBasic) string { return v.Password }).(pulumi.StringOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsExternalTokenHttpAuthenticationBasic) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsExternalTokenHttpAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput() ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) ToProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) Elem() ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationBasic) ProjectConnectorsExternalTokenHttpAuthenticationBasic {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsExternalTokenHttpAuthenticationBasic
		return ret
	}).(ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsExternalTokenHttpAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsFingerprint struct {
	// The Cloudflare integration Endpoint URL.
	CloudflareEndpointUrl *string `pulumi:"cloudflareEndpointUrl"`
	// The Cloudflare integration Script URL.
	CloudflareScriptUrl *string `pulumi:"cloudflareScriptUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Fingerprint public API key.
	PublicApiKey string `pulumi:"publicApiKey"`
	// The Fingerprint secret API key.
	SecretApiKey string `pulumi:"secretApiKey"`
	// Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
	UseCloudflareIntegration *bool `pulumi:"useCloudflareIntegration"`
}

// ProjectConnectorsFingerprintInput is an input type that accepts ProjectConnectorsFingerprintArgs and ProjectConnectorsFingerprintOutput values.
// You can construct a concrete instance of `ProjectConnectorsFingerprintInput` via:
//
//	ProjectConnectorsFingerprintArgs{...}
type ProjectConnectorsFingerprintInput interface {
	pulumi.Input

	ToProjectConnectorsFingerprintOutput() ProjectConnectorsFingerprintOutput
	ToProjectConnectorsFingerprintOutputWithContext(context.Context) ProjectConnectorsFingerprintOutput
}

type ProjectConnectorsFingerprintArgs struct {
	// The Cloudflare integration Endpoint URL.
	CloudflareEndpointUrl pulumi.StringPtrInput `pulumi:"cloudflareEndpointUrl"`
	// The Cloudflare integration Script URL.
	CloudflareScriptUrl pulumi.StringPtrInput `pulumi:"cloudflareScriptUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Fingerprint public API key.
	PublicApiKey pulumi.StringInput `pulumi:"publicApiKey"`
	// The Fingerprint secret API key.
	SecretApiKey pulumi.StringInput `pulumi:"secretApiKey"`
	// Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
	UseCloudflareIntegration pulumi.BoolPtrInput `pulumi:"useCloudflareIntegration"`
}

func (ProjectConnectorsFingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFingerprint)(nil)).Elem()
}

func (i ProjectConnectorsFingerprintArgs) ToProjectConnectorsFingerprintOutput() ProjectConnectorsFingerprintOutput {
	return i.ToProjectConnectorsFingerprintOutputWithContext(context.Background())
}

func (i ProjectConnectorsFingerprintArgs) ToProjectConnectorsFingerprintOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFingerprintOutput)
}

// ProjectConnectorsFingerprintArrayInput is an input type that accepts ProjectConnectorsFingerprintArray and ProjectConnectorsFingerprintArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsFingerprintArrayInput` via:
//
//	ProjectConnectorsFingerprintArray{ ProjectConnectorsFingerprintArgs{...} }
type ProjectConnectorsFingerprintArrayInput interface {
	pulumi.Input

	ToProjectConnectorsFingerprintArrayOutput() ProjectConnectorsFingerprintArrayOutput
	ToProjectConnectorsFingerprintArrayOutputWithContext(context.Context) ProjectConnectorsFingerprintArrayOutput
}

type ProjectConnectorsFingerprintArray []ProjectConnectorsFingerprintInput

func (ProjectConnectorsFingerprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFingerprint)(nil)).Elem()
}

func (i ProjectConnectorsFingerprintArray) ToProjectConnectorsFingerprintArrayOutput() ProjectConnectorsFingerprintArrayOutput {
	return i.ToProjectConnectorsFingerprintArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsFingerprintArray) ToProjectConnectorsFingerprintArrayOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFingerprintArrayOutput)
}

type ProjectConnectorsFingerprintOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFingerprint)(nil)).Elem()
}

func (o ProjectConnectorsFingerprintOutput) ToProjectConnectorsFingerprintOutput() ProjectConnectorsFingerprintOutput {
	return o
}

func (o ProjectConnectorsFingerprintOutput) ToProjectConnectorsFingerprintOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintOutput {
	return o
}

// The Cloudflare integration Endpoint URL.
func (o ProjectConnectorsFingerprintOutput) CloudflareEndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) *string { return v.CloudflareEndpointUrl }).(pulumi.StringPtrOutput)
}

// The Cloudflare integration Script URL.
func (o ProjectConnectorsFingerprintOutput) CloudflareScriptUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) *string { return v.CloudflareScriptUrl }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsFingerprintOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsFingerprintOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsFingerprintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) string { return v.Name }).(pulumi.StringOutput)
}

// The Fingerprint public API key.
func (o ProjectConnectorsFingerprintOutput) PublicApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) string { return v.PublicApiKey }).(pulumi.StringOutput)
}

// The Fingerprint secret API key.
func (o ProjectConnectorsFingerprintOutput) SecretApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) string { return v.SecretApiKey }).(pulumi.StringOutput)
}

// Enable to configure the relevant Cloudflare integration parameters if Cloudflare integration is set in your Fingerprint account.
func (o ProjectConnectorsFingerprintOutput) UseCloudflareIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprint) *bool { return v.UseCloudflareIntegration }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsFingerprintArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFingerprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFingerprint)(nil)).Elem()
}

func (o ProjectConnectorsFingerprintArrayOutput) ToProjectConnectorsFingerprintArrayOutput() ProjectConnectorsFingerprintArrayOutput {
	return o
}

func (o ProjectConnectorsFingerprintArrayOutput) ToProjectConnectorsFingerprintArrayOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintArrayOutput {
	return o
}

func (o ProjectConnectorsFingerprintArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsFingerprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsFingerprint {
		return vs[0].([]ProjectConnectorsFingerprint)[vs[1].(int)]
	}).(ProjectConnectorsFingerprintOutput)
}

type ProjectConnectorsFingerprintDescope struct {
	// The custom domain to fetch
	CustomDomain *string `pulumi:"customDomain"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsFingerprintDescopeInput is an input type that accepts ProjectConnectorsFingerprintDescopeArgs and ProjectConnectorsFingerprintDescopeOutput values.
// You can construct a concrete instance of `ProjectConnectorsFingerprintDescopeInput` via:
//
//	ProjectConnectorsFingerprintDescopeArgs{...}
type ProjectConnectorsFingerprintDescopeInput interface {
	pulumi.Input

	ToProjectConnectorsFingerprintDescopeOutput() ProjectConnectorsFingerprintDescopeOutput
	ToProjectConnectorsFingerprintDescopeOutputWithContext(context.Context) ProjectConnectorsFingerprintDescopeOutput
}

type ProjectConnectorsFingerprintDescopeArgs struct {
	// The custom domain to fetch
	CustomDomain pulumi.StringPtrInput `pulumi:"customDomain"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsFingerprintDescopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFingerprintDescope)(nil)).Elem()
}

func (i ProjectConnectorsFingerprintDescopeArgs) ToProjectConnectorsFingerprintDescopeOutput() ProjectConnectorsFingerprintDescopeOutput {
	return i.ToProjectConnectorsFingerprintDescopeOutputWithContext(context.Background())
}

func (i ProjectConnectorsFingerprintDescopeArgs) ToProjectConnectorsFingerprintDescopeOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintDescopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFingerprintDescopeOutput)
}

// ProjectConnectorsFingerprintDescopeArrayInput is an input type that accepts ProjectConnectorsFingerprintDescopeArray and ProjectConnectorsFingerprintDescopeArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsFingerprintDescopeArrayInput` via:
//
//	ProjectConnectorsFingerprintDescopeArray{ ProjectConnectorsFingerprintDescopeArgs{...} }
type ProjectConnectorsFingerprintDescopeArrayInput interface {
	pulumi.Input

	ToProjectConnectorsFingerprintDescopeArrayOutput() ProjectConnectorsFingerprintDescopeArrayOutput
	ToProjectConnectorsFingerprintDescopeArrayOutputWithContext(context.Context) ProjectConnectorsFingerprintDescopeArrayOutput
}

type ProjectConnectorsFingerprintDescopeArray []ProjectConnectorsFingerprintDescopeInput

func (ProjectConnectorsFingerprintDescopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFingerprintDescope)(nil)).Elem()
}

func (i ProjectConnectorsFingerprintDescopeArray) ToProjectConnectorsFingerprintDescopeArrayOutput() ProjectConnectorsFingerprintDescopeArrayOutput {
	return i.ToProjectConnectorsFingerprintDescopeArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsFingerprintDescopeArray) ToProjectConnectorsFingerprintDescopeArrayOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintDescopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFingerprintDescopeArrayOutput)
}

type ProjectConnectorsFingerprintDescopeOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFingerprintDescopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFingerprintDescope)(nil)).Elem()
}

func (o ProjectConnectorsFingerprintDescopeOutput) ToProjectConnectorsFingerprintDescopeOutput() ProjectConnectorsFingerprintDescopeOutput {
	return o
}

func (o ProjectConnectorsFingerprintDescopeOutput) ToProjectConnectorsFingerprintDescopeOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintDescopeOutput {
	return o
}

// The custom domain to fetch
func (o ProjectConnectorsFingerprintDescopeOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprintDescope) *string { return v.CustomDomain }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsFingerprintDescopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprintDescope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsFingerprintDescopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprintDescope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsFingerprintDescopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFingerprintDescope) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsFingerprintDescopeArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFingerprintDescopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFingerprintDescope)(nil)).Elem()
}

func (o ProjectConnectorsFingerprintDescopeArrayOutput) ToProjectConnectorsFingerprintDescopeArrayOutput() ProjectConnectorsFingerprintDescopeArrayOutput {
	return o
}

func (o ProjectConnectorsFingerprintDescopeArrayOutput) ToProjectConnectorsFingerprintDescopeArrayOutputWithContext(ctx context.Context) ProjectConnectorsFingerprintDescopeArrayOutput {
	return o
}

func (o ProjectConnectorsFingerprintDescopeArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsFingerprintDescopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsFingerprintDescope {
		return vs[0].([]ProjectConnectorsFingerprintDescope)[vs[1].(int)]
	}).(ProjectConnectorsFingerprintDescopeOutput)
}

type ProjectConnectorsFirebaseAdmin struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Firebase service account JSON.
	ServiceAccount string `pulumi:"serviceAccount"`
}

// ProjectConnectorsFirebaseAdminInput is an input type that accepts ProjectConnectorsFirebaseAdminArgs and ProjectConnectorsFirebaseAdminOutput values.
// You can construct a concrete instance of `ProjectConnectorsFirebaseAdminInput` via:
//
//	ProjectConnectorsFirebaseAdminArgs{...}
type ProjectConnectorsFirebaseAdminInput interface {
	pulumi.Input

	ToProjectConnectorsFirebaseAdminOutput() ProjectConnectorsFirebaseAdminOutput
	ToProjectConnectorsFirebaseAdminOutputWithContext(context.Context) ProjectConnectorsFirebaseAdminOutput
}

type ProjectConnectorsFirebaseAdminArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Firebase service account JSON.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
}

func (ProjectConnectorsFirebaseAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFirebaseAdmin)(nil)).Elem()
}

func (i ProjectConnectorsFirebaseAdminArgs) ToProjectConnectorsFirebaseAdminOutput() ProjectConnectorsFirebaseAdminOutput {
	return i.ToProjectConnectorsFirebaseAdminOutputWithContext(context.Background())
}

func (i ProjectConnectorsFirebaseAdminArgs) ToProjectConnectorsFirebaseAdminOutputWithContext(ctx context.Context) ProjectConnectorsFirebaseAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFirebaseAdminOutput)
}

// ProjectConnectorsFirebaseAdminArrayInput is an input type that accepts ProjectConnectorsFirebaseAdminArray and ProjectConnectorsFirebaseAdminArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsFirebaseAdminArrayInput` via:
//
//	ProjectConnectorsFirebaseAdminArray{ ProjectConnectorsFirebaseAdminArgs{...} }
type ProjectConnectorsFirebaseAdminArrayInput interface {
	pulumi.Input

	ToProjectConnectorsFirebaseAdminArrayOutput() ProjectConnectorsFirebaseAdminArrayOutput
	ToProjectConnectorsFirebaseAdminArrayOutputWithContext(context.Context) ProjectConnectorsFirebaseAdminArrayOutput
}

type ProjectConnectorsFirebaseAdminArray []ProjectConnectorsFirebaseAdminInput

func (ProjectConnectorsFirebaseAdminArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFirebaseAdmin)(nil)).Elem()
}

func (i ProjectConnectorsFirebaseAdminArray) ToProjectConnectorsFirebaseAdminArrayOutput() ProjectConnectorsFirebaseAdminArrayOutput {
	return i.ToProjectConnectorsFirebaseAdminArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsFirebaseAdminArray) ToProjectConnectorsFirebaseAdminArrayOutputWithContext(ctx context.Context) ProjectConnectorsFirebaseAdminArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsFirebaseAdminArrayOutput)
}

type ProjectConnectorsFirebaseAdminOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFirebaseAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsFirebaseAdmin)(nil)).Elem()
}

func (o ProjectConnectorsFirebaseAdminOutput) ToProjectConnectorsFirebaseAdminOutput() ProjectConnectorsFirebaseAdminOutput {
	return o
}

func (o ProjectConnectorsFirebaseAdminOutput) ToProjectConnectorsFirebaseAdminOutputWithContext(ctx context.Context) ProjectConnectorsFirebaseAdminOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsFirebaseAdminOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFirebaseAdmin) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsFirebaseAdminOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsFirebaseAdmin) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsFirebaseAdminOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFirebaseAdmin) string { return v.Name }).(pulumi.StringOutput)
}

// The Firebase service account JSON.
func (o ProjectConnectorsFirebaseAdminOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsFirebaseAdmin) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

type ProjectConnectorsFirebaseAdminArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsFirebaseAdminArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsFirebaseAdmin)(nil)).Elem()
}

func (o ProjectConnectorsFirebaseAdminArrayOutput) ToProjectConnectorsFirebaseAdminArrayOutput() ProjectConnectorsFirebaseAdminArrayOutput {
	return o
}

func (o ProjectConnectorsFirebaseAdminArrayOutput) ToProjectConnectorsFirebaseAdminArrayOutputWithContext(ctx context.Context) ProjectConnectorsFirebaseAdminArrayOutput {
	return o
}

func (o ProjectConnectorsFirebaseAdminArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsFirebaseAdminOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsFirebaseAdmin {
		return vs[0].([]ProjectConnectorsFirebaseAdmin)[vs[1].(int)]
	}).(ProjectConnectorsFirebaseAdminOutput)
}

type ProjectConnectorsForter struct {
	// The Forter API version.
	ApiVersion *string `pulumi:"apiVersion"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Override the user IP address.
	OverrideIpAddress *string `pulumi:"overrideIpAddress"`
	// Override the user email.
	OverrideUserEmail *string `pulumi:"overrideUserEmail"`
	// Override the user's IP address or email so that Forter can provide a specific decision or recommendation. Contact the Forter team for further details. Note: Overriding the user IP address or email is intended for testing purpose and should not be utilized in production environments.
	Overrides *bool `pulumi:"overrides"`
	// The Forter secret key.
	SecretKey string `pulumi:"secretKey"`
	// The Forter site ID.
	SiteId string `pulumi:"siteId"`
}

// ProjectConnectorsForterInput is an input type that accepts ProjectConnectorsForterArgs and ProjectConnectorsForterOutput values.
// You can construct a concrete instance of `ProjectConnectorsForterInput` via:
//
//	ProjectConnectorsForterArgs{...}
type ProjectConnectorsForterInput interface {
	pulumi.Input

	ToProjectConnectorsForterOutput() ProjectConnectorsForterOutput
	ToProjectConnectorsForterOutputWithContext(context.Context) ProjectConnectorsForterOutput
}

type ProjectConnectorsForterArgs struct {
	// The Forter API version.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Override the user IP address.
	OverrideIpAddress pulumi.StringPtrInput `pulumi:"overrideIpAddress"`
	// Override the user email.
	OverrideUserEmail pulumi.StringPtrInput `pulumi:"overrideUserEmail"`
	// Override the user's IP address or email so that Forter can provide a specific decision or recommendation. Contact the Forter team for further details. Note: Overriding the user IP address or email is intended for testing purpose and should not be utilized in production environments.
	Overrides pulumi.BoolPtrInput `pulumi:"overrides"`
	// The Forter secret key.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Forter site ID.
	SiteId pulumi.StringInput `pulumi:"siteId"`
}

func (ProjectConnectorsForterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsForter)(nil)).Elem()
}

func (i ProjectConnectorsForterArgs) ToProjectConnectorsForterOutput() ProjectConnectorsForterOutput {
	return i.ToProjectConnectorsForterOutputWithContext(context.Background())
}

func (i ProjectConnectorsForterArgs) ToProjectConnectorsForterOutputWithContext(ctx context.Context) ProjectConnectorsForterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsForterOutput)
}

// ProjectConnectorsForterArrayInput is an input type that accepts ProjectConnectorsForterArray and ProjectConnectorsForterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsForterArrayInput` via:
//
//	ProjectConnectorsForterArray{ ProjectConnectorsForterArgs{...} }
type ProjectConnectorsForterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsForterArrayOutput() ProjectConnectorsForterArrayOutput
	ToProjectConnectorsForterArrayOutputWithContext(context.Context) ProjectConnectorsForterArrayOutput
}

type ProjectConnectorsForterArray []ProjectConnectorsForterInput

func (ProjectConnectorsForterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsForter)(nil)).Elem()
}

func (i ProjectConnectorsForterArray) ToProjectConnectorsForterArrayOutput() ProjectConnectorsForterArrayOutput {
	return i.ToProjectConnectorsForterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsForterArray) ToProjectConnectorsForterArrayOutputWithContext(ctx context.Context) ProjectConnectorsForterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsForterArrayOutput)
}

type ProjectConnectorsForterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsForterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsForter)(nil)).Elem()
}

func (o ProjectConnectorsForterOutput) ToProjectConnectorsForterOutput() ProjectConnectorsForterOutput {
	return o
}

func (o ProjectConnectorsForterOutput) ToProjectConnectorsForterOutputWithContext(ctx context.Context) ProjectConnectorsForterOutput {
	return o
}

// The Forter API version.
func (o ProjectConnectorsForterOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsForterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsForterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsForterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) string { return v.Name }).(pulumi.StringOutput)
}

// Override the user IP address.
func (o ProjectConnectorsForterOutput) OverrideIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *string { return v.OverrideIpAddress }).(pulumi.StringPtrOutput)
}

// Override the user email.
func (o ProjectConnectorsForterOutput) OverrideUserEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *string { return v.OverrideUserEmail }).(pulumi.StringPtrOutput)
}

// Override the user's IP address or email so that Forter can provide a specific decision or recommendation. Contact the Forter team for further details. Note: Overriding the user IP address or email is intended for testing purpose and should not be utilized in production environments.
func (o ProjectConnectorsForterOutput) Overrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) *bool { return v.Overrides }).(pulumi.BoolPtrOutput)
}

// The Forter secret key.
func (o ProjectConnectorsForterOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Forter site ID.
func (o ProjectConnectorsForterOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsForter) string { return v.SiteId }).(pulumi.StringOutput)
}

type ProjectConnectorsForterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsForterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsForter)(nil)).Elem()
}

func (o ProjectConnectorsForterArrayOutput) ToProjectConnectorsForterArrayOutput() ProjectConnectorsForterArrayOutput {
	return o
}

func (o ProjectConnectorsForterArrayOutput) ToProjectConnectorsForterArrayOutputWithContext(ctx context.Context) ProjectConnectorsForterArrayOutput {
	return o
}

func (o ProjectConnectorsForterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsForterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsForter {
		return vs[0].([]ProjectConnectorsForter)[vs[1].(int)]
	}).(ProjectConnectorsForterOutput)
}

type ProjectConnectorsGenericEmailGateway struct {
	// Authentication Information
	Authentication *ProjectConnectorsGenericEmailGatewayAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The headers to send with the request
	Headers map[string]string `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret *string `pulumi:"hmacSecret"`
	Id         *string `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure *bool `pulumi:"insecure"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The URL of the post email request
	PostUrl string `pulumi:"postUrl"`
	// The sender address
	Sender *string `pulumi:"sender"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsGenericEmailGatewayInput is an input type that accepts ProjectConnectorsGenericEmailGatewayArgs and ProjectConnectorsGenericEmailGatewayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayInput` via:
//
//	ProjectConnectorsGenericEmailGatewayArgs{...}
type ProjectConnectorsGenericEmailGatewayInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayOutput() ProjectConnectorsGenericEmailGatewayOutput
	ToProjectConnectorsGenericEmailGatewayOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayOutput
}

type ProjectConnectorsGenericEmailGatewayArgs struct {
	// Authentication Information
	Authentication ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The headers to send with the request
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret pulumi.StringPtrInput `pulumi:"hmacSecret"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the post email request
	PostUrl pulumi.StringInput `pulumi:"postUrl"`
	// The sender address
	Sender pulumi.StringPtrInput `pulumi:"sender"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsGenericEmailGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGateway)(nil)).Elem()
}

func (i ProjectConnectorsGenericEmailGatewayArgs) ToProjectConnectorsGenericEmailGatewayOutput() ProjectConnectorsGenericEmailGatewayOutput {
	return i.ToProjectConnectorsGenericEmailGatewayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayArgs) ToProjectConnectorsGenericEmailGatewayOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayOutput)
}

// ProjectConnectorsGenericEmailGatewayArrayInput is an input type that accepts ProjectConnectorsGenericEmailGatewayArray and ProjectConnectorsGenericEmailGatewayArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayArrayInput` via:
//
//	ProjectConnectorsGenericEmailGatewayArray{ ProjectConnectorsGenericEmailGatewayArgs{...} }
type ProjectConnectorsGenericEmailGatewayArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayArrayOutput() ProjectConnectorsGenericEmailGatewayArrayOutput
	ToProjectConnectorsGenericEmailGatewayArrayOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayArrayOutput
}

type ProjectConnectorsGenericEmailGatewayArray []ProjectConnectorsGenericEmailGatewayInput

func (ProjectConnectorsGenericEmailGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGenericEmailGateway)(nil)).Elem()
}

func (i ProjectConnectorsGenericEmailGatewayArray) ToProjectConnectorsGenericEmailGatewayArrayOutput() ProjectConnectorsGenericEmailGatewayArrayOutput {
	return i.ToProjectConnectorsGenericEmailGatewayArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayArray) ToProjectConnectorsGenericEmailGatewayArrayOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayArrayOutput)
}

type ProjectConnectorsGenericEmailGatewayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGateway)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayOutput) ToProjectConnectorsGenericEmailGatewayOutput() ProjectConnectorsGenericEmailGatewayOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayOutput) ToProjectConnectorsGenericEmailGatewayOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayOutput {
	return o
}

// Authentication Information
func (o ProjectConnectorsGenericEmailGatewayOutput) Authentication() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *ProjectConnectorsGenericEmailGatewayAuthentication {
		return v.Authentication
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsGenericEmailGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to send with the request
func (o ProjectConnectorsGenericEmailGatewayOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
func (o ProjectConnectorsGenericEmailGatewayOutput) HmacSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *string { return v.HmacSecret }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsGenericEmailGatewayOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Will ignore certificate errors raised by the client
func (o ProjectConnectorsGenericEmailGatewayOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsGenericEmailGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the post email request
func (o ProjectConnectorsGenericEmailGatewayOutput) PostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) string { return v.PostUrl }).(pulumi.StringOutput)
}

// The sender address
func (o ProjectConnectorsGenericEmailGatewayOutput) Sender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *string { return v.Sender }).(pulumi.StringPtrOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsGenericEmailGatewayOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGateway) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGenericEmailGateway)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayArrayOutput) ToProjectConnectorsGenericEmailGatewayArrayOutput() ProjectConnectorsGenericEmailGatewayArrayOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayArrayOutput) ToProjectConnectorsGenericEmailGatewayArrayOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayArrayOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGenericEmailGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGenericEmailGateway {
		return vs[0].([]ProjectConnectorsGenericEmailGateway)[vs[1].(int)]
	}).(ProjectConnectorsGenericEmailGatewayOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthentication struct {
	// API key authentication configuration.
	ApiKey *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic *ProjectConnectorsGenericEmailGatewayAuthenticationBasic `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken *string `pulumi:"bearerToken"`
}

// ProjectConnectorsGenericEmailGatewayAuthenticationInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationArgs and ProjectConnectorsGenericEmailGatewayAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationInput` via:
//
//	ProjectConnectorsGenericEmailGatewayAuthenticationArgs{...}
type ProjectConnectorsGenericEmailGatewayAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationOutput() ProjectConnectorsGenericEmailGatewayAuthenticationOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationOutput
}

type ProjectConnectorsGenericEmailGatewayAuthenticationArgs struct {
	// API key authentication configuration.
	ApiKey ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
}

func (ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationOutput() ProjectConnectorsGenericEmailGatewayAuthenticationOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationOutput)
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationOutput).ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationArgs, ProjectConnectorsGenericEmailGatewayAuthenticationPtr and ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput` via:
//
//	        ProjectConnectorsGenericEmailGatewayAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput
}

type projectConnectorsGenericEmailGatewayAuthenticationPtrType ProjectConnectorsGenericEmailGatewayAuthenticationArgs

func ProjectConnectorsGenericEmailGatewayAuthenticationPtr(v *ProjectConnectorsGenericEmailGatewayAuthenticationArgs) ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput {
	return (*projectConnectorsGenericEmailGatewayAuthenticationPtrType)(v)
}

func (*projectConnectorsGenericEmailGatewayAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthentication)(nil)).Elem()
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationOutput() ProjectConnectorsGenericEmailGatewayAuthenticationOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return o.ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericEmailGatewayAuthentication) *ProjectConnectorsGenericEmailGatewayAuthentication {
		return &v
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) ApiKey() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthentication) *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey {
		return v.ApiKey
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) Basic() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthentication) *ProjectConnectorsGenericEmailGatewayAuthenticationBasic {
		return v.Basic
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthentication) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) Elem() ProjectConnectorsGenericEmailGatewayAuthenticationOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthentication) ProjectConnectorsGenericEmailGatewayAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericEmailGatewayAuthentication
		return ret
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) ApiKey() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthentication) *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) Basic() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthentication) *ProjectConnectorsGenericEmailGatewayAuthenticationBasic {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationApiKey struct {
	// The API key.
	Key string `pulumi:"key"`
	// The API secret.
	Token string `pulumi:"token"`
}

// ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs and ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyInput` via:
//
//	ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs{...}
type ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput
}

type ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs struct {
	// The API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The API secret.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationApiKey)(nil)).Elem()
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput)
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput).ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs, ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtr and ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput` via:
//
//	        ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput
}

type projectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrType ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs

func ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtr(v *ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput {
	return (*projectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrType)(v)
}

func (*projectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthenticationApiKey)(nil)).Elem()
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o.ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey {
		return &v
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput)
}

// The API key.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) string { return v.Key }).(pulumi.StringOutput)
}

// The API secret.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) Elem() ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) ProjectConnectorsGenericEmailGatewayAuthenticationApiKey {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericEmailGatewayAuthenticationApiKey
		return ret
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput)
}

// The API key.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The API secret.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationBasic struct {
	// Password for basic HTTP authentication.
	Password string `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsGenericEmailGatewayAuthenticationBasicInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs and ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationBasicInput` via:
//
//	ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs{...}
type ProjectConnectorsGenericEmailGatewayAuthenticationBasicInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput
}

type ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs struct {
	// Password for basic HTTP authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationBasic)(nil)).Elem()
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput)
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput).ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput is an input type that accepts ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs, ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtr and ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput` via:
//
//	        ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput
	ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput
}

type projectConnectorsGenericEmailGatewayAuthenticationBasicPtrType ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs

func ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtr(v *ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput {
	return (*projectConnectorsGenericEmailGatewayAuthenticationBasicPtrType)(v)
}

func (*projectConnectorsGenericEmailGatewayAuthenticationBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthenticationBasic)(nil)).Elem()
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationBasicPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericEmailGatewayAuthenticationBasicPtrType) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o.ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericEmailGatewayAuthenticationBasic) *ProjectConnectorsGenericEmailGatewayAuthenticationBasic {
		return &v
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthenticationBasic) string { return v.Password }).(pulumi.StringOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericEmailGatewayAuthenticationBasic) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericEmailGatewayAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) ToProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) Elem() ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationBasic) ProjectConnectorsGenericEmailGatewayAuthenticationBasic {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericEmailGatewayAuthenticationBasic
		return ret
	}).(ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericEmailGatewayAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericSmsGateway struct {
	// Authentication Information
	Authentication *ProjectConnectorsGenericSmsGatewayAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The headers to send with the request
	Headers map[string]string `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret *string `pulumi:"hmacSecret"`
	Id         *string `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure *bool `pulumi:"insecure"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The URL of the post message request
	PostUrl string `pulumi:"postUrl"`
	// The sender number
	Sender *string `pulumi:"sender"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsGenericSmsGatewayInput is an input type that accepts ProjectConnectorsGenericSmsGatewayArgs and ProjectConnectorsGenericSmsGatewayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayInput` via:
//
//	ProjectConnectorsGenericSmsGatewayArgs{...}
type ProjectConnectorsGenericSmsGatewayInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayOutput() ProjectConnectorsGenericSmsGatewayOutput
	ToProjectConnectorsGenericSmsGatewayOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayOutput
}

type ProjectConnectorsGenericSmsGatewayArgs struct {
	// Authentication Information
	Authentication ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The headers to send with the request
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret pulumi.StringPtrInput `pulumi:"hmacSecret"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// Will ignore certificate errors raised by the client
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the post message request
	PostUrl pulumi.StringInput `pulumi:"postUrl"`
	// The sender number
	Sender pulumi.StringPtrInput `pulumi:"sender"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsGenericSmsGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGateway)(nil)).Elem()
}

func (i ProjectConnectorsGenericSmsGatewayArgs) ToProjectConnectorsGenericSmsGatewayOutput() ProjectConnectorsGenericSmsGatewayOutput {
	return i.ToProjectConnectorsGenericSmsGatewayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayArgs) ToProjectConnectorsGenericSmsGatewayOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayOutput)
}

// ProjectConnectorsGenericSmsGatewayArrayInput is an input type that accepts ProjectConnectorsGenericSmsGatewayArray and ProjectConnectorsGenericSmsGatewayArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayArrayInput` via:
//
//	ProjectConnectorsGenericSmsGatewayArray{ ProjectConnectorsGenericSmsGatewayArgs{...} }
type ProjectConnectorsGenericSmsGatewayArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayArrayOutput() ProjectConnectorsGenericSmsGatewayArrayOutput
	ToProjectConnectorsGenericSmsGatewayArrayOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayArrayOutput
}

type ProjectConnectorsGenericSmsGatewayArray []ProjectConnectorsGenericSmsGatewayInput

func (ProjectConnectorsGenericSmsGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGenericSmsGateway)(nil)).Elem()
}

func (i ProjectConnectorsGenericSmsGatewayArray) ToProjectConnectorsGenericSmsGatewayArrayOutput() ProjectConnectorsGenericSmsGatewayArrayOutput {
	return i.ToProjectConnectorsGenericSmsGatewayArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayArray) ToProjectConnectorsGenericSmsGatewayArrayOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayArrayOutput)
}

type ProjectConnectorsGenericSmsGatewayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGateway)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayOutput) ToProjectConnectorsGenericSmsGatewayOutput() ProjectConnectorsGenericSmsGatewayOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayOutput) ToProjectConnectorsGenericSmsGatewayOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayOutput {
	return o
}

// Authentication Information
func (o ProjectConnectorsGenericSmsGatewayOutput) Authentication() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *ProjectConnectorsGenericSmsGatewayAuthentication {
		return v.Authentication
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsGenericSmsGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to send with the request
func (o ProjectConnectorsGenericSmsGatewayOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
func (o ProjectConnectorsGenericSmsGatewayOutput) HmacSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *string { return v.HmacSecret }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsGenericSmsGatewayOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Will ignore certificate errors raised by the client
func (o ProjectConnectorsGenericSmsGatewayOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsGenericSmsGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the post message request
func (o ProjectConnectorsGenericSmsGatewayOutput) PostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) string { return v.PostUrl }).(pulumi.StringOutput)
}

// The sender number
func (o ProjectConnectorsGenericSmsGatewayOutput) Sender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *string { return v.Sender }).(pulumi.StringPtrOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsGenericSmsGatewayOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGateway) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGenericSmsGateway)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayArrayOutput) ToProjectConnectorsGenericSmsGatewayArrayOutput() ProjectConnectorsGenericSmsGatewayArrayOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayArrayOutput) ToProjectConnectorsGenericSmsGatewayArrayOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayArrayOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGenericSmsGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGenericSmsGateway {
		return vs[0].([]ProjectConnectorsGenericSmsGateway)[vs[1].(int)]
	}).(ProjectConnectorsGenericSmsGatewayOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthentication struct {
	// API key authentication configuration.
	ApiKey *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic *ProjectConnectorsGenericSmsGatewayAuthenticationBasic `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken *string `pulumi:"bearerToken"`
}

// ProjectConnectorsGenericSmsGatewayAuthenticationInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationArgs and ProjectConnectorsGenericSmsGatewayAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationInput` via:
//
//	ProjectConnectorsGenericSmsGatewayAuthenticationArgs{...}
type ProjectConnectorsGenericSmsGatewayAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationOutput() ProjectConnectorsGenericSmsGatewayAuthenticationOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationOutput
}

type ProjectConnectorsGenericSmsGatewayAuthenticationArgs struct {
	// API key authentication configuration.
	ApiKey ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
}

func (ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationOutput() ProjectConnectorsGenericSmsGatewayAuthenticationOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationOutput)
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationOutput).ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationArgs, ProjectConnectorsGenericSmsGatewayAuthenticationPtr and ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput` via:
//
//	        ProjectConnectorsGenericSmsGatewayAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput
}

type projectConnectorsGenericSmsGatewayAuthenticationPtrType ProjectConnectorsGenericSmsGatewayAuthenticationArgs

func ProjectConnectorsGenericSmsGatewayAuthenticationPtr(v *ProjectConnectorsGenericSmsGatewayAuthenticationArgs) ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput {
	return (*projectConnectorsGenericSmsGatewayAuthenticationPtrType)(v)
}

func (*projectConnectorsGenericSmsGatewayAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthentication)(nil)).Elem()
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationOutput() ProjectConnectorsGenericSmsGatewayAuthenticationOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return o.ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericSmsGatewayAuthentication) *ProjectConnectorsGenericSmsGatewayAuthentication {
		return &v
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) ApiKey() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthentication) *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey {
		return v.ApiKey
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) Basic() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthentication) *ProjectConnectorsGenericSmsGatewayAuthenticationBasic {
		return v.Basic
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthentication) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) Elem() ProjectConnectorsGenericSmsGatewayAuthenticationOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthentication) ProjectConnectorsGenericSmsGatewayAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericSmsGatewayAuthentication
		return ret
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) ApiKey() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthentication) *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) Basic() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthentication) *ProjectConnectorsGenericSmsGatewayAuthenticationBasic {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationApiKey struct {
	// The API key.
	Key string `pulumi:"key"`
	// The API secret.
	Token string `pulumi:"token"`
}

// ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs and ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyInput` via:
//
//	ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs{...}
type ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput
}

type ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs struct {
	// The API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The API secret.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationApiKey)(nil)).Elem()
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput)
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput).ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs, ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtr and ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput` via:
//
//	        ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput
}

type projectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrType ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs

func ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtr(v *ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput {
	return (*projectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrType)(v)
}

func (*projectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthenticationApiKey)(nil)).Elem()
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o.ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey {
		return &v
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput)
}

// The API key.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) string { return v.Key }).(pulumi.StringOutput)
}

// The API secret.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) Elem() ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) ProjectConnectorsGenericSmsGatewayAuthenticationApiKey {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericSmsGatewayAuthenticationApiKey
		return ret
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput)
}

// The API key.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The API secret.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationBasic struct {
	// Password for basic HTTP authentication.
	Password string `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsGenericSmsGatewayAuthenticationBasicInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs and ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationBasicInput` via:
//
//	ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs{...}
type ProjectConnectorsGenericSmsGatewayAuthenticationBasicInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput
}

type ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs struct {
	// Password for basic HTTP authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationBasic)(nil)).Elem()
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput)
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput).ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(ctx)
}

// ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput is an input type that accepts ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs, ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtr and ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput` via:
//
//	        ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput interface {
	pulumi.Input

	ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput
	ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput
}

type projectConnectorsGenericSmsGatewayAuthenticationBasicPtrType ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs

func ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtr(v *ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput {
	return (*projectConnectorsGenericSmsGatewayAuthenticationBasicPtrType)(v)
}

func (*projectConnectorsGenericSmsGatewayAuthenticationBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthenticationBasic)(nil)).Elem()
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationBasicPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsGenericSmsGatewayAuthenticationBasicPtrType) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o.ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsGenericSmsGatewayAuthenticationBasic) *ProjectConnectorsGenericSmsGatewayAuthenticationBasic {
		return &v
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthenticationBasic) string { return v.Password }).(pulumi.StringOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGenericSmsGatewayAuthenticationBasic) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsGenericSmsGatewayAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput() ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) ToProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) Elem() ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationBasic) ProjectConnectorsGenericSmsGatewayAuthenticationBasic {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsGenericSmsGatewayAuthenticationBasic
		return ret
	}).(ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsGenericSmsGatewayAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGoogleCloudLogging struct {
	// Whether to enable streaming of audit events.
	AuditEnabled *bool `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsGoogleCloudLoggingAuditFilter `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
	ServiceAccountKey string `pulumi:"serviceAccountKey"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled *bool `pulumi:"troubleshootLogEnabled"`
}

// ProjectConnectorsGoogleCloudLoggingInput is an input type that accepts ProjectConnectorsGoogleCloudLoggingArgs and ProjectConnectorsGoogleCloudLoggingOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudLoggingInput` via:
//
//	ProjectConnectorsGoogleCloudLoggingArgs{...}
type ProjectConnectorsGoogleCloudLoggingInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudLoggingOutput() ProjectConnectorsGoogleCloudLoggingOutput
	ToProjectConnectorsGoogleCloudLoggingOutputWithContext(context.Context) ProjectConnectorsGoogleCloudLoggingOutput
}

type ProjectConnectorsGoogleCloudLoggingArgs struct {
	// Whether to enable streaming of audit events.
	AuditEnabled pulumi.BoolPtrInput `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsGoogleCloudLoggingAuditFilterArrayInput `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
	ServiceAccountKey pulumi.StringInput `pulumi:"serviceAccountKey"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled pulumi.BoolPtrInput `pulumi:"troubleshootLogEnabled"`
}

func (ProjectConnectorsGoogleCloudLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudLogging)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudLoggingArgs) ToProjectConnectorsGoogleCloudLoggingOutput() ProjectConnectorsGoogleCloudLoggingOutput {
	return i.ToProjectConnectorsGoogleCloudLoggingOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudLoggingArgs) ToProjectConnectorsGoogleCloudLoggingOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudLoggingOutput)
}

// ProjectConnectorsGoogleCloudLoggingArrayInput is an input type that accepts ProjectConnectorsGoogleCloudLoggingArray and ProjectConnectorsGoogleCloudLoggingArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudLoggingArrayInput` via:
//
//	ProjectConnectorsGoogleCloudLoggingArray{ ProjectConnectorsGoogleCloudLoggingArgs{...} }
type ProjectConnectorsGoogleCloudLoggingArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudLoggingArrayOutput() ProjectConnectorsGoogleCloudLoggingArrayOutput
	ToProjectConnectorsGoogleCloudLoggingArrayOutputWithContext(context.Context) ProjectConnectorsGoogleCloudLoggingArrayOutput
}

type ProjectConnectorsGoogleCloudLoggingArray []ProjectConnectorsGoogleCloudLoggingInput

func (ProjectConnectorsGoogleCloudLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudLogging)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudLoggingArray) ToProjectConnectorsGoogleCloudLoggingArrayOutput() ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return i.ToProjectConnectorsGoogleCloudLoggingArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudLoggingArray) ToProjectConnectorsGoogleCloudLoggingArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudLoggingArrayOutput)
}

type ProjectConnectorsGoogleCloudLoggingOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudLogging)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudLoggingOutput) ToProjectConnectorsGoogleCloudLoggingOutput() ProjectConnectorsGoogleCloudLoggingOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingOutput) ToProjectConnectorsGoogleCloudLoggingOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingOutput {
	return o
}

// Whether to enable streaming of audit events.
func (o ProjectConnectorsGoogleCloudLoggingOutput) AuditEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) *bool { return v.AuditEnabled }).(pulumi.BoolPtrOutput)
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsGoogleCloudLoggingOutput) AuditFilters() ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) []ProjectConnectorsGoogleCloudLoggingAuditFilter {
		return v.AuditFilters
	}).(ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsGoogleCloudLoggingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsGoogleCloudLoggingOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsGoogleCloudLoggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) string { return v.Name }).(pulumi.StringOutput)
}

// A Service Account Key JSON file created from a service account on your Google Cloud project. This file is used to authenticate and authorize the connector to access Google Cloud Logging. The service account this key belongs to must have the appropriate permissions to write logs.
func (o ProjectConnectorsGoogleCloudLoggingOutput) ServiceAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) string { return v.ServiceAccountKey }).(pulumi.StringOutput)
}

// Whether to send troubleshooting events.
func (o ProjectConnectorsGoogleCloudLoggingOutput) TroubleshootLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLogging) *bool { return v.TroubleshootLogEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsGoogleCloudLoggingArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudLogging)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudLoggingArrayOutput) ToProjectConnectorsGoogleCloudLoggingArrayOutput() ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingArrayOutput) ToProjectConnectorsGoogleCloudLoggingArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGoogleCloudLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGoogleCloudLogging {
		return vs[0].([]ProjectConnectorsGoogleCloudLogging)[vs[1].(int)]
	}).(ProjectConnectorsGoogleCloudLoggingOutput)
}

type ProjectConnectorsGoogleCloudLoggingAuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsGoogleCloudLoggingAuditFilterInput is an input type that accepts ProjectConnectorsGoogleCloudLoggingAuditFilterArgs and ProjectConnectorsGoogleCloudLoggingAuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudLoggingAuditFilterInput` via:
//
//	ProjectConnectorsGoogleCloudLoggingAuditFilterArgs{...}
type ProjectConnectorsGoogleCloudLoggingAuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudLoggingAuditFilterOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterOutput
	ToProjectConnectorsGoogleCloudLoggingAuditFilterOutputWithContext(context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterOutput
}

type ProjectConnectorsGoogleCloudLoggingAuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsGoogleCloudLoggingAuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudLoggingAuditFilterArgs) ToProjectConnectorsGoogleCloudLoggingAuditFilterOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterOutput {
	return i.ToProjectConnectorsGoogleCloudLoggingAuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudLoggingAuditFilterArgs) ToProjectConnectorsGoogleCloudLoggingAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudLoggingAuditFilterOutput)
}

// ProjectConnectorsGoogleCloudLoggingAuditFilterArrayInput is an input type that accepts ProjectConnectorsGoogleCloudLoggingAuditFilterArray and ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudLoggingAuditFilterArrayInput` via:
//
//	ProjectConnectorsGoogleCloudLoggingAuditFilterArray{ ProjectConnectorsGoogleCloudLoggingAuditFilterArgs{...} }
type ProjectConnectorsGoogleCloudLoggingAuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput
	ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput
}

type ProjectConnectorsGoogleCloudLoggingAuditFilterArray []ProjectConnectorsGoogleCloudLoggingAuditFilterInput

func (ProjectConnectorsGoogleCloudLoggingAuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudLoggingAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudLoggingAuditFilterArray) ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput {
	return i.ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudLoggingAuditFilterArray) ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput)
}

type ProjectConnectorsGoogleCloudLoggingAuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) ToProjectConnectorsGoogleCloudLoggingAuditFilterOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) ToProjectConnectorsGoogleCloudLoggingAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLoggingAuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLoggingAuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsGoogleCloudLoggingAuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudLoggingAuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudLoggingAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput) ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput() ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput) ToProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGoogleCloudLoggingAuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGoogleCloudLoggingAuditFilter {
		return vs[0].([]ProjectConnectorsGoogleCloudLoggingAuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsGoogleCloudLoggingAuditFilterOutput)
}

type ProjectConnectorsGoogleCloudTranslation struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Google Cloud project ID where the Google Cloud Translation is managed.
	ProjectId string `pulumi:"projectId"`
	// Service Account JSON associated with the current project.
	ServiceAccountJson string `pulumi:"serviceAccountJson"`
}

// ProjectConnectorsGoogleCloudTranslationInput is an input type that accepts ProjectConnectorsGoogleCloudTranslationArgs and ProjectConnectorsGoogleCloudTranslationOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudTranslationInput` via:
//
//	ProjectConnectorsGoogleCloudTranslationArgs{...}
type ProjectConnectorsGoogleCloudTranslationInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudTranslationOutput() ProjectConnectorsGoogleCloudTranslationOutput
	ToProjectConnectorsGoogleCloudTranslationOutputWithContext(context.Context) ProjectConnectorsGoogleCloudTranslationOutput
}

type ProjectConnectorsGoogleCloudTranslationArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Google Cloud project ID where the Google Cloud Translation is managed.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Service Account JSON associated with the current project.
	ServiceAccountJson pulumi.StringInput `pulumi:"serviceAccountJson"`
}

func (ProjectConnectorsGoogleCloudTranslationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudTranslation)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudTranslationArgs) ToProjectConnectorsGoogleCloudTranslationOutput() ProjectConnectorsGoogleCloudTranslationOutput {
	return i.ToProjectConnectorsGoogleCloudTranslationOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudTranslationArgs) ToProjectConnectorsGoogleCloudTranslationOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudTranslationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudTranslationOutput)
}

// ProjectConnectorsGoogleCloudTranslationArrayInput is an input type that accepts ProjectConnectorsGoogleCloudTranslationArray and ProjectConnectorsGoogleCloudTranslationArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleCloudTranslationArrayInput` via:
//
//	ProjectConnectorsGoogleCloudTranslationArray{ ProjectConnectorsGoogleCloudTranslationArgs{...} }
type ProjectConnectorsGoogleCloudTranslationArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleCloudTranslationArrayOutput() ProjectConnectorsGoogleCloudTranslationArrayOutput
	ToProjectConnectorsGoogleCloudTranslationArrayOutputWithContext(context.Context) ProjectConnectorsGoogleCloudTranslationArrayOutput
}

type ProjectConnectorsGoogleCloudTranslationArray []ProjectConnectorsGoogleCloudTranslationInput

func (ProjectConnectorsGoogleCloudTranslationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudTranslation)(nil)).Elem()
}

func (i ProjectConnectorsGoogleCloudTranslationArray) ToProjectConnectorsGoogleCloudTranslationArrayOutput() ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return i.ToProjectConnectorsGoogleCloudTranslationArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleCloudTranslationArray) ToProjectConnectorsGoogleCloudTranslationArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleCloudTranslationArrayOutput)
}

type ProjectConnectorsGoogleCloudTranslationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudTranslationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleCloudTranslation)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudTranslationOutput) ToProjectConnectorsGoogleCloudTranslationOutput() ProjectConnectorsGoogleCloudTranslationOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudTranslationOutput) ToProjectConnectorsGoogleCloudTranslationOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudTranslationOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsGoogleCloudTranslationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudTranslation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsGoogleCloudTranslationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudTranslation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsGoogleCloudTranslationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudTranslation) string { return v.Name }).(pulumi.StringOutput)
}

// The Google Cloud project ID where the Google Cloud Translation is managed.
func (o ProjectConnectorsGoogleCloudTranslationOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudTranslation) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Service Account JSON associated with the current project.
func (o ProjectConnectorsGoogleCloudTranslationOutput) ServiceAccountJson() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleCloudTranslation) string { return v.ServiceAccountJson }).(pulumi.StringOutput)
}

type ProjectConnectorsGoogleCloudTranslationArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleCloudTranslationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleCloudTranslation)(nil)).Elem()
}

func (o ProjectConnectorsGoogleCloudTranslationArrayOutput) ToProjectConnectorsGoogleCloudTranslationArrayOutput() ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudTranslationArrayOutput) ToProjectConnectorsGoogleCloudTranslationArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleCloudTranslationArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleCloudTranslationArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGoogleCloudTranslationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGoogleCloudTranslation {
		return vs[0].([]ProjectConnectorsGoogleCloudTranslation)[vs[1].(int)]
	}).(ProjectConnectorsGoogleCloudTranslationOutput)
}

type ProjectConnectorsGoogleMapsPlace struct {
	// The address types to return.
	AddressTypes *string `pulumi:"addressTypes"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// The language in which to return results.
	Language *string `pulumi:"language"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Google Maps Places public API key.
	PublicApiKey string `pulumi:"publicApiKey"`
	// The region code, specified as a CLDR two-character region code.
	Region *string `pulumi:"region"`
}

// ProjectConnectorsGoogleMapsPlaceInput is an input type that accepts ProjectConnectorsGoogleMapsPlaceArgs and ProjectConnectorsGoogleMapsPlaceOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleMapsPlaceInput` via:
//
//	ProjectConnectorsGoogleMapsPlaceArgs{...}
type ProjectConnectorsGoogleMapsPlaceInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleMapsPlaceOutput() ProjectConnectorsGoogleMapsPlaceOutput
	ToProjectConnectorsGoogleMapsPlaceOutputWithContext(context.Context) ProjectConnectorsGoogleMapsPlaceOutput
}

type ProjectConnectorsGoogleMapsPlaceArgs struct {
	// The address types to return.
	AddressTypes pulumi.StringPtrInput `pulumi:"addressTypes"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// The language in which to return results.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Google Maps Places public API key.
	PublicApiKey pulumi.StringInput `pulumi:"publicApiKey"`
	// The region code, specified as a CLDR two-character region code.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (ProjectConnectorsGoogleMapsPlaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleMapsPlace)(nil)).Elem()
}

func (i ProjectConnectorsGoogleMapsPlaceArgs) ToProjectConnectorsGoogleMapsPlaceOutput() ProjectConnectorsGoogleMapsPlaceOutput {
	return i.ToProjectConnectorsGoogleMapsPlaceOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleMapsPlaceArgs) ToProjectConnectorsGoogleMapsPlaceOutputWithContext(ctx context.Context) ProjectConnectorsGoogleMapsPlaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleMapsPlaceOutput)
}

// ProjectConnectorsGoogleMapsPlaceArrayInput is an input type that accepts ProjectConnectorsGoogleMapsPlaceArray and ProjectConnectorsGoogleMapsPlaceArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsGoogleMapsPlaceArrayInput` via:
//
//	ProjectConnectorsGoogleMapsPlaceArray{ ProjectConnectorsGoogleMapsPlaceArgs{...} }
type ProjectConnectorsGoogleMapsPlaceArrayInput interface {
	pulumi.Input

	ToProjectConnectorsGoogleMapsPlaceArrayOutput() ProjectConnectorsGoogleMapsPlaceArrayOutput
	ToProjectConnectorsGoogleMapsPlaceArrayOutputWithContext(context.Context) ProjectConnectorsGoogleMapsPlaceArrayOutput
}

type ProjectConnectorsGoogleMapsPlaceArray []ProjectConnectorsGoogleMapsPlaceInput

func (ProjectConnectorsGoogleMapsPlaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleMapsPlace)(nil)).Elem()
}

func (i ProjectConnectorsGoogleMapsPlaceArray) ToProjectConnectorsGoogleMapsPlaceArrayOutput() ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return i.ToProjectConnectorsGoogleMapsPlaceArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsGoogleMapsPlaceArray) ToProjectConnectorsGoogleMapsPlaceArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsGoogleMapsPlaceArrayOutput)
}

type ProjectConnectorsGoogleMapsPlaceOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleMapsPlaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsGoogleMapsPlace)(nil)).Elem()
}

func (o ProjectConnectorsGoogleMapsPlaceOutput) ToProjectConnectorsGoogleMapsPlaceOutput() ProjectConnectorsGoogleMapsPlaceOutput {
	return o
}

func (o ProjectConnectorsGoogleMapsPlaceOutput) ToProjectConnectorsGoogleMapsPlaceOutputWithContext(ctx context.Context) ProjectConnectorsGoogleMapsPlaceOutput {
	return o
}

// The address types to return.
func (o ProjectConnectorsGoogleMapsPlaceOutput) AddressTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) *string { return v.AddressTypes }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsGoogleMapsPlaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsGoogleMapsPlaceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The language in which to return results.
func (o ProjectConnectorsGoogleMapsPlaceOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsGoogleMapsPlaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) string { return v.Name }).(pulumi.StringOutput)
}

// The Google Maps Places public API key.
func (o ProjectConnectorsGoogleMapsPlaceOutput) PublicApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) string { return v.PublicApiKey }).(pulumi.StringOutput)
}

// The region code, specified as a CLDR two-character region code.
func (o ProjectConnectorsGoogleMapsPlaceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsGoogleMapsPlace) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsGoogleMapsPlaceArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsGoogleMapsPlaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsGoogleMapsPlace)(nil)).Elem()
}

func (o ProjectConnectorsGoogleMapsPlaceArrayOutput) ToProjectConnectorsGoogleMapsPlaceArrayOutput() ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleMapsPlaceArrayOutput) ToProjectConnectorsGoogleMapsPlaceArrayOutputWithContext(ctx context.Context) ProjectConnectorsGoogleMapsPlaceArrayOutput {
	return o
}

func (o ProjectConnectorsGoogleMapsPlaceArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsGoogleMapsPlaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsGoogleMapsPlace {
		return vs[0].([]ProjectConnectorsGoogleMapsPlace)[vs[1].(int)]
	}).(ProjectConnectorsGoogleMapsPlaceOutput)
}

type ProjectConnectorsHibp struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsHibpInput is an input type that accepts ProjectConnectorsHibpArgs and ProjectConnectorsHibpOutput values.
// You can construct a concrete instance of `ProjectConnectorsHibpInput` via:
//
//	ProjectConnectorsHibpArgs{...}
type ProjectConnectorsHibpInput interface {
	pulumi.Input

	ToProjectConnectorsHibpOutput() ProjectConnectorsHibpOutput
	ToProjectConnectorsHibpOutputWithContext(context.Context) ProjectConnectorsHibpOutput
}

type ProjectConnectorsHibpArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsHibpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHibp)(nil)).Elem()
}

func (i ProjectConnectorsHibpArgs) ToProjectConnectorsHibpOutput() ProjectConnectorsHibpOutput {
	return i.ToProjectConnectorsHibpOutputWithContext(context.Background())
}

func (i ProjectConnectorsHibpArgs) ToProjectConnectorsHibpOutputWithContext(ctx context.Context) ProjectConnectorsHibpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHibpOutput)
}

// ProjectConnectorsHibpArrayInput is an input type that accepts ProjectConnectorsHibpArray and ProjectConnectorsHibpArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsHibpArrayInput` via:
//
//	ProjectConnectorsHibpArray{ ProjectConnectorsHibpArgs{...} }
type ProjectConnectorsHibpArrayInput interface {
	pulumi.Input

	ToProjectConnectorsHibpArrayOutput() ProjectConnectorsHibpArrayOutput
	ToProjectConnectorsHibpArrayOutputWithContext(context.Context) ProjectConnectorsHibpArrayOutput
}

type ProjectConnectorsHibpArray []ProjectConnectorsHibpInput

func (ProjectConnectorsHibpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHibp)(nil)).Elem()
}

func (i ProjectConnectorsHibpArray) ToProjectConnectorsHibpArrayOutput() ProjectConnectorsHibpArrayOutput {
	return i.ToProjectConnectorsHibpArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsHibpArray) ToProjectConnectorsHibpArrayOutputWithContext(ctx context.Context) ProjectConnectorsHibpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHibpArrayOutput)
}

type ProjectConnectorsHibpOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHibpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHibp)(nil)).Elem()
}

func (o ProjectConnectorsHibpOutput) ToProjectConnectorsHibpOutput() ProjectConnectorsHibpOutput {
	return o
}

func (o ProjectConnectorsHibpOutput) ToProjectConnectorsHibpOutputWithContext(ctx context.Context) ProjectConnectorsHibpOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsHibpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHibp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsHibpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHibp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsHibpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHibp) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsHibpArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHibpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHibp)(nil)).Elem()
}

func (o ProjectConnectorsHibpArrayOutput) ToProjectConnectorsHibpArrayOutput() ProjectConnectorsHibpArrayOutput {
	return o
}

func (o ProjectConnectorsHibpArrayOutput) ToProjectConnectorsHibpArrayOutputWithContext(ctx context.Context) ProjectConnectorsHibpArrayOutput {
	return o
}

func (o ProjectConnectorsHibpArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsHibpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsHibp {
		return vs[0].([]ProjectConnectorsHibp)[vs[1].(int)]
	}).(ProjectConnectorsHibpOutput)
}

type ProjectConnectorsHttp struct {
	// Authentication Information
	Authentication *ProjectConnectorsHttpAuthentication `pulumi:"authentication"`
	// The base URL to fetch
	BaseUrl string `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The headers to send with the request
	Headers map[string]string `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret *string `pulumi:"hmacSecret"`
	Id         *string `pulumi:"id"`
	// The connector response context will also include the headers. The context will have a "body" attribute and a "headers" attribute. See more details in the help guide
	IncludeHeadersInContext *bool `pulumi:"includeHeadersInContext"`
	// Will ignore certificate errors raised by the client
	Insecure *bool `pulumi:"insecure"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsHttpInput is an input type that accepts ProjectConnectorsHttpArgs and ProjectConnectorsHttpOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpInput` via:
//
//	ProjectConnectorsHttpArgs{...}
type ProjectConnectorsHttpInput interface {
	pulumi.Input

	ToProjectConnectorsHttpOutput() ProjectConnectorsHttpOutput
	ToProjectConnectorsHttpOutputWithContext(context.Context) ProjectConnectorsHttpOutput
}

type ProjectConnectorsHttpArgs struct {
	// Authentication Information
	Authentication ProjectConnectorsHttpAuthenticationPtrInput `pulumi:"authentication"`
	// The base URL to fetch
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The headers to send with the request
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
	HmacSecret pulumi.StringPtrInput `pulumi:"hmacSecret"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// The connector response context will also include the headers. The context will have a "body" attribute and a "headers" attribute. See more details in the help guide
	IncludeHeadersInContext pulumi.BoolPtrInput `pulumi:"includeHeadersInContext"`
	// Will ignore certificate errors raised by the client
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttp)(nil)).Elem()
}

func (i ProjectConnectorsHttpArgs) ToProjectConnectorsHttpOutput() ProjectConnectorsHttpOutput {
	return i.ToProjectConnectorsHttpOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpArgs) ToProjectConnectorsHttpOutputWithContext(ctx context.Context) ProjectConnectorsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpOutput)
}

// ProjectConnectorsHttpArrayInput is an input type that accepts ProjectConnectorsHttpArray and ProjectConnectorsHttpArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpArrayInput` via:
//
//	ProjectConnectorsHttpArray{ ProjectConnectorsHttpArgs{...} }
type ProjectConnectorsHttpArrayInput interface {
	pulumi.Input

	ToProjectConnectorsHttpArrayOutput() ProjectConnectorsHttpArrayOutput
	ToProjectConnectorsHttpArrayOutputWithContext(context.Context) ProjectConnectorsHttpArrayOutput
}

type ProjectConnectorsHttpArray []ProjectConnectorsHttpInput

func (ProjectConnectorsHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHttp)(nil)).Elem()
}

func (i ProjectConnectorsHttpArray) ToProjectConnectorsHttpArrayOutput() ProjectConnectorsHttpArrayOutput {
	return i.ToProjectConnectorsHttpArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpArray) ToProjectConnectorsHttpArrayOutputWithContext(ctx context.Context) ProjectConnectorsHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpArrayOutput)
}

type ProjectConnectorsHttpOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttp)(nil)).Elem()
}

func (o ProjectConnectorsHttpOutput) ToProjectConnectorsHttpOutput() ProjectConnectorsHttpOutput {
	return o
}

func (o ProjectConnectorsHttpOutput) ToProjectConnectorsHttpOutputWithContext(ctx context.Context) ProjectConnectorsHttpOutput {
	return o
}

// Authentication Information
func (o ProjectConnectorsHttpOutput) Authentication() ProjectConnectorsHttpAuthenticationPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *ProjectConnectorsHttpAuthentication { return v.Authentication }).(ProjectConnectorsHttpAuthenticationPtrOutput)
}

// The base URL to fetch
func (o ProjectConnectorsHttpOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsHttpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to send with the request
func (o ProjectConnectorsHttpOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC is a method for message signing with a symmetrical key. This secret will be used to sign the base64 encoded payload, and the resulting signature will be sent in the `x-descope-webhook-s256` header. The receiving service should use this secret to verify the integrity and authenticity of the payload by checking the provided signature
func (o ProjectConnectorsHttpOutput) HmacSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *string { return v.HmacSecret }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsHttpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The connector response context will also include the headers. The context will have a "body" attribute and a "headers" attribute. See more details in the help guide
func (o ProjectConnectorsHttpOutput) IncludeHeadersInContext() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *bool { return v.IncludeHeadersInContext }).(pulumi.BoolPtrOutput)
}

// Will ignore certificate errors raised by the client
func (o ProjectConnectorsHttpOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsHttpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsHttpOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttp) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsHttpArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHttp)(nil)).Elem()
}

func (o ProjectConnectorsHttpArrayOutput) ToProjectConnectorsHttpArrayOutput() ProjectConnectorsHttpArrayOutput {
	return o
}

func (o ProjectConnectorsHttpArrayOutput) ToProjectConnectorsHttpArrayOutputWithContext(ctx context.Context) ProjectConnectorsHttpArrayOutput {
	return o
}

func (o ProjectConnectorsHttpArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsHttp {
		return vs[0].([]ProjectConnectorsHttp)[vs[1].(int)]
	}).(ProjectConnectorsHttpOutput)
}

type ProjectConnectorsHttpAuthentication struct {
	// API key authentication configuration.
	ApiKey *ProjectConnectorsHttpAuthenticationApiKey `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic *ProjectConnectorsHttpAuthenticationBasic `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken *string `pulumi:"bearerToken"`
}

// ProjectConnectorsHttpAuthenticationInput is an input type that accepts ProjectConnectorsHttpAuthenticationArgs and ProjectConnectorsHttpAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationInput` via:
//
//	ProjectConnectorsHttpAuthenticationArgs{...}
type ProjectConnectorsHttpAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationOutput() ProjectConnectorsHttpAuthenticationOutput
	ToProjectConnectorsHttpAuthenticationOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationOutput
}

type ProjectConnectorsHttpAuthenticationArgs struct {
	// API key authentication configuration.
	ApiKey ProjectConnectorsHttpAuthenticationApiKeyPtrInput `pulumi:"apiKey"`
	// Basic authentication credentials (username and password).
	Basic ProjectConnectorsHttpAuthenticationBasicPtrInput `pulumi:"basic"`
	// Bearer token for HTTP authentication.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
}

func (ProjectConnectorsHttpAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsHttpAuthenticationArgs) ToProjectConnectorsHttpAuthenticationOutput() ProjectConnectorsHttpAuthenticationOutput {
	return i.ToProjectConnectorsHttpAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationArgs) ToProjectConnectorsHttpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationOutput)
}

func (i ProjectConnectorsHttpAuthenticationArgs) ToProjectConnectorsHttpAuthenticationPtrOutput() ProjectConnectorsHttpAuthenticationPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationArgs) ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationOutput).ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(ctx)
}

// ProjectConnectorsHttpAuthenticationPtrInput is an input type that accepts ProjectConnectorsHttpAuthenticationArgs, ProjectConnectorsHttpAuthenticationPtr and ProjectConnectorsHttpAuthenticationPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationPtrInput` via:
//
//	        ProjectConnectorsHttpAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsHttpAuthenticationPtrInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationPtrOutput() ProjectConnectorsHttpAuthenticationPtrOutput
	ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationPtrOutput
}

type projectConnectorsHttpAuthenticationPtrType ProjectConnectorsHttpAuthenticationArgs

func ProjectConnectorsHttpAuthenticationPtr(v *ProjectConnectorsHttpAuthenticationArgs) ProjectConnectorsHttpAuthenticationPtrInput {
	return (*projectConnectorsHttpAuthenticationPtrType)(v)
}

func (*projectConnectorsHttpAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthentication)(nil)).Elem()
}

func (i *projectConnectorsHttpAuthenticationPtrType) ToProjectConnectorsHttpAuthenticationPtrOutput() ProjectConnectorsHttpAuthenticationPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsHttpAuthenticationPtrType) ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationPtrOutput)
}

type ProjectConnectorsHttpAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationOutput) ToProjectConnectorsHttpAuthenticationOutput() ProjectConnectorsHttpAuthenticationOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationOutput) ToProjectConnectorsHttpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationOutput) ToProjectConnectorsHttpAuthenticationPtrOutput() ProjectConnectorsHttpAuthenticationPtrOutput {
	return o.ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsHttpAuthenticationOutput) ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsHttpAuthentication) *ProjectConnectorsHttpAuthentication {
		return &v
	}).(ProjectConnectorsHttpAuthenticationPtrOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsHttpAuthenticationOutput) ApiKey() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthentication) *ProjectConnectorsHttpAuthenticationApiKey {
		return v.ApiKey
	}).(ProjectConnectorsHttpAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsHttpAuthenticationOutput) Basic() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthentication) *ProjectConnectorsHttpAuthenticationBasic { return v.Basic }).(ProjectConnectorsHttpAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthentication) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsHttpAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationPtrOutput) ToProjectConnectorsHttpAuthenticationPtrOutput() ProjectConnectorsHttpAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationPtrOutput) ToProjectConnectorsHttpAuthenticationPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationPtrOutput) Elem() ProjectConnectorsHttpAuthenticationOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthentication) ProjectConnectorsHttpAuthentication {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsHttpAuthentication
		return ret
	}).(ProjectConnectorsHttpAuthenticationOutput)
}

// API key authentication configuration.
func (o ProjectConnectorsHttpAuthenticationPtrOutput) ApiKey() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthentication) *ProjectConnectorsHttpAuthenticationApiKey {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(ProjectConnectorsHttpAuthenticationApiKeyPtrOutput)
}

// Basic authentication credentials (username and password).
func (o ProjectConnectorsHttpAuthenticationPtrOutput) Basic() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthentication) *ProjectConnectorsHttpAuthenticationBasic {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(ProjectConnectorsHttpAuthenticationBasicPtrOutput)
}

// Bearer token for HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsHttpAuthenticationApiKey struct {
	// The API key.
	Key string `pulumi:"key"`
	// The API secret.
	Token string `pulumi:"token"`
}

// ProjectConnectorsHttpAuthenticationApiKeyInput is an input type that accepts ProjectConnectorsHttpAuthenticationApiKeyArgs and ProjectConnectorsHttpAuthenticationApiKeyOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationApiKeyInput` via:
//
//	ProjectConnectorsHttpAuthenticationApiKeyArgs{...}
type ProjectConnectorsHttpAuthenticationApiKeyInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationApiKeyOutput() ProjectConnectorsHttpAuthenticationApiKeyOutput
	ToProjectConnectorsHttpAuthenticationApiKeyOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationApiKeyOutput
}

type ProjectConnectorsHttpAuthenticationApiKeyArgs struct {
	// The API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The API secret.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsHttpAuthenticationApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthenticationApiKey)(nil)).Elem()
}

func (i ProjectConnectorsHttpAuthenticationApiKeyArgs) ToProjectConnectorsHttpAuthenticationApiKeyOutput() ProjectConnectorsHttpAuthenticationApiKeyOutput {
	return i.ToProjectConnectorsHttpAuthenticationApiKeyOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationApiKeyArgs) ToProjectConnectorsHttpAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationApiKeyOutput)
}

func (i ProjectConnectorsHttpAuthenticationApiKeyArgs) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationApiKeyArgs) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationApiKeyOutput).ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(ctx)
}

// ProjectConnectorsHttpAuthenticationApiKeyPtrInput is an input type that accepts ProjectConnectorsHttpAuthenticationApiKeyArgs, ProjectConnectorsHttpAuthenticationApiKeyPtr and ProjectConnectorsHttpAuthenticationApiKeyPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationApiKeyPtrInput` via:
//
//	        ProjectConnectorsHttpAuthenticationApiKeyArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsHttpAuthenticationApiKeyPtrInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput
	ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationApiKeyPtrOutput
}

type projectConnectorsHttpAuthenticationApiKeyPtrType ProjectConnectorsHttpAuthenticationApiKeyArgs

func ProjectConnectorsHttpAuthenticationApiKeyPtr(v *ProjectConnectorsHttpAuthenticationApiKeyArgs) ProjectConnectorsHttpAuthenticationApiKeyPtrInput {
	return (*projectConnectorsHttpAuthenticationApiKeyPtrType)(v)
}

func (*projectConnectorsHttpAuthenticationApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthenticationApiKey)(nil)).Elem()
}

func (i *projectConnectorsHttpAuthenticationApiKeyPtrType) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsHttpAuthenticationApiKeyPtrType) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationApiKeyPtrOutput)
}

type ProjectConnectorsHttpAuthenticationApiKeyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) ToProjectConnectorsHttpAuthenticationApiKeyOutput() ProjectConnectorsHttpAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) ToProjectConnectorsHttpAuthenticationApiKeyOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o.ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsHttpAuthenticationApiKey) *ProjectConnectorsHttpAuthenticationApiKey {
		return &v
	}).(ProjectConnectorsHttpAuthenticationApiKeyPtrOutput)
}

// The API key.
func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthenticationApiKey) string { return v.Key }).(pulumi.StringOutput)
}

// The API secret.
func (o ProjectConnectorsHttpAuthenticationApiKeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthenticationApiKey) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsHttpAuthenticationApiKeyPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthenticationApiKey)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutput() ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) ToProjectConnectorsHttpAuthenticationApiKeyPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationApiKeyPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) Elem() ProjectConnectorsHttpAuthenticationApiKeyOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationApiKey) ProjectConnectorsHttpAuthenticationApiKey {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsHttpAuthenticationApiKey
		return ret
	}).(ProjectConnectorsHttpAuthenticationApiKeyOutput)
}

// The API key.
func (o ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The API secret.
func (o ProjectConnectorsHttpAuthenticationApiKeyPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationApiKey) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsHttpAuthenticationBasic struct {
	// Password for basic HTTP authentication.
	Password string `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsHttpAuthenticationBasicInput is an input type that accepts ProjectConnectorsHttpAuthenticationBasicArgs and ProjectConnectorsHttpAuthenticationBasicOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationBasicInput` via:
//
//	ProjectConnectorsHttpAuthenticationBasicArgs{...}
type ProjectConnectorsHttpAuthenticationBasicInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationBasicOutput() ProjectConnectorsHttpAuthenticationBasicOutput
	ToProjectConnectorsHttpAuthenticationBasicOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationBasicOutput
}

type ProjectConnectorsHttpAuthenticationBasicArgs struct {
	// Password for basic HTTP authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for basic HTTP authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsHttpAuthenticationBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthenticationBasic)(nil)).Elem()
}

func (i ProjectConnectorsHttpAuthenticationBasicArgs) ToProjectConnectorsHttpAuthenticationBasicOutput() ProjectConnectorsHttpAuthenticationBasicOutput {
	return i.ToProjectConnectorsHttpAuthenticationBasicOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationBasicArgs) ToProjectConnectorsHttpAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationBasicOutput)
}

func (i ProjectConnectorsHttpAuthenticationBasicArgs) ToProjectConnectorsHttpAuthenticationBasicPtrOutput() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsHttpAuthenticationBasicArgs) ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationBasicOutput).ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(ctx)
}

// ProjectConnectorsHttpAuthenticationBasicPtrInput is an input type that accepts ProjectConnectorsHttpAuthenticationBasicArgs, ProjectConnectorsHttpAuthenticationBasicPtr and ProjectConnectorsHttpAuthenticationBasicPtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsHttpAuthenticationBasicPtrInput` via:
//
//	        ProjectConnectorsHttpAuthenticationBasicArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsHttpAuthenticationBasicPtrInput interface {
	pulumi.Input

	ToProjectConnectorsHttpAuthenticationBasicPtrOutput() ProjectConnectorsHttpAuthenticationBasicPtrOutput
	ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(context.Context) ProjectConnectorsHttpAuthenticationBasicPtrOutput
}

type projectConnectorsHttpAuthenticationBasicPtrType ProjectConnectorsHttpAuthenticationBasicArgs

func ProjectConnectorsHttpAuthenticationBasicPtr(v *ProjectConnectorsHttpAuthenticationBasicArgs) ProjectConnectorsHttpAuthenticationBasicPtrInput {
	return (*projectConnectorsHttpAuthenticationBasicPtrType)(v)
}

func (*projectConnectorsHttpAuthenticationBasicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthenticationBasic)(nil)).Elem()
}

func (i *projectConnectorsHttpAuthenticationBasicPtrType) ToProjectConnectorsHttpAuthenticationBasicPtrOutput() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return i.ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (i *projectConnectorsHttpAuthenticationBasicPtrType) ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHttpAuthenticationBasicPtrOutput)
}

type ProjectConnectorsHttpAuthenticationBasicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHttpAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationBasicOutput) ToProjectConnectorsHttpAuthenticationBasicOutput() ProjectConnectorsHttpAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationBasicOutput) ToProjectConnectorsHttpAuthenticationBasicOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationBasicOutput) ToProjectConnectorsHttpAuthenticationBasicPtrOutput() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o.ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsHttpAuthenticationBasicOutput) ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsHttpAuthenticationBasic) *ProjectConnectorsHttpAuthenticationBasic {
		return &v
	}).(ProjectConnectorsHttpAuthenticationBasicPtrOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationBasicOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthenticationBasic) string { return v.Password }).(pulumi.StringOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationBasicOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHttpAuthenticationBasic) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsHttpAuthenticationBasicPtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHttpAuthenticationBasicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsHttpAuthenticationBasic)(nil)).Elem()
}

func (o ProjectConnectorsHttpAuthenticationBasicPtrOutput) ToProjectConnectorsHttpAuthenticationBasicPtrOutput() ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationBasicPtrOutput) ToProjectConnectorsHttpAuthenticationBasicPtrOutputWithContext(ctx context.Context) ProjectConnectorsHttpAuthenticationBasicPtrOutput {
	return o
}

func (o ProjectConnectorsHttpAuthenticationBasicPtrOutput) Elem() ProjectConnectorsHttpAuthenticationBasicOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationBasic) ProjectConnectorsHttpAuthenticationBasic {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsHttpAuthenticationBasic
		return ret
	}).(ProjectConnectorsHttpAuthenticationBasicOutput)
}

// Password for basic HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationBasicPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username for basic HTTP authentication.
func (o ProjectConnectorsHttpAuthenticationBasicPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsHttpAuthenticationBasic) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsHubspot struct {
	// The HubSpot private API access token generated for the Descope service.
	AccessToken string `pulumi:"accessToken"`
	// The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
	BaseUrl *string `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsHubspotInput is an input type that accepts ProjectConnectorsHubspotArgs and ProjectConnectorsHubspotOutput values.
// You can construct a concrete instance of `ProjectConnectorsHubspotInput` via:
//
//	ProjectConnectorsHubspotArgs{...}
type ProjectConnectorsHubspotInput interface {
	pulumi.Input

	ToProjectConnectorsHubspotOutput() ProjectConnectorsHubspotOutput
	ToProjectConnectorsHubspotOutputWithContext(context.Context) ProjectConnectorsHubspotOutput
}

type ProjectConnectorsHubspotArgs struct {
	// The HubSpot private API access token generated for the Descope service.
	AccessToken pulumi.StringInput `pulumi:"accessToken"`
	// The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsHubspotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHubspot)(nil)).Elem()
}

func (i ProjectConnectorsHubspotArgs) ToProjectConnectorsHubspotOutput() ProjectConnectorsHubspotOutput {
	return i.ToProjectConnectorsHubspotOutputWithContext(context.Background())
}

func (i ProjectConnectorsHubspotArgs) ToProjectConnectorsHubspotOutputWithContext(ctx context.Context) ProjectConnectorsHubspotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHubspotOutput)
}

// ProjectConnectorsHubspotArrayInput is an input type that accepts ProjectConnectorsHubspotArray and ProjectConnectorsHubspotArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsHubspotArrayInput` via:
//
//	ProjectConnectorsHubspotArray{ ProjectConnectorsHubspotArgs{...} }
type ProjectConnectorsHubspotArrayInput interface {
	pulumi.Input

	ToProjectConnectorsHubspotArrayOutput() ProjectConnectorsHubspotArrayOutput
	ToProjectConnectorsHubspotArrayOutputWithContext(context.Context) ProjectConnectorsHubspotArrayOutput
}

type ProjectConnectorsHubspotArray []ProjectConnectorsHubspotInput

func (ProjectConnectorsHubspotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHubspot)(nil)).Elem()
}

func (i ProjectConnectorsHubspotArray) ToProjectConnectorsHubspotArrayOutput() ProjectConnectorsHubspotArrayOutput {
	return i.ToProjectConnectorsHubspotArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsHubspotArray) ToProjectConnectorsHubspotArrayOutputWithContext(ctx context.Context) ProjectConnectorsHubspotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsHubspotArrayOutput)
}

type ProjectConnectorsHubspotOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHubspotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsHubspot)(nil)).Elem()
}

func (o ProjectConnectorsHubspotOutput) ToProjectConnectorsHubspotOutput() ProjectConnectorsHubspotOutput {
	return o
}

func (o ProjectConnectorsHubspotOutput) ToProjectConnectorsHubspotOutputWithContext(ctx context.Context) ProjectConnectorsHubspotOutput {
	return o
}

// The HubSpot private API access token generated for the Descope service.
func (o ProjectConnectorsHubspotOutput) AccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) string { return v.AccessToken }).(pulumi.StringOutput)
}

// The base URL of the HubSpot API, when using a custom domain in HubSpot, default value is https://api.hubapi.com .
func (o ProjectConnectorsHubspotOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsHubspotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsHubspotOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsHubspotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsHubspotOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsHubspot) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsHubspotArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsHubspotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsHubspot)(nil)).Elem()
}

func (o ProjectConnectorsHubspotArrayOutput) ToProjectConnectorsHubspotArrayOutput() ProjectConnectorsHubspotArrayOutput {
	return o
}

func (o ProjectConnectorsHubspotArrayOutput) ToProjectConnectorsHubspotArrayOutputWithContext(ctx context.Context) ProjectConnectorsHubspotArrayOutput {
	return o
}

func (o ProjectConnectorsHubspotArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsHubspotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsHubspot {
		return vs[0].([]ProjectConnectorsHubspot)[vs[1].(int)]
	}).(ProjectConnectorsHubspotOutput)
}

type ProjectConnectorsIncode struct {
	// Your InCode API key.
	ApiKey string `pulumi:"apiKey"`
	// The base URL of the Incode API
	ApiUrl string `pulumi:"apiUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// Your wanted InCode's flow ID.
	FlowId string  `pulumi:"flowId"`
	Id     *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsIncodeInput is an input type that accepts ProjectConnectorsIncodeArgs and ProjectConnectorsIncodeOutput values.
// You can construct a concrete instance of `ProjectConnectorsIncodeInput` via:
//
//	ProjectConnectorsIncodeArgs{...}
type ProjectConnectorsIncodeInput interface {
	pulumi.Input

	ToProjectConnectorsIncodeOutput() ProjectConnectorsIncodeOutput
	ToProjectConnectorsIncodeOutputWithContext(context.Context) ProjectConnectorsIncodeOutput
}

type ProjectConnectorsIncodeArgs struct {
	// Your InCode API key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The base URL of the Incode API
	ApiUrl pulumi.StringInput `pulumi:"apiUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Your wanted InCode's flow ID.
	FlowId pulumi.StringInput    `pulumi:"flowId"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsIncodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsIncode)(nil)).Elem()
}

func (i ProjectConnectorsIncodeArgs) ToProjectConnectorsIncodeOutput() ProjectConnectorsIncodeOutput {
	return i.ToProjectConnectorsIncodeOutputWithContext(context.Background())
}

func (i ProjectConnectorsIncodeArgs) ToProjectConnectorsIncodeOutputWithContext(ctx context.Context) ProjectConnectorsIncodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsIncodeOutput)
}

// ProjectConnectorsIncodeArrayInput is an input type that accepts ProjectConnectorsIncodeArray and ProjectConnectorsIncodeArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsIncodeArrayInput` via:
//
//	ProjectConnectorsIncodeArray{ ProjectConnectorsIncodeArgs{...} }
type ProjectConnectorsIncodeArrayInput interface {
	pulumi.Input

	ToProjectConnectorsIncodeArrayOutput() ProjectConnectorsIncodeArrayOutput
	ToProjectConnectorsIncodeArrayOutputWithContext(context.Context) ProjectConnectorsIncodeArrayOutput
}

type ProjectConnectorsIncodeArray []ProjectConnectorsIncodeInput

func (ProjectConnectorsIncodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsIncode)(nil)).Elem()
}

func (i ProjectConnectorsIncodeArray) ToProjectConnectorsIncodeArrayOutput() ProjectConnectorsIncodeArrayOutput {
	return i.ToProjectConnectorsIncodeArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsIncodeArray) ToProjectConnectorsIncodeArrayOutputWithContext(ctx context.Context) ProjectConnectorsIncodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsIncodeArrayOutput)
}

type ProjectConnectorsIncodeOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsIncodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsIncode)(nil)).Elem()
}

func (o ProjectConnectorsIncodeOutput) ToProjectConnectorsIncodeOutput() ProjectConnectorsIncodeOutput {
	return o
}

func (o ProjectConnectorsIncodeOutput) ToProjectConnectorsIncodeOutputWithContext(ctx context.Context) ProjectConnectorsIncodeOutput {
	return o
}

// Your InCode API key.
func (o ProjectConnectorsIncodeOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The base URL of the Incode API
func (o ProjectConnectorsIncodeOutput) ApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) string { return v.ApiUrl }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsIncodeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Your wanted InCode's flow ID.
func (o ProjectConnectorsIncodeOutput) FlowId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) string { return v.FlowId }).(pulumi.StringOutput)
}

func (o ProjectConnectorsIncodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsIncodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIncode) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsIncodeArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsIncodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsIncode)(nil)).Elem()
}

func (o ProjectConnectorsIncodeArrayOutput) ToProjectConnectorsIncodeArrayOutput() ProjectConnectorsIncodeArrayOutput {
	return o
}

func (o ProjectConnectorsIncodeArrayOutput) ToProjectConnectorsIncodeArrayOutputWithContext(ctx context.Context) ProjectConnectorsIncodeArrayOutput {
	return o
}

func (o ProjectConnectorsIncodeArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsIncodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsIncode {
		return vs[0].([]ProjectConnectorsIncode)[vs[1].(int)]
	}).(ProjectConnectorsIncodeOutput)
}

type ProjectConnectorsIntercom struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Regional Hosting - US, EU, or AU. default: US
	Region *string `pulumi:"region"`
	// The Intercom access token.
	Token string `pulumi:"token"`
}

// ProjectConnectorsIntercomInput is an input type that accepts ProjectConnectorsIntercomArgs and ProjectConnectorsIntercomOutput values.
// You can construct a concrete instance of `ProjectConnectorsIntercomInput` via:
//
//	ProjectConnectorsIntercomArgs{...}
type ProjectConnectorsIntercomInput interface {
	pulumi.Input

	ToProjectConnectorsIntercomOutput() ProjectConnectorsIntercomOutput
	ToProjectConnectorsIntercomOutputWithContext(context.Context) ProjectConnectorsIntercomOutput
}

type ProjectConnectorsIntercomArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Regional Hosting - US, EU, or AU. default: US
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The Intercom access token.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsIntercomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsIntercom)(nil)).Elem()
}

func (i ProjectConnectorsIntercomArgs) ToProjectConnectorsIntercomOutput() ProjectConnectorsIntercomOutput {
	return i.ToProjectConnectorsIntercomOutputWithContext(context.Background())
}

func (i ProjectConnectorsIntercomArgs) ToProjectConnectorsIntercomOutputWithContext(ctx context.Context) ProjectConnectorsIntercomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsIntercomOutput)
}

// ProjectConnectorsIntercomArrayInput is an input type that accepts ProjectConnectorsIntercomArray and ProjectConnectorsIntercomArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsIntercomArrayInput` via:
//
//	ProjectConnectorsIntercomArray{ ProjectConnectorsIntercomArgs{...} }
type ProjectConnectorsIntercomArrayInput interface {
	pulumi.Input

	ToProjectConnectorsIntercomArrayOutput() ProjectConnectorsIntercomArrayOutput
	ToProjectConnectorsIntercomArrayOutputWithContext(context.Context) ProjectConnectorsIntercomArrayOutput
}

type ProjectConnectorsIntercomArray []ProjectConnectorsIntercomInput

func (ProjectConnectorsIntercomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsIntercom)(nil)).Elem()
}

func (i ProjectConnectorsIntercomArray) ToProjectConnectorsIntercomArrayOutput() ProjectConnectorsIntercomArrayOutput {
	return i.ToProjectConnectorsIntercomArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsIntercomArray) ToProjectConnectorsIntercomArrayOutputWithContext(ctx context.Context) ProjectConnectorsIntercomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsIntercomArrayOutput)
}

type ProjectConnectorsIntercomOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsIntercomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsIntercom)(nil)).Elem()
}

func (o ProjectConnectorsIntercomOutput) ToProjectConnectorsIntercomOutput() ProjectConnectorsIntercomOutput {
	return o
}

func (o ProjectConnectorsIntercomOutput) ToProjectConnectorsIntercomOutputWithContext(ctx context.Context) ProjectConnectorsIntercomOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsIntercomOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsIntercom) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsIntercomOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsIntercom) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsIntercomOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIntercom) string { return v.Name }).(pulumi.StringOutput)
}

// Regional Hosting - US, EU, or AU. default: US
func (o ProjectConnectorsIntercomOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsIntercom) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The Intercom access token.
func (o ProjectConnectorsIntercomOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsIntercom) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsIntercomArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsIntercomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsIntercom)(nil)).Elem()
}

func (o ProjectConnectorsIntercomArrayOutput) ToProjectConnectorsIntercomArrayOutput() ProjectConnectorsIntercomArrayOutput {
	return o
}

func (o ProjectConnectorsIntercomArrayOutput) ToProjectConnectorsIntercomArrayOutputWithContext(ctx context.Context) ProjectConnectorsIntercomArrayOutput {
	return o
}

func (o ProjectConnectorsIntercomArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsIntercomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsIntercom {
		return vs[0].([]ProjectConnectorsIntercom)[vs[1].(int)]
	}).(ProjectConnectorsIntercomOutput)
}

type ProjectConnectorsLokalise struct {
	// Lokalise API token.
	ApiToken string `pulumi:"apiToken"`
	// (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
	CardId *string `pulumi:"cardId"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Lokalise project ID.
	ProjectId string `pulumi:"projectId"`
	// Lokalise team ID. If not provided, the oldest available team will be used.
	TeamId *string `pulumi:"teamId"`
	// The translation provider to use ('gengo', 'google', 'lokalise', 'deepl'), default is 'deepl'.
	TranslationProvider *string `pulumi:"translationProvider"`
}

// ProjectConnectorsLokaliseInput is an input type that accepts ProjectConnectorsLokaliseArgs and ProjectConnectorsLokaliseOutput values.
// You can construct a concrete instance of `ProjectConnectorsLokaliseInput` via:
//
//	ProjectConnectorsLokaliseArgs{...}
type ProjectConnectorsLokaliseInput interface {
	pulumi.Input

	ToProjectConnectorsLokaliseOutput() ProjectConnectorsLokaliseOutput
	ToProjectConnectorsLokaliseOutputWithContext(context.Context) ProjectConnectorsLokaliseOutput
}

type ProjectConnectorsLokaliseArgs struct {
	// Lokalise API token.
	ApiToken pulumi.StringInput `pulumi:"apiToken"`
	// (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
	CardId pulumi.StringPtrInput `pulumi:"cardId"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Lokalise project ID.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Lokalise team ID. If not provided, the oldest available team will be used.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// The translation provider to use ('gengo', 'google', 'lokalise', 'deepl'), default is 'deepl'.
	TranslationProvider pulumi.StringPtrInput `pulumi:"translationProvider"`
}

func (ProjectConnectorsLokaliseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsLokalise)(nil)).Elem()
}

func (i ProjectConnectorsLokaliseArgs) ToProjectConnectorsLokaliseOutput() ProjectConnectorsLokaliseOutput {
	return i.ToProjectConnectorsLokaliseOutputWithContext(context.Background())
}

func (i ProjectConnectorsLokaliseArgs) ToProjectConnectorsLokaliseOutputWithContext(ctx context.Context) ProjectConnectorsLokaliseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsLokaliseOutput)
}

// ProjectConnectorsLokaliseArrayInput is an input type that accepts ProjectConnectorsLokaliseArray and ProjectConnectorsLokaliseArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsLokaliseArrayInput` via:
//
//	ProjectConnectorsLokaliseArray{ ProjectConnectorsLokaliseArgs{...} }
type ProjectConnectorsLokaliseArrayInput interface {
	pulumi.Input

	ToProjectConnectorsLokaliseArrayOutput() ProjectConnectorsLokaliseArrayOutput
	ToProjectConnectorsLokaliseArrayOutputWithContext(context.Context) ProjectConnectorsLokaliseArrayOutput
}

type ProjectConnectorsLokaliseArray []ProjectConnectorsLokaliseInput

func (ProjectConnectorsLokaliseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsLokalise)(nil)).Elem()
}

func (i ProjectConnectorsLokaliseArray) ToProjectConnectorsLokaliseArrayOutput() ProjectConnectorsLokaliseArrayOutput {
	return i.ToProjectConnectorsLokaliseArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsLokaliseArray) ToProjectConnectorsLokaliseArrayOutputWithContext(ctx context.Context) ProjectConnectorsLokaliseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsLokaliseArrayOutput)
}

type ProjectConnectorsLokaliseOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsLokaliseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsLokalise)(nil)).Elem()
}

func (o ProjectConnectorsLokaliseOutput) ToProjectConnectorsLokaliseOutput() ProjectConnectorsLokaliseOutput {
	return o
}

func (o ProjectConnectorsLokaliseOutput) ToProjectConnectorsLokaliseOutputWithContext(ctx context.Context) ProjectConnectorsLokaliseOutput {
	return o
}

// Lokalise API token.
func (o ProjectConnectorsLokaliseOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) string { return v.ApiToken }).(pulumi.StringOutput)
}

// (Optional) The ID of the payment card to use for translation orders. If not provided, the team credit will be used.
func (o ProjectConnectorsLokaliseOutput) CardId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) *string { return v.CardId }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsLokaliseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsLokaliseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsLokaliseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) string { return v.Name }).(pulumi.StringOutput)
}

// Lokalise project ID.
func (o ProjectConnectorsLokaliseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Lokalise team ID. If not provided, the oldest available team will be used.
func (o ProjectConnectorsLokaliseOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// The translation provider to use ('gengo', 'google', 'lokalise', 'deepl'), default is 'deepl'.
func (o ProjectConnectorsLokaliseOutput) TranslationProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsLokalise) *string { return v.TranslationProvider }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsLokaliseArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsLokaliseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsLokalise)(nil)).Elem()
}

func (o ProjectConnectorsLokaliseArrayOutput) ToProjectConnectorsLokaliseArrayOutput() ProjectConnectorsLokaliseArrayOutput {
	return o
}

func (o ProjectConnectorsLokaliseArrayOutput) ToProjectConnectorsLokaliseArrayOutputWithContext(ctx context.Context) ProjectConnectorsLokaliseArrayOutput {
	return o
}

func (o ProjectConnectorsLokaliseArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsLokaliseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsLokalise {
		return vs[0].([]ProjectConnectorsLokalise)[vs[1].(int)]
	}).(ProjectConnectorsLokaliseOutput)
}

type ProjectConnectorsMparticle struct {
	// The mParticle Server to Server Key generated for the Descope service.
	ApiKey string `pulumi:"apiKey"`
	// The mParticle Server to Server Secret generated for the Descope service.
	ApiSecret string `pulumi:"apiSecret"`
	// The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
	BaseUrl *string `pulumi:"baseUrl"`
	// The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
	DefaultEnvironment *string `pulumi:"defaultEnvironment"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsMparticleInput is an input type that accepts ProjectConnectorsMparticleArgs and ProjectConnectorsMparticleOutput values.
// You can construct a concrete instance of `ProjectConnectorsMparticleInput` via:
//
//	ProjectConnectorsMparticleArgs{...}
type ProjectConnectorsMparticleInput interface {
	pulumi.Input

	ToProjectConnectorsMparticleOutput() ProjectConnectorsMparticleOutput
	ToProjectConnectorsMparticleOutputWithContext(context.Context) ProjectConnectorsMparticleOutput
}

type ProjectConnectorsMparticleArgs struct {
	// The mParticle Server to Server Key generated for the Descope service.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The mParticle Server to Server Secret generated for the Descope service.
	ApiSecret pulumi.StringInput `pulumi:"apiSecret"`
	// The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
	DefaultEnvironment pulumi.StringPtrInput `pulumi:"defaultEnvironment"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsMparticleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsMparticle)(nil)).Elem()
}

func (i ProjectConnectorsMparticleArgs) ToProjectConnectorsMparticleOutput() ProjectConnectorsMparticleOutput {
	return i.ToProjectConnectorsMparticleOutputWithContext(context.Background())
}

func (i ProjectConnectorsMparticleArgs) ToProjectConnectorsMparticleOutputWithContext(ctx context.Context) ProjectConnectorsMparticleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsMparticleOutput)
}

// ProjectConnectorsMparticleArrayInput is an input type that accepts ProjectConnectorsMparticleArray and ProjectConnectorsMparticleArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsMparticleArrayInput` via:
//
//	ProjectConnectorsMparticleArray{ ProjectConnectorsMparticleArgs{...} }
type ProjectConnectorsMparticleArrayInput interface {
	pulumi.Input

	ToProjectConnectorsMparticleArrayOutput() ProjectConnectorsMparticleArrayOutput
	ToProjectConnectorsMparticleArrayOutputWithContext(context.Context) ProjectConnectorsMparticleArrayOutput
}

type ProjectConnectorsMparticleArray []ProjectConnectorsMparticleInput

func (ProjectConnectorsMparticleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsMparticle)(nil)).Elem()
}

func (i ProjectConnectorsMparticleArray) ToProjectConnectorsMparticleArrayOutput() ProjectConnectorsMparticleArrayOutput {
	return i.ToProjectConnectorsMparticleArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsMparticleArray) ToProjectConnectorsMparticleArrayOutputWithContext(ctx context.Context) ProjectConnectorsMparticleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsMparticleArrayOutput)
}

type ProjectConnectorsMparticleOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsMparticleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsMparticle)(nil)).Elem()
}

func (o ProjectConnectorsMparticleOutput) ToProjectConnectorsMparticleOutput() ProjectConnectorsMparticleOutput {
	return o
}

func (o ProjectConnectorsMparticleOutput) ToProjectConnectorsMparticleOutputWithContext(ctx context.Context) ProjectConnectorsMparticleOutput {
	return o
}

// The mParticle Server to Server Key generated for the Descope service.
func (o ProjectConnectorsMparticleOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The mParticle Server to Server Secret generated for the Descope service.
func (o ProjectConnectorsMparticleOutput) ApiSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) string { return v.ApiSecret }).(pulumi.StringOutput)
}

// The base URL of the mParticle API, when using a custom domain in mParticle. default value is https://s2s.mparticle.com/
func (o ProjectConnectorsMparticleOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The default environment of which connector send data to, either “production” or “development“. default value: production. This field can be overridden per event (see at flows).
func (o ProjectConnectorsMparticleOutput) DefaultEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) *string { return v.DefaultEnvironment }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsMparticleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsMparticleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsMparticleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsMparticleOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsMparticle) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsMparticleArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsMparticleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsMparticle)(nil)).Elem()
}

func (o ProjectConnectorsMparticleArrayOutput) ToProjectConnectorsMparticleArrayOutput() ProjectConnectorsMparticleArrayOutput {
	return o
}

func (o ProjectConnectorsMparticleArrayOutput) ToProjectConnectorsMparticleArrayOutputWithContext(ctx context.Context) ProjectConnectorsMparticleArrayOutput {
	return o
}

func (o ProjectConnectorsMparticleArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsMparticleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsMparticle {
		return vs[0].([]ProjectConnectorsMparticle)[vs[1].(int)]
	}).(ProjectConnectorsMparticleOutput)
}

type ProjectConnectorsNewrelic struct {
	// Ingest License Key of the account you want to report data to.
	ApiKey string `pulumi:"apiKey"`
	// Whether to enable streaming of audit events.
	AuditEnabled *bool `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsNewrelicAuditFilter `pulumi:"auditFilters"`
	// The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
	DataCenter *string `pulumi:"dataCenter"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// Specify a custom prefix for all log fields. The default prefix is `descope.`.
	LogsPrefix *string `pulumi:"logsPrefix"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Enable this option to use a custom prefix for log fields.
	OverrideLogsPrefix *bool `pulumi:"overrideLogsPrefix"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled *bool `pulumi:"troubleshootLogEnabled"`
}

// ProjectConnectorsNewrelicInput is an input type that accepts ProjectConnectorsNewrelicArgs and ProjectConnectorsNewrelicOutput values.
// You can construct a concrete instance of `ProjectConnectorsNewrelicInput` via:
//
//	ProjectConnectorsNewrelicArgs{...}
type ProjectConnectorsNewrelicInput interface {
	pulumi.Input

	ToProjectConnectorsNewrelicOutput() ProjectConnectorsNewrelicOutput
	ToProjectConnectorsNewrelicOutputWithContext(context.Context) ProjectConnectorsNewrelicOutput
}

type ProjectConnectorsNewrelicArgs struct {
	// Ingest License Key of the account you want to report data to.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Whether to enable streaming of audit events.
	AuditEnabled pulumi.BoolPtrInput `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsNewrelicAuditFilterArrayInput `pulumi:"auditFilters"`
	// The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
	DataCenter pulumi.StringPtrInput `pulumi:"dataCenter"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// Specify a custom prefix for all log fields. The default prefix is `descope.`.
	LogsPrefix pulumi.StringPtrInput `pulumi:"logsPrefix"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Enable this option to use a custom prefix for log fields.
	OverrideLogsPrefix pulumi.BoolPtrInput `pulumi:"overrideLogsPrefix"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled pulumi.BoolPtrInput `pulumi:"troubleshootLogEnabled"`
}

func (ProjectConnectorsNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsNewrelic)(nil)).Elem()
}

func (i ProjectConnectorsNewrelicArgs) ToProjectConnectorsNewrelicOutput() ProjectConnectorsNewrelicOutput {
	return i.ToProjectConnectorsNewrelicOutputWithContext(context.Background())
}

func (i ProjectConnectorsNewrelicArgs) ToProjectConnectorsNewrelicOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsNewrelicOutput)
}

// ProjectConnectorsNewrelicArrayInput is an input type that accepts ProjectConnectorsNewrelicArray and ProjectConnectorsNewrelicArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsNewrelicArrayInput` via:
//
//	ProjectConnectorsNewrelicArray{ ProjectConnectorsNewrelicArgs{...} }
type ProjectConnectorsNewrelicArrayInput interface {
	pulumi.Input

	ToProjectConnectorsNewrelicArrayOutput() ProjectConnectorsNewrelicArrayOutput
	ToProjectConnectorsNewrelicArrayOutputWithContext(context.Context) ProjectConnectorsNewrelicArrayOutput
}

type ProjectConnectorsNewrelicArray []ProjectConnectorsNewrelicInput

func (ProjectConnectorsNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsNewrelic)(nil)).Elem()
}

func (i ProjectConnectorsNewrelicArray) ToProjectConnectorsNewrelicArrayOutput() ProjectConnectorsNewrelicArrayOutput {
	return i.ToProjectConnectorsNewrelicArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsNewrelicArray) ToProjectConnectorsNewrelicArrayOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsNewrelicArrayOutput)
}

type ProjectConnectorsNewrelicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsNewrelic)(nil)).Elem()
}

func (o ProjectConnectorsNewrelicOutput) ToProjectConnectorsNewrelicOutput() ProjectConnectorsNewrelicOutput {
	return o
}

func (o ProjectConnectorsNewrelicOutput) ToProjectConnectorsNewrelicOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicOutput {
	return o
}

// Ingest License Key of the account you want to report data to.
func (o ProjectConnectorsNewrelicOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Whether to enable streaming of audit events.
func (o ProjectConnectorsNewrelicOutput) AuditEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *bool { return v.AuditEnabled }).(pulumi.BoolPtrOutput)
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsNewrelicOutput) AuditFilters() ProjectConnectorsNewrelicAuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) []ProjectConnectorsNewrelicAuditFilter { return v.AuditFilters }).(ProjectConnectorsNewrelicAuditFilterArrayOutput)
}

// The New Relic data center the account belongs to. Possible values are: `US`, `EU`, `FedRAMP`. Default is `US`.
func (o ProjectConnectorsNewrelicOutput) DataCenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *string { return v.DataCenter }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsNewrelicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsNewrelicOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specify a custom prefix for all log fields. The default prefix is `descope.`.
func (o ProjectConnectorsNewrelicOutput) LogsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *string { return v.LogsPrefix }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// Enable this option to use a custom prefix for log fields.
func (o ProjectConnectorsNewrelicOutput) OverrideLogsPrefix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *bool { return v.OverrideLogsPrefix }).(pulumi.BoolPtrOutput)
}

// Whether to send troubleshooting events.
func (o ProjectConnectorsNewrelicOutput) TroubleshootLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelic) *bool { return v.TroubleshootLogEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsNewrelicArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsNewrelic)(nil)).Elem()
}

func (o ProjectConnectorsNewrelicArrayOutput) ToProjectConnectorsNewrelicArrayOutput() ProjectConnectorsNewrelicArrayOutput {
	return o
}

func (o ProjectConnectorsNewrelicArrayOutput) ToProjectConnectorsNewrelicArrayOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicArrayOutput {
	return o
}

func (o ProjectConnectorsNewrelicArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsNewrelic {
		return vs[0].([]ProjectConnectorsNewrelic)[vs[1].(int)]
	}).(ProjectConnectorsNewrelicOutput)
}

type ProjectConnectorsNewrelicAuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsNewrelicAuditFilterInput is an input type that accepts ProjectConnectorsNewrelicAuditFilterArgs and ProjectConnectorsNewrelicAuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsNewrelicAuditFilterInput` via:
//
//	ProjectConnectorsNewrelicAuditFilterArgs{...}
type ProjectConnectorsNewrelicAuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsNewrelicAuditFilterOutput() ProjectConnectorsNewrelicAuditFilterOutput
	ToProjectConnectorsNewrelicAuditFilterOutputWithContext(context.Context) ProjectConnectorsNewrelicAuditFilterOutput
}

type ProjectConnectorsNewrelicAuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsNewrelicAuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsNewrelicAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsNewrelicAuditFilterArgs) ToProjectConnectorsNewrelicAuditFilterOutput() ProjectConnectorsNewrelicAuditFilterOutput {
	return i.ToProjectConnectorsNewrelicAuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsNewrelicAuditFilterArgs) ToProjectConnectorsNewrelicAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicAuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsNewrelicAuditFilterOutput)
}

// ProjectConnectorsNewrelicAuditFilterArrayInput is an input type that accepts ProjectConnectorsNewrelicAuditFilterArray and ProjectConnectorsNewrelicAuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsNewrelicAuditFilterArrayInput` via:
//
//	ProjectConnectorsNewrelicAuditFilterArray{ ProjectConnectorsNewrelicAuditFilterArgs{...} }
type ProjectConnectorsNewrelicAuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsNewrelicAuditFilterArrayOutput() ProjectConnectorsNewrelicAuditFilterArrayOutput
	ToProjectConnectorsNewrelicAuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsNewrelicAuditFilterArrayOutput
}

type ProjectConnectorsNewrelicAuditFilterArray []ProjectConnectorsNewrelicAuditFilterInput

func (ProjectConnectorsNewrelicAuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsNewrelicAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsNewrelicAuditFilterArray) ToProjectConnectorsNewrelicAuditFilterArrayOutput() ProjectConnectorsNewrelicAuditFilterArrayOutput {
	return i.ToProjectConnectorsNewrelicAuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsNewrelicAuditFilterArray) ToProjectConnectorsNewrelicAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicAuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsNewrelicAuditFilterArrayOutput)
}

type ProjectConnectorsNewrelicAuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsNewrelicAuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsNewrelicAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsNewrelicAuditFilterOutput) ToProjectConnectorsNewrelicAuditFilterOutput() ProjectConnectorsNewrelicAuditFilterOutput {
	return o
}

func (o ProjectConnectorsNewrelicAuditFilterOutput) ToProjectConnectorsNewrelicAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicAuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsNewrelicAuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelicAuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsNewrelicAuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelicAuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsNewrelicAuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsNewrelicAuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsNewrelicAuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsNewrelicAuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsNewrelicAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsNewrelicAuditFilterArrayOutput) ToProjectConnectorsNewrelicAuditFilterArrayOutput() ProjectConnectorsNewrelicAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsNewrelicAuditFilterArrayOutput) ToProjectConnectorsNewrelicAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsNewrelicAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsNewrelicAuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsNewrelicAuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsNewrelicAuditFilter {
		return vs[0].([]ProjectConnectorsNewrelicAuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsNewrelicAuditFilterOutput)
}

type ProjectConnectorsRadar struct {
	// The address types to return.
	AddressTypes *string `pulumi:"addressTypes"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// The language in which to return results.
	Language *string `pulumi:"language"`
	// The maximum number of results to return.
	Limit *float64 `pulumi:"limit"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Radar publishable API key.
	PublicApiKey string `pulumi:"publicApiKey"`
	// The region code, specified as a two-letter ISO 3166 code.
	Region *string `pulumi:"region"`
}

// ProjectConnectorsRadarInput is an input type that accepts ProjectConnectorsRadarArgs and ProjectConnectorsRadarOutput values.
// You can construct a concrete instance of `ProjectConnectorsRadarInput` via:
//
//	ProjectConnectorsRadarArgs{...}
type ProjectConnectorsRadarInput interface {
	pulumi.Input

	ToProjectConnectorsRadarOutput() ProjectConnectorsRadarOutput
	ToProjectConnectorsRadarOutputWithContext(context.Context) ProjectConnectorsRadarOutput
}

type ProjectConnectorsRadarArgs struct {
	// The address types to return.
	AddressTypes pulumi.StringPtrInput `pulumi:"addressTypes"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// The language in which to return results.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// The maximum number of results to return.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Radar publishable API key.
	PublicApiKey pulumi.StringInput `pulumi:"publicApiKey"`
	// The region code, specified as a two-letter ISO 3166 code.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (ProjectConnectorsRadarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRadar)(nil)).Elem()
}

func (i ProjectConnectorsRadarArgs) ToProjectConnectorsRadarOutput() ProjectConnectorsRadarOutput {
	return i.ToProjectConnectorsRadarOutputWithContext(context.Background())
}

func (i ProjectConnectorsRadarArgs) ToProjectConnectorsRadarOutputWithContext(ctx context.Context) ProjectConnectorsRadarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRadarOutput)
}

// ProjectConnectorsRadarArrayInput is an input type that accepts ProjectConnectorsRadarArray and ProjectConnectorsRadarArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsRadarArrayInput` via:
//
//	ProjectConnectorsRadarArray{ ProjectConnectorsRadarArgs{...} }
type ProjectConnectorsRadarArrayInput interface {
	pulumi.Input

	ToProjectConnectorsRadarArrayOutput() ProjectConnectorsRadarArrayOutput
	ToProjectConnectorsRadarArrayOutputWithContext(context.Context) ProjectConnectorsRadarArrayOutput
}

type ProjectConnectorsRadarArray []ProjectConnectorsRadarInput

func (ProjectConnectorsRadarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRadar)(nil)).Elem()
}

func (i ProjectConnectorsRadarArray) ToProjectConnectorsRadarArrayOutput() ProjectConnectorsRadarArrayOutput {
	return i.ToProjectConnectorsRadarArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsRadarArray) ToProjectConnectorsRadarArrayOutputWithContext(ctx context.Context) ProjectConnectorsRadarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRadarArrayOutput)
}

type ProjectConnectorsRadarOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRadarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRadar)(nil)).Elem()
}

func (o ProjectConnectorsRadarOutput) ToProjectConnectorsRadarOutput() ProjectConnectorsRadarOutput {
	return o
}

func (o ProjectConnectorsRadarOutput) ToProjectConnectorsRadarOutputWithContext(ctx context.Context) ProjectConnectorsRadarOutput {
	return o
}

// The address types to return.
func (o ProjectConnectorsRadarOutput) AddressTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *string { return v.AddressTypes }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsRadarOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsRadarOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The language in which to return results.
func (o ProjectConnectorsRadarOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// The maximum number of results to return.
func (o ProjectConnectorsRadarOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsRadarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) string { return v.Name }).(pulumi.StringOutput)
}

// The Radar publishable API key.
func (o ProjectConnectorsRadarOutput) PublicApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) string { return v.PublicApiKey }).(pulumi.StringOutput)
}

// The region code, specified as a two-letter ISO 3166 code.
func (o ProjectConnectorsRadarOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRadar) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsRadarArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRadarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRadar)(nil)).Elem()
}

func (o ProjectConnectorsRadarArrayOutput) ToProjectConnectorsRadarArrayOutput() ProjectConnectorsRadarArrayOutput {
	return o
}

func (o ProjectConnectorsRadarArrayOutput) ToProjectConnectorsRadarArrayOutputWithContext(ctx context.Context) ProjectConnectorsRadarArrayOutput {
	return o
}

func (o ProjectConnectorsRadarArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsRadarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsRadar {
		return vs[0].([]ProjectConnectorsRadar)[vs[1].(int)]
	}).(ProjectConnectorsRadarOutput)
}

type ProjectConnectorsRecaptcha struct {
	// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
	AssessmentScore *float64 `pulumi:"assessmentScore"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
	OverrideAssessment *bool `pulumi:"overrideAssessment"`
	// The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user's response.
	SecretKey string `pulumi:"secretKey"`
	// The site key is used to invoke reCAPTCHA service on your site or mobile application.
	SiteKey string `pulumi:"siteKey"`
}

// ProjectConnectorsRecaptchaInput is an input type that accepts ProjectConnectorsRecaptchaArgs and ProjectConnectorsRecaptchaOutput values.
// You can construct a concrete instance of `ProjectConnectorsRecaptchaInput` via:
//
//	ProjectConnectorsRecaptchaArgs{...}
type ProjectConnectorsRecaptchaInput interface {
	pulumi.Input

	ToProjectConnectorsRecaptchaOutput() ProjectConnectorsRecaptchaOutput
	ToProjectConnectorsRecaptchaOutputWithContext(context.Context) ProjectConnectorsRecaptchaOutput
}

type ProjectConnectorsRecaptchaArgs struct {
	// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
	AssessmentScore pulumi.Float64PtrInput `pulumi:"assessmentScore"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
	OverrideAssessment pulumi.BoolPtrInput `pulumi:"overrideAssessment"`
	// The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user's response.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The site key is used to invoke reCAPTCHA service on your site or mobile application.
	SiteKey pulumi.StringInput `pulumi:"siteKey"`
}

func (ProjectConnectorsRecaptchaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRecaptcha)(nil)).Elem()
}

func (i ProjectConnectorsRecaptchaArgs) ToProjectConnectorsRecaptchaOutput() ProjectConnectorsRecaptchaOutput {
	return i.ToProjectConnectorsRecaptchaOutputWithContext(context.Background())
}

func (i ProjectConnectorsRecaptchaArgs) ToProjectConnectorsRecaptchaOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRecaptchaOutput)
}

// ProjectConnectorsRecaptchaArrayInput is an input type that accepts ProjectConnectorsRecaptchaArray and ProjectConnectorsRecaptchaArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsRecaptchaArrayInput` via:
//
//	ProjectConnectorsRecaptchaArray{ ProjectConnectorsRecaptchaArgs{...} }
type ProjectConnectorsRecaptchaArrayInput interface {
	pulumi.Input

	ToProjectConnectorsRecaptchaArrayOutput() ProjectConnectorsRecaptchaArrayOutput
	ToProjectConnectorsRecaptchaArrayOutputWithContext(context.Context) ProjectConnectorsRecaptchaArrayOutput
}

type ProjectConnectorsRecaptchaArray []ProjectConnectorsRecaptchaInput

func (ProjectConnectorsRecaptchaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRecaptcha)(nil)).Elem()
}

func (i ProjectConnectorsRecaptchaArray) ToProjectConnectorsRecaptchaArrayOutput() ProjectConnectorsRecaptchaArrayOutput {
	return i.ToProjectConnectorsRecaptchaArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsRecaptchaArray) ToProjectConnectorsRecaptchaArrayOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRecaptchaArrayOutput)
}

type ProjectConnectorsRecaptchaOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRecaptchaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRecaptcha)(nil)).Elem()
}

func (o ProjectConnectorsRecaptchaOutput) ToProjectConnectorsRecaptchaOutput() ProjectConnectorsRecaptchaOutput {
	return o
}

func (o ProjectConnectorsRecaptchaOutput) ToProjectConnectorsRecaptchaOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaOutput {
	return o
}

// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
func (o ProjectConnectorsRecaptchaOutput) AssessmentScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) *float64 { return v.AssessmentScore }).(pulumi.Float64PtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsRecaptchaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsRecaptchaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsRecaptchaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) string { return v.Name }).(pulumi.StringOutput)
}

// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
func (o ProjectConnectorsRecaptchaOutput) OverrideAssessment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) *bool { return v.OverrideAssessment }).(pulumi.BoolPtrOutput)
}

// The secret key authorizes communication between Descope backend and the reCAPTCHA server to verify the user's response.
func (o ProjectConnectorsRecaptchaOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The site key is used to invoke reCAPTCHA service on your site or mobile application.
func (o ProjectConnectorsRecaptchaOutput) SiteKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptcha) string { return v.SiteKey }).(pulumi.StringOutput)
}

type ProjectConnectorsRecaptchaArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRecaptchaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRecaptcha)(nil)).Elem()
}

func (o ProjectConnectorsRecaptchaArrayOutput) ToProjectConnectorsRecaptchaArrayOutput() ProjectConnectorsRecaptchaArrayOutput {
	return o
}

func (o ProjectConnectorsRecaptchaArrayOutput) ToProjectConnectorsRecaptchaArrayOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaArrayOutput {
	return o
}

func (o ProjectConnectorsRecaptchaArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsRecaptchaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsRecaptcha {
		return vs[0].([]ProjectConnectorsRecaptcha)[vs[1].(int)]
	}).(ProjectConnectorsRecaptchaOutput)
}

type ProjectConnectorsRecaptchaEnterprise struct {
	// API key associated with the current project.
	ApiKey string `pulumi:"apiKey"`
	// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
	AssessmentScore *float64 `pulumi:"assessmentScore"`
	// Apply a custom url to the reCAPTCHA Enterprise scripts. This is useful when attempting to use reCAPTCHA globally. Defaults to https://www.google.com
	BaseUrl *string `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
	OverrideAssessment *bool `pulumi:"overrideAssessment"`
	// The Google Cloud project ID where the reCAPTCHA Enterprise is managed.
	ProjectId string `pulumi:"projectId"`
	// The site key is used to invoke reCAPTCHA Enterprise service on your site or mobile application.
	SiteKey string `pulumi:"siteKey"`
}

// ProjectConnectorsRecaptchaEnterpriseInput is an input type that accepts ProjectConnectorsRecaptchaEnterpriseArgs and ProjectConnectorsRecaptchaEnterpriseOutput values.
// You can construct a concrete instance of `ProjectConnectorsRecaptchaEnterpriseInput` via:
//
//	ProjectConnectorsRecaptchaEnterpriseArgs{...}
type ProjectConnectorsRecaptchaEnterpriseInput interface {
	pulumi.Input

	ToProjectConnectorsRecaptchaEnterpriseOutput() ProjectConnectorsRecaptchaEnterpriseOutput
	ToProjectConnectorsRecaptchaEnterpriseOutputWithContext(context.Context) ProjectConnectorsRecaptchaEnterpriseOutput
}

type ProjectConnectorsRecaptchaEnterpriseArgs struct {
	// API key associated with the current project.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
	AssessmentScore pulumi.Float64PtrInput `pulumi:"assessmentScore"`
	// Apply a custom url to the reCAPTCHA Enterprise scripts. This is useful when attempting to use reCAPTCHA globally. Defaults to https://www.google.com
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
	OverrideAssessment pulumi.BoolPtrInput `pulumi:"overrideAssessment"`
	// The Google Cloud project ID where the reCAPTCHA Enterprise is managed.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The site key is used to invoke reCAPTCHA Enterprise service on your site or mobile application.
	SiteKey pulumi.StringInput `pulumi:"siteKey"`
}

func (ProjectConnectorsRecaptchaEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRecaptchaEnterprise)(nil)).Elem()
}

func (i ProjectConnectorsRecaptchaEnterpriseArgs) ToProjectConnectorsRecaptchaEnterpriseOutput() ProjectConnectorsRecaptchaEnterpriseOutput {
	return i.ToProjectConnectorsRecaptchaEnterpriseOutputWithContext(context.Background())
}

func (i ProjectConnectorsRecaptchaEnterpriseArgs) ToProjectConnectorsRecaptchaEnterpriseOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRecaptchaEnterpriseOutput)
}

// ProjectConnectorsRecaptchaEnterpriseArrayInput is an input type that accepts ProjectConnectorsRecaptchaEnterpriseArray and ProjectConnectorsRecaptchaEnterpriseArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsRecaptchaEnterpriseArrayInput` via:
//
//	ProjectConnectorsRecaptchaEnterpriseArray{ ProjectConnectorsRecaptchaEnterpriseArgs{...} }
type ProjectConnectorsRecaptchaEnterpriseArrayInput interface {
	pulumi.Input

	ToProjectConnectorsRecaptchaEnterpriseArrayOutput() ProjectConnectorsRecaptchaEnterpriseArrayOutput
	ToProjectConnectorsRecaptchaEnterpriseArrayOutputWithContext(context.Context) ProjectConnectorsRecaptchaEnterpriseArrayOutput
}

type ProjectConnectorsRecaptchaEnterpriseArray []ProjectConnectorsRecaptchaEnterpriseInput

func (ProjectConnectorsRecaptchaEnterpriseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRecaptchaEnterprise)(nil)).Elem()
}

func (i ProjectConnectorsRecaptchaEnterpriseArray) ToProjectConnectorsRecaptchaEnterpriseArrayOutput() ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return i.ToProjectConnectorsRecaptchaEnterpriseArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsRecaptchaEnterpriseArray) ToProjectConnectorsRecaptchaEnterpriseArrayOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRecaptchaEnterpriseArrayOutput)
}

type ProjectConnectorsRecaptchaEnterpriseOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRecaptchaEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRecaptchaEnterprise)(nil)).Elem()
}

func (o ProjectConnectorsRecaptchaEnterpriseOutput) ToProjectConnectorsRecaptchaEnterpriseOutput() ProjectConnectorsRecaptchaEnterpriseOutput {
	return o
}

func (o ProjectConnectorsRecaptchaEnterpriseOutput) ToProjectConnectorsRecaptchaEnterpriseOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaEnterpriseOutput {
	return o
}

// API key associated with the current project.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) string { return v.ApiKey }).(pulumi.StringOutput)
}

// When configured, the Recaptcha action will return the score without assessing the request. The score ranges between 0 and 1, where 1 is a human interaction and 0 is a bot.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) AssessmentScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) *float64 { return v.AssessmentScore }).(pulumi.Float64PtrOutput)
}

// Apply a custom url to the reCAPTCHA Enterprise scripts. This is useful when attempting to use reCAPTCHA globally. Defaults to https://www.google.com
func (o ProjectConnectorsRecaptchaEnterpriseOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsRecaptchaEnterpriseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) string { return v.Name }).(pulumi.StringOutput)
}

// Override the default assessment model. Note: Overriding assessment is intended for automated testing and should not be utilized in production environments.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) OverrideAssessment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) *bool { return v.OverrideAssessment }).(pulumi.BoolPtrOutput)
}

// The Google Cloud project ID where the reCAPTCHA Enterprise is managed.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The site key is used to invoke reCAPTCHA Enterprise service on your site or mobile application.
func (o ProjectConnectorsRecaptchaEnterpriseOutput) SiteKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRecaptchaEnterprise) string { return v.SiteKey }).(pulumi.StringOutput)
}

type ProjectConnectorsRecaptchaEnterpriseArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRecaptchaEnterpriseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRecaptchaEnterprise)(nil)).Elem()
}

func (o ProjectConnectorsRecaptchaEnterpriseArrayOutput) ToProjectConnectorsRecaptchaEnterpriseArrayOutput() ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return o
}

func (o ProjectConnectorsRecaptchaEnterpriseArrayOutput) ToProjectConnectorsRecaptchaEnterpriseArrayOutputWithContext(ctx context.Context) ProjectConnectorsRecaptchaEnterpriseArrayOutput {
	return o
}

func (o ProjectConnectorsRecaptchaEnterpriseArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsRecaptchaEnterpriseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsRecaptchaEnterprise {
		return vs[0].([]ProjectConnectorsRecaptchaEnterprise)[vs[1].(int)]
	}).(ProjectConnectorsRecaptchaEnterpriseOutput)
}

type ProjectConnectorsRekognition struct {
	// The AWS access key ID
	AccessKeyId string `pulumi:"accessKeyId"`
	// The collection to store registered users in. Should match `[a-zA-Z0-9_.-]+` pattern. Changing this will cause losing existing users.
	CollectionId string `pulumi:"collectionId"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The AWS secret access key
	SecretAccessKey string `pulumi:"secretAccessKey"`
}

// ProjectConnectorsRekognitionInput is an input type that accepts ProjectConnectorsRekognitionArgs and ProjectConnectorsRekognitionOutput values.
// You can construct a concrete instance of `ProjectConnectorsRekognitionInput` via:
//
//	ProjectConnectorsRekognitionArgs{...}
type ProjectConnectorsRekognitionInput interface {
	pulumi.Input

	ToProjectConnectorsRekognitionOutput() ProjectConnectorsRekognitionOutput
	ToProjectConnectorsRekognitionOutputWithContext(context.Context) ProjectConnectorsRekognitionOutput
}

type ProjectConnectorsRekognitionArgs struct {
	// The AWS access key ID
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// The collection to store registered users in. Should match `[a-zA-Z0-9_.-]+` pattern. Changing this will cause losing existing users.
	CollectionId pulumi.StringInput `pulumi:"collectionId"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS secret access key
	SecretAccessKey pulumi.StringInput `pulumi:"secretAccessKey"`
}

func (ProjectConnectorsRekognitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRekognition)(nil)).Elem()
}

func (i ProjectConnectorsRekognitionArgs) ToProjectConnectorsRekognitionOutput() ProjectConnectorsRekognitionOutput {
	return i.ToProjectConnectorsRekognitionOutputWithContext(context.Background())
}

func (i ProjectConnectorsRekognitionArgs) ToProjectConnectorsRekognitionOutputWithContext(ctx context.Context) ProjectConnectorsRekognitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRekognitionOutput)
}

// ProjectConnectorsRekognitionArrayInput is an input type that accepts ProjectConnectorsRekognitionArray and ProjectConnectorsRekognitionArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsRekognitionArrayInput` via:
//
//	ProjectConnectorsRekognitionArray{ ProjectConnectorsRekognitionArgs{...} }
type ProjectConnectorsRekognitionArrayInput interface {
	pulumi.Input

	ToProjectConnectorsRekognitionArrayOutput() ProjectConnectorsRekognitionArrayOutput
	ToProjectConnectorsRekognitionArrayOutputWithContext(context.Context) ProjectConnectorsRekognitionArrayOutput
}

type ProjectConnectorsRekognitionArray []ProjectConnectorsRekognitionInput

func (ProjectConnectorsRekognitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRekognition)(nil)).Elem()
}

func (i ProjectConnectorsRekognitionArray) ToProjectConnectorsRekognitionArrayOutput() ProjectConnectorsRekognitionArrayOutput {
	return i.ToProjectConnectorsRekognitionArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsRekognitionArray) ToProjectConnectorsRekognitionArrayOutputWithContext(ctx context.Context) ProjectConnectorsRekognitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsRekognitionArrayOutput)
}

type ProjectConnectorsRekognitionOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRekognitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsRekognition)(nil)).Elem()
}

func (o ProjectConnectorsRekognitionOutput) ToProjectConnectorsRekognitionOutput() ProjectConnectorsRekognitionOutput {
	return o
}

func (o ProjectConnectorsRekognitionOutput) ToProjectConnectorsRekognitionOutputWithContext(ctx context.Context) ProjectConnectorsRekognitionOutput {
	return o
}

// The AWS access key ID
func (o ProjectConnectorsRekognitionOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// The collection to store registered users in. Should match `[a-zA-Z0-9_.-]+` pattern. Changing this will cause losing existing users.
func (o ProjectConnectorsRekognitionOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) string { return v.CollectionId }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsRekognitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsRekognitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsRekognitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS secret access key
func (o ProjectConnectorsRekognitionOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsRekognition) string { return v.SecretAccessKey }).(pulumi.StringOutput)
}

type ProjectConnectorsRekognitionArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsRekognitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsRekognition)(nil)).Elem()
}

func (o ProjectConnectorsRekognitionArrayOutput) ToProjectConnectorsRekognitionArrayOutput() ProjectConnectorsRekognitionArrayOutput {
	return o
}

func (o ProjectConnectorsRekognitionArrayOutput) ToProjectConnectorsRekognitionArrayOutputWithContext(ctx context.Context) ProjectConnectorsRekognitionArrayOutput {
	return o
}

func (o ProjectConnectorsRekognitionArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsRekognitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsRekognition {
		return vs[0].([]ProjectConnectorsRekognition)[vs[1].(int)]
	}).(ProjectConnectorsRekognitionOutput)
}

type ProjectConnectorsSalesforce struct {
	// The Salesforce API base URL.
	BaseUrl string `pulumi:"baseUrl"`
	// The consumer key of the connected app.
	ClientId string `pulumi:"clientId"`
	// The consumer secret of the connected app.
	ClientSecret string `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// REST API Version.
	Version string `pulumi:"version"`
}

// ProjectConnectorsSalesforceInput is an input type that accepts ProjectConnectorsSalesforceArgs and ProjectConnectorsSalesforceOutput values.
// You can construct a concrete instance of `ProjectConnectorsSalesforceInput` via:
//
//	ProjectConnectorsSalesforceArgs{...}
type ProjectConnectorsSalesforceInput interface {
	pulumi.Input

	ToProjectConnectorsSalesforceOutput() ProjectConnectorsSalesforceOutput
	ToProjectConnectorsSalesforceOutputWithContext(context.Context) ProjectConnectorsSalesforceOutput
}

type ProjectConnectorsSalesforceArgs struct {
	// The Salesforce API base URL.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The consumer key of the connected app.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The consumer secret of the connected app.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// REST API Version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ProjectConnectorsSalesforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSalesforce)(nil)).Elem()
}

func (i ProjectConnectorsSalesforceArgs) ToProjectConnectorsSalesforceOutput() ProjectConnectorsSalesforceOutput {
	return i.ToProjectConnectorsSalesforceOutputWithContext(context.Background())
}

func (i ProjectConnectorsSalesforceArgs) ToProjectConnectorsSalesforceOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSalesforceOutput)
}

// ProjectConnectorsSalesforceArrayInput is an input type that accepts ProjectConnectorsSalesforceArray and ProjectConnectorsSalesforceArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSalesforceArrayInput` via:
//
//	ProjectConnectorsSalesforceArray{ ProjectConnectorsSalesforceArgs{...} }
type ProjectConnectorsSalesforceArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSalesforceArrayOutput() ProjectConnectorsSalesforceArrayOutput
	ToProjectConnectorsSalesforceArrayOutputWithContext(context.Context) ProjectConnectorsSalesforceArrayOutput
}

type ProjectConnectorsSalesforceArray []ProjectConnectorsSalesforceInput

func (ProjectConnectorsSalesforceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSalesforce)(nil)).Elem()
}

func (i ProjectConnectorsSalesforceArray) ToProjectConnectorsSalesforceArrayOutput() ProjectConnectorsSalesforceArrayOutput {
	return i.ToProjectConnectorsSalesforceArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSalesforceArray) ToProjectConnectorsSalesforceArrayOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSalesforceArrayOutput)
}

type ProjectConnectorsSalesforceOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSalesforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSalesforce)(nil)).Elem()
}

func (o ProjectConnectorsSalesforceOutput) ToProjectConnectorsSalesforceOutput() ProjectConnectorsSalesforceOutput {
	return o
}

func (o ProjectConnectorsSalesforceOutput) ToProjectConnectorsSalesforceOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceOutput {
	return o
}

// The Salesforce API base URL.
func (o ProjectConnectorsSalesforceOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The consumer key of the connected app.
func (o ProjectConnectorsSalesforceOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) string { return v.ClientId }).(pulumi.StringOutput)
}

// The consumer secret of the connected app.
func (o ProjectConnectorsSalesforceOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSalesforceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSalesforceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSalesforceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) string { return v.Name }).(pulumi.StringOutput)
}

// REST API Version.
func (o ProjectConnectorsSalesforceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforce) string { return v.Version }).(pulumi.StringOutput)
}

type ProjectConnectorsSalesforceArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSalesforceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSalesforce)(nil)).Elem()
}

func (o ProjectConnectorsSalesforceArrayOutput) ToProjectConnectorsSalesforceArrayOutput() ProjectConnectorsSalesforceArrayOutput {
	return o
}

func (o ProjectConnectorsSalesforceArrayOutput) ToProjectConnectorsSalesforceArrayOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceArrayOutput {
	return o
}

func (o ProjectConnectorsSalesforceArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSalesforceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSalesforce {
		return vs[0].([]ProjectConnectorsSalesforce)[vs[1].(int)]
	}).(ProjectConnectorsSalesforceOutput)
}

type ProjectConnectorsSalesforceMarketingCloud struct {
	// Account identifier, or MID, of the target business unit.
	AccountId *string `pulumi:"accountId"`
	// Client ID issued when you create the API integration in Installed Packages.
	ClientId string `pulumi:"clientId"`
	// Client secret issued when you create the API integration in Installed Packages.
	ClientSecret string `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Space-separated list of data-access permissions for your connector.
	Scope *string `pulumi:"scope"`
	// The Salesforce Marketing Cloud endpoint subdomain.
	Subdomain string `pulumi:"subdomain"`
}

// ProjectConnectorsSalesforceMarketingCloudInput is an input type that accepts ProjectConnectorsSalesforceMarketingCloudArgs and ProjectConnectorsSalesforceMarketingCloudOutput values.
// You can construct a concrete instance of `ProjectConnectorsSalesforceMarketingCloudInput` via:
//
//	ProjectConnectorsSalesforceMarketingCloudArgs{...}
type ProjectConnectorsSalesforceMarketingCloudInput interface {
	pulumi.Input

	ToProjectConnectorsSalesforceMarketingCloudOutput() ProjectConnectorsSalesforceMarketingCloudOutput
	ToProjectConnectorsSalesforceMarketingCloudOutputWithContext(context.Context) ProjectConnectorsSalesforceMarketingCloudOutput
}

type ProjectConnectorsSalesforceMarketingCloudArgs struct {
	// Account identifier, or MID, of the target business unit.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Client ID issued when you create the API integration in Installed Packages.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client secret issued when you create the API integration in Installed Packages.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Space-separated list of data-access permissions for your connector.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The Salesforce Marketing Cloud endpoint subdomain.
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
}

func (ProjectConnectorsSalesforceMarketingCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSalesforceMarketingCloud)(nil)).Elem()
}

func (i ProjectConnectorsSalesforceMarketingCloudArgs) ToProjectConnectorsSalesforceMarketingCloudOutput() ProjectConnectorsSalesforceMarketingCloudOutput {
	return i.ToProjectConnectorsSalesforceMarketingCloudOutputWithContext(context.Background())
}

func (i ProjectConnectorsSalesforceMarketingCloudArgs) ToProjectConnectorsSalesforceMarketingCloudOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceMarketingCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSalesforceMarketingCloudOutput)
}

// ProjectConnectorsSalesforceMarketingCloudArrayInput is an input type that accepts ProjectConnectorsSalesforceMarketingCloudArray and ProjectConnectorsSalesforceMarketingCloudArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSalesforceMarketingCloudArrayInput` via:
//
//	ProjectConnectorsSalesforceMarketingCloudArray{ ProjectConnectorsSalesforceMarketingCloudArgs{...} }
type ProjectConnectorsSalesforceMarketingCloudArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSalesforceMarketingCloudArrayOutput() ProjectConnectorsSalesforceMarketingCloudArrayOutput
	ToProjectConnectorsSalesforceMarketingCloudArrayOutputWithContext(context.Context) ProjectConnectorsSalesforceMarketingCloudArrayOutput
}

type ProjectConnectorsSalesforceMarketingCloudArray []ProjectConnectorsSalesforceMarketingCloudInput

func (ProjectConnectorsSalesforceMarketingCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSalesforceMarketingCloud)(nil)).Elem()
}

func (i ProjectConnectorsSalesforceMarketingCloudArray) ToProjectConnectorsSalesforceMarketingCloudArrayOutput() ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return i.ToProjectConnectorsSalesforceMarketingCloudArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSalesforceMarketingCloudArray) ToProjectConnectorsSalesforceMarketingCloudArrayOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSalesforceMarketingCloudArrayOutput)
}

type ProjectConnectorsSalesforceMarketingCloudOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSalesforceMarketingCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSalesforceMarketingCloud)(nil)).Elem()
}

func (o ProjectConnectorsSalesforceMarketingCloudOutput) ToProjectConnectorsSalesforceMarketingCloudOutput() ProjectConnectorsSalesforceMarketingCloudOutput {
	return o
}

func (o ProjectConnectorsSalesforceMarketingCloudOutput) ToProjectConnectorsSalesforceMarketingCloudOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceMarketingCloudOutput {
	return o
}

// Account identifier, or MID, of the target business unit.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Client ID issued when you create the API integration in Installed Packages.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret issued when you create the API integration in Installed Packages.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSalesforceMarketingCloudOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) string { return v.Name }).(pulumi.StringOutput)
}

// Space-separated list of data-access permissions for your connector.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The Salesforce Marketing Cloud endpoint subdomain.
func (o ProjectConnectorsSalesforceMarketingCloudOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSalesforceMarketingCloud) string { return v.Subdomain }).(pulumi.StringOutput)
}

type ProjectConnectorsSalesforceMarketingCloudArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSalesforceMarketingCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSalesforceMarketingCloud)(nil)).Elem()
}

func (o ProjectConnectorsSalesforceMarketingCloudArrayOutput) ToProjectConnectorsSalesforceMarketingCloudArrayOutput() ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return o
}

func (o ProjectConnectorsSalesforceMarketingCloudArrayOutput) ToProjectConnectorsSalesforceMarketingCloudArrayOutputWithContext(ctx context.Context) ProjectConnectorsSalesforceMarketingCloudArrayOutput {
	return o
}

func (o ProjectConnectorsSalesforceMarketingCloudArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSalesforceMarketingCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSalesforceMarketingCloud {
		return vs[0].([]ProjectConnectorsSalesforceMarketingCloud)[vs[1].(int)]
	}).(ProjectConnectorsSalesforceMarketingCloudOutput)
}

type ProjectConnectorsSardine struct {
	// The base URL for the Sardine API, e.g.: https://api.sandbox.sardine.ai, https://api.sardine.ai, https://api.eu.sardine.ai.
	BaseUrl string `pulumi:"baseUrl"`
	// The Sardine Client ID.
	ClientId string `pulumi:"clientId"`
	// The Sardine Client Secret.
	ClientSecret string `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsSardineInput is an input type that accepts ProjectConnectorsSardineArgs and ProjectConnectorsSardineOutput values.
// You can construct a concrete instance of `ProjectConnectorsSardineInput` via:
//
//	ProjectConnectorsSardineArgs{...}
type ProjectConnectorsSardineInput interface {
	pulumi.Input

	ToProjectConnectorsSardineOutput() ProjectConnectorsSardineOutput
	ToProjectConnectorsSardineOutputWithContext(context.Context) ProjectConnectorsSardineOutput
}

type ProjectConnectorsSardineArgs struct {
	// The base URL for the Sardine API, e.g.: https://api.sandbox.sardine.ai, https://api.sardine.ai, https://api.eu.sardine.ai.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The Sardine Client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Sardine Client Secret.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsSardineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSardine)(nil)).Elem()
}

func (i ProjectConnectorsSardineArgs) ToProjectConnectorsSardineOutput() ProjectConnectorsSardineOutput {
	return i.ToProjectConnectorsSardineOutputWithContext(context.Background())
}

func (i ProjectConnectorsSardineArgs) ToProjectConnectorsSardineOutputWithContext(ctx context.Context) ProjectConnectorsSardineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSardineOutput)
}

// ProjectConnectorsSardineArrayInput is an input type that accepts ProjectConnectorsSardineArray and ProjectConnectorsSardineArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSardineArrayInput` via:
//
//	ProjectConnectorsSardineArray{ ProjectConnectorsSardineArgs{...} }
type ProjectConnectorsSardineArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSardineArrayOutput() ProjectConnectorsSardineArrayOutput
	ToProjectConnectorsSardineArrayOutputWithContext(context.Context) ProjectConnectorsSardineArrayOutput
}

type ProjectConnectorsSardineArray []ProjectConnectorsSardineInput

func (ProjectConnectorsSardineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSardine)(nil)).Elem()
}

func (i ProjectConnectorsSardineArray) ToProjectConnectorsSardineArrayOutput() ProjectConnectorsSardineArrayOutput {
	return i.ToProjectConnectorsSardineArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSardineArray) ToProjectConnectorsSardineArrayOutputWithContext(ctx context.Context) ProjectConnectorsSardineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSardineArrayOutput)
}

type ProjectConnectorsSardineOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSardineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSardine)(nil)).Elem()
}

func (o ProjectConnectorsSardineOutput) ToProjectConnectorsSardineOutput() ProjectConnectorsSardineOutput {
	return o
}

func (o ProjectConnectorsSardineOutput) ToProjectConnectorsSardineOutputWithContext(ctx context.Context) ProjectConnectorsSardineOutput {
	return o
}

// The base URL for the Sardine API, e.g.: https://api.sandbox.sardine.ai, https://api.sardine.ai, https://api.eu.sardine.ai.
func (o ProjectConnectorsSardineOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The Sardine Client ID.
func (o ProjectConnectorsSardineOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) string { return v.ClientId }).(pulumi.StringOutput)
}

// The Sardine Client Secret.
func (o ProjectConnectorsSardineOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSardineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSardineOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSardineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSardine) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsSardineArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSardineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSardine)(nil)).Elem()
}

func (o ProjectConnectorsSardineArrayOutput) ToProjectConnectorsSardineArrayOutput() ProjectConnectorsSardineArrayOutput {
	return o
}

func (o ProjectConnectorsSardineArrayOutput) ToProjectConnectorsSardineArrayOutputWithContext(ctx context.Context) ProjectConnectorsSardineArrayOutput {
	return o
}

func (o ProjectConnectorsSardineArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSardineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSardine {
		return vs[0].([]ProjectConnectorsSardine)[vs[1].(int)]
	}).(ProjectConnectorsSardineOutput)
}

type ProjectConnectorsSe struct {
	// AWS Access key ID.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The authentication type to use.
	AuthType *string `pulumi:"authType"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// An optional endpoint URL (hostname only or fully qualified URI).
	Endpoint *string `pulumi:"endpoint"`
	// The external ID to use when assuming the role.
	ExternalId *string `pulumi:"externalId"`
	Id         *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// AWS region to send requests to (e.g. `us-west-2`).
	Region string `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the role to assume.
	RoleArn *string `pulumi:"roleArn"`
	// AWS Secret Access Key.
	Secret *string `pulumi:"secret"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSeSender `pulumi:"sender"`
}

// ProjectConnectorsSeInput is an input type that accepts ProjectConnectorsSeArgs and ProjectConnectorsSeOutput values.
// You can construct a concrete instance of `ProjectConnectorsSeInput` via:
//
//	ProjectConnectorsSeArgs{...}
type ProjectConnectorsSeInput interface {
	pulumi.Input

	ToProjectConnectorsSeOutput() ProjectConnectorsSeOutput
	ToProjectConnectorsSeOutputWithContext(context.Context) ProjectConnectorsSeOutput
}

type ProjectConnectorsSeArgs struct {
	// AWS Access key ID.
	AccessKeyId pulumi.StringPtrInput `pulumi:"accessKeyId"`
	// The authentication type to use.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An optional endpoint URL (hostname only or fully qualified URI).
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The external ID to use when assuming the role.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// AWS region to send requests to (e.g. `us-west-2`).
	Region pulumi.StringInput `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the role to assume.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// AWS Secret Access Key.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSeSenderInput `pulumi:"sender"`
}

func (ProjectConnectorsSeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSe)(nil)).Elem()
}

func (i ProjectConnectorsSeArgs) ToProjectConnectorsSeOutput() ProjectConnectorsSeOutput {
	return i.ToProjectConnectorsSeOutputWithContext(context.Background())
}

func (i ProjectConnectorsSeArgs) ToProjectConnectorsSeOutputWithContext(ctx context.Context) ProjectConnectorsSeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSeOutput)
}

// ProjectConnectorsSeArrayInput is an input type that accepts ProjectConnectorsSeArray and ProjectConnectorsSeArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSeArrayInput` via:
//
//	ProjectConnectorsSeArray{ ProjectConnectorsSeArgs{...} }
type ProjectConnectorsSeArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSeArrayOutput() ProjectConnectorsSeArrayOutput
	ToProjectConnectorsSeArrayOutputWithContext(context.Context) ProjectConnectorsSeArrayOutput
}

type ProjectConnectorsSeArray []ProjectConnectorsSeInput

func (ProjectConnectorsSeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSe)(nil)).Elem()
}

func (i ProjectConnectorsSeArray) ToProjectConnectorsSeArrayOutput() ProjectConnectorsSeArrayOutput {
	return i.ToProjectConnectorsSeArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSeArray) ToProjectConnectorsSeArrayOutputWithContext(ctx context.Context) ProjectConnectorsSeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSeArrayOutput)
}

type ProjectConnectorsSeOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSe)(nil)).Elem()
}

func (o ProjectConnectorsSeOutput) ToProjectConnectorsSeOutput() ProjectConnectorsSeOutput {
	return o
}

func (o ProjectConnectorsSeOutput) ToProjectConnectorsSeOutputWithContext(ctx context.Context) ProjectConnectorsSeOutput {
	return o
}

// AWS Access key ID.
func (o ProjectConnectorsSeOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// The authentication type to use.
func (o ProjectConnectorsSeOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An optional endpoint URL (hostname only or fully qualified URI).
func (o ProjectConnectorsSeOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The external ID to use when assuming the role.
func (o ProjectConnectorsSeOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) string { return v.Name }).(pulumi.StringOutput)
}

// AWS region to send requests to (e.g. `us-west-2`).
func (o ProjectConnectorsSeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) string { return v.Region }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the role to assume.
func (o ProjectConnectorsSeOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// AWS Secret Access Key.
func (o ProjectConnectorsSeOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// The sender details that should be displayed in the email message.
func (o ProjectConnectorsSeOutput) Sender() ProjectConnectorsSeSenderOutput {
	return o.ApplyT(func(v ProjectConnectorsSe) ProjectConnectorsSeSender { return v.Sender }).(ProjectConnectorsSeSenderOutput)
}

type ProjectConnectorsSeArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSe)(nil)).Elem()
}

func (o ProjectConnectorsSeArrayOutput) ToProjectConnectorsSeArrayOutput() ProjectConnectorsSeArrayOutput {
	return o
}

func (o ProjectConnectorsSeArrayOutput) ToProjectConnectorsSeArrayOutputWithContext(ctx context.Context) ProjectConnectorsSeArrayOutput {
	return o
}

func (o ProjectConnectorsSeArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSe {
		return vs[0].([]ProjectConnectorsSe)[vs[1].(int)]
	}).(ProjectConnectorsSeOutput)
}

type ProjectConnectorsSeSender struct {
	// The email address that will appear as the sender of the email.
	Email string `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name *string `pulumi:"name"`
}

// ProjectConnectorsSeSenderInput is an input type that accepts ProjectConnectorsSeSenderArgs and ProjectConnectorsSeSenderOutput values.
// You can construct a concrete instance of `ProjectConnectorsSeSenderInput` via:
//
//	ProjectConnectorsSeSenderArgs{...}
type ProjectConnectorsSeSenderInput interface {
	pulumi.Input

	ToProjectConnectorsSeSenderOutput() ProjectConnectorsSeSenderOutput
	ToProjectConnectorsSeSenderOutputWithContext(context.Context) ProjectConnectorsSeSenderOutput
}

type ProjectConnectorsSeSenderArgs struct {
	// The email address that will appear as the sender of the email.
	Email pulumi.StringInput `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProjectConnectorsSeSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSeSender)(nil)).Elem()
}

func (i ProjectConnectorsSeSenderArgs) ToProjectConnectorsSeSenderOutput() ProjectConnectorsSeSenderOutput {
	return i.ToProjectConnectorsSeSenderOutputWithContext(context.Background())
}

func (i ProjectConnectorsSeSenderArgs) ToProjectConnectorsSeSenderOutputWithContext(ctx context.Context) ProjectConnectorsSeSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSeSenderOutput)
}

type ProjectConnectorsSeSenderOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSeSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSeSender)(nil)).Elem()
}

func (o ProjectConnectorsSeSenderOutput) ToProjectConnectorsSeSenderOutput() ProjectConnectorsSeSenderOutput {
	return o
}

func (o ProjectConnectorsSeSenderOutput) ToProjectConnectorsSeSenderOutputWithContext(ctx context.Context) ProjectConnectorsSeSenderOutput {
	return o
}

// The email address that will appear as the sender of the email.
func (o ProjectConnectorsSeSenderOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSeSender) string { return v.Email }).(pulumi.StringOutput)
}

// The display name that will appear as the sender of the email.
func (o ProjectConnectorsSeSenderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSeSender) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsSegment struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The base URL of the Segment API, when using a custom domain in Segment.
	Host *string `pulumi:"host"`
	Id   *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Segment Write Key generated for the Descope service.
	WriteKey string `pulumi:"writeKey"`
}

// ProjectConnectorsSegmentInput is an input type that accepts ProjectConnectorsSegmentArgs and ProjectConnectorsSegmentOutput values.
// You can construct a concrete instance of `ProjectConnectorsSegmentInput` via:
//
//	ProjectConnectorsSegmentArgs{...}
type ProjectConnectorsSegmentInput interface {
	pulumi.Input

	ToProjectConnectorsSegmentOutput() ProjectConnectorsSegmentOutput
	ToProjectConnectorsSegmentOutputWithContext(context.Context) ProjectConnectorsSegmentOutput
}

type ProjectConnectorsSegmentArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The base URL of the Segment API, when using a custom domain in Segment.
	Host pulumi.StringPtrInput `pulumi:"host"`
	Id   pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Segment Write Key generated for the Descope service.
	WriteKey pulumi.StringInput `pulumi:"writeKey"`
}

func (ProjectConnectorsSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSegment)(nil)).Elem()
}

func (i ProjectConnectorsSegmentArgs) ToProjectConnectorsSegmentOutput() ProjectConnectorsSegmentOutput {
	return i.ToProjectConnectorsSegmentOutputWithContext(context.Background())
}

func (i ProjectConnectorsSegmentArgs) ToProjectConnectorsSegmentOutputWithContext(ctx context.Context) ProjectConnectorsSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSegmentOutput)
}

// ProjectConnectorsSegmentArrayInput is an input type that accepts ProjectConnectorsSegmentArray and ProjectConnectorsSegmentArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSegmentArrayInput` via:
//
//	ProjectConnectorsSegmentArray{ ProjectConnectorsSegmentArgs{...} }
type ProjectConnectorsSegmentArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSegmentArrayOutput() ProjectConnectorsSegmentArrayOutput
	ToProjectConnectorsSegmentArrayOutputWithContext(context.Context) ProjectConnectorsSegmentArrayOutput
}

type ProjectConnectorsSegmentArray []ProjectConnectorsSegmentInput

func (ProjectConnectorsSegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSegment)(nil)).Elem()
}

func (i ProjectConnectorsSegmentArray) ToProjectConnectorsSegmentArrayOutput() ProjectConnectorsSegmentArrayOutput {
	return i.ToProjectConnectorsSegmentArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSegmentArray) ToProjectConnectorsSegmentArrayOutputWithContext(ctx context.Context) ProjectConnectorsSegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSegmentArrayOutput)
}

type ProjectConnectorsSegmentOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSegment)(nil)).Elem()
}

func (o ProjectConnectorsSegmentOutput) ToProjectConnectorsSegmentOutput() ProjectConnectorsSegmentOutput {
	return o
}

func (o ProjectConnectorsSegmentOutput) ToProjectConnectorsSegmentOutputWithContext(ctx context.Context) ProjectConnectorsSegmentOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsSegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSegment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base URL of the Segment API, when using a custom domain in Segment.
func (o ProjectConnectorsSegmentOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSegment) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSegmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSegment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSegmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSegment) string { return v.Name }).(pulumi.StringOutput)
}

// The Segment Write Key generated for the Descope service.
func (o ProjectConnectorsSegmentOutput) WriteKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSegment) string { return v.WriteKey }).(pulumi.StringOutput)
}

type ProjectConnectorsSegmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSegment)(nil)).Elem()
}

func (o ProjectConnectorsSegmentArrayOutput) ToProjectConnectorsSegmentArrayOutput() ProjectConnectorsSegmentArrayOutput {
	return o
}

func (o ProjectConnectorsSegmentArrayOutput) ToProjectConnectorsSegmentArrayOutputWithContext(ctx context.Context) ProjectConnectorsSegmentArrayOutput {
	return o
}

func (o ProjectConnectorsSegmentArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSegment {
		return vs[0].([]ProjectConnectorsSegment)[vs[1].(int)]
	}).(ProjectConnectorsSegmentOutput)
}

type ProjectConnectorsSendgrid struct {
	// SendGrid API authentication configuration.
	Authentication ProjectConnectorsSendgridAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSendgridSender `pulumi:"sender"`
}

// ProjectConnectorsSendgridInput is an input type that accepts ProjectConnectorsSendgridArgs and ProjectConnectorsSendgridOutput values.
// You can construct a concrete instance of `ProjectConnectorsSendgridInput` via:
//
//	ProjectConnectorsSendgridArgs{...}
type ProjectConnectorsSendgridInput interface {
	pulumi.Input

	ToProjectConnectorsSendgridOutput() ProjectConnectorsSendgridOutput
	ToProjectConnectorsSendgridOutputWithContext(context.Context) ProjectConnectorsSendgridOutput
}

type ProjectConnectorsSendgridArgs struct {
	// SendGrid API authentication configuration.
	Authentication ProjectConnectorsSendgridAuthenticationInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSendgridSenderInput `pulumi:"sender"`
}

func (ProjectConnectorsSendgridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgrid)(nil)).Elem()
}

func (i ProjectConnectorsSendgridArgs) ToProjectConnectorsSendgridOutput() ProjectConnectorsSendgridOutput {
	return i.ToProjectConnectorsSendgridOutputWithContext(context.Background())
}

func (i ProjectConnectorsSendgridArgs) ToProjectConnectorsSendgridOutputWithContext(ctx context.Context) ProjectConnectorsSendgridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSendgridOutput)
}

// ProjectConnectorsSendgridArrayInput is an input type that accepts ProjectConnectorsSendgridArray and ProjectConnectorsSendgridArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSendgridArrayInput` via:
//
//	ProjectConnectorsSendgridArray{ ProjectConnectorsSendgridArgs{...} }
type ProjectConnectorsSendgridArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSendgridArrayOutput() ProjectConnectorsSendgridArrayOutput
	ToProjectConnectorsSendgridArrayOutputWithContext(context.Context) ProjectConnectorsSendgridArrayOutput
}

type ProjectConnectorsSendgridArray []ProjectConnectorsSendgridInput

func (ProjectConnectorsSendgridArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSendgrid)(nil)).Elem()
}

func (i ProjectConnectorsSendgridArray) ToProjectConnectorsSendgridArrayOutput() ProjectConnectorsSendgridArrayOutput {
	return i.ToProjectConnectorsSendgridArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSendgridArray) ToProjectConnectorsSendgridArrayOutputWithContext(ctx context.Context) ProjectConnectorsSendgridArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSendgridArrayOutput)
}

type ProjectConnectorsSendgridOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSendgridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgrid)(nil)).Elem()
}

func (o ProjectConnectorsSendgridOutput) ToProjectConnectorsSendgridOutput() ProjectConnectorsSendgridOutput {
	return o
}

func (o ProjectConnectorsSendgridOutput) ToProjectConnectorsSendgridOutputWithContext(ctx context.Context) ProjectConnectorsSendgridOutput {
	return o
}

// SendGrid API authentication configuration.
func (o ProjectConnectorsSendgridOutput) Authentication() ProjectConnectorsSendgridAuthenticationOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgrid) ProjectConnectorsSendgridAuthentication { return v.Authentication }).(ProjectConnectorsSendgridAuthenticationOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSendgridOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgrid) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSendgridOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgrid) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSendgridOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgrid) string { return v.Name }).(pulumi.StringOutput)
}

// The sender details that should be displayed in the email message.
func (o ProjectConnectorsSendgridOutput) Sender() ProjectConnectorsSendgridSenderOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgrid) ProjectConnectorsSendgridSender { return v.Sender }).(ProjectConnectorsSendgridSenderOutput)
}

type ProjectConnectorsSendgridArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSendgridArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSendgrid)(nil)).Elem()
}

func (o ProjectConnectorsSendgridArrayOutput) ToProjectConnectorsSendgridArrayOutput() ProjectConnectorsSendgridArrayOutput {
	return o
}

func (o ProjectConnectorsSendgridArrayOutput) ToProjectConnectorsSendgridArrayOutputWithContext(ctx context.Context) ProjectConnectorsSendgridArrayOutput {
	return o
}

func (o ProjectConnectorsSendgridArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSendgridOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSendgrid {
		return vs[0].([]ProjectConnectorsSendgrid)[vs[1].(int)]
	}).(ProjectConnectorsSendgridOutput)
}

type ProjectConnectorsSendgridAuthentication struct {
	// SendGrid API key for authentication.
	ApiKey string `pulumi:"apiKey"`
}

// ProjectConnectorsSendgridAuthenticationInput is an input type that accepts ProjectConnectorsSendgridAuthenticationArgs and ProjectConnectorsSendgridAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsSendgridAuthenticationInput` via:
//
//	ProjectConnectorsSendgridAuthenticationArgs{...}
type ProjectConnectorsSendgridAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsSendgridAuthenticationOutput() ProjectConnectorsSendgridAuthenticationOutput
	ToProjectConnectorsSendgridAuthenticationOutputWithContext(context.Context) ProjectConnectorsSendgridAuthenticationOutput
}

type ProjectConnectorsSendgridAuthenticationArgs struct {
	// SendGrid API key for authentication.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
}

func (ProjectConnectorsSendgridAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgridAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsSendgridAuthenticationArgs) ToProjectConnectorsSendgridAuthenticationOutput() ProjectConnectorsSendgridAuthenticationOutput {
	return i.ToProjectConnectorsSendgridAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsSendgridAuthenticationArgs) ToProjectConnectorsSendgridAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsSendgridAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSendgridAuthenticationOutput)
}

type ProjectConnectorsSendgridAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSendgridAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgridAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsSendgridAuthenticationOutput) ToProjectConnectorsSendgridAuthenticationOutput() ProjectConnectorsSendgridAuthenticationOutput {
	return o
}

func (o ProjectConnectorsSendgridAuthenticationOutput) ToProjectConnectorsSendgridAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsSendgridAuthenticationOutput {
	return o
}

// SendGrid API key for authentication.
func (o ProjectConnectorsSendgridAuthenticationOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgridAuthentication) string { return v.ApiKey }).(pulumi.StringOutput)
}

type ProjectConnectorsSendgridSender struct {
	// The email address that will appear as the sender of the email.
	Email string `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name *string `pulumi:"name"`
}

// ProjectConnectorsSendgridSenderInput is an input type that accepts ProjectConnectorsSendgridSenderArgs and ProjectConnectorsSendgridSenderOutput values.
// You can construct a concrete instance of `ProjectConnectorsSendgridSenderInput` via:
//
//	ProjectConnectorsSendgridSenderArgs{...}
type ProjectConnectorsSendgridSenderInput interface {
	pulumi.Input

	ToProjectConnectorsSendgridSenderOutput() ProjectConnectorsSendgridSenderOutput
	ToProjectConnectorsSendgridSenderOutputWithContext(context.Context) ProjectConnectorsSendgridSenderOutput
}

type ProjectConnectorsSendgridSenderArgs struct {
	// The email address that will appear as the sender of the email.
	Email pulumi.StringInput `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProjectConnectorsSendgridSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgridSender)(nil)).Elem()
}

func (i ProjectConnectorsSendgridSenderArgs) ToProjectConnectorsSendgridSenderOutput() ProjectConnectorsSendgridSenderOutput {
	return i.ToProjectConnectorsSendgridSenderOutputWithContext(context.Background())
}

func (i ProjectConnectorsSendgridSenderArgs) ToProjectConnectorsSendgridSenderOutputWithContext(ctx context.Context) ProjectConnectorsSendgridSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSendgridSenderOutput)
}

type ProjectConnectorsSendgridSenderOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSendgridSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSendgridSender)(nil)).Elem()
}

func (o ProjectConnectorsSendgridSenderOutput) ToProjectConnectorsSendgridSenderOutput() ProjectConnectorsSendgridSenderOutput {
	return o
}

func (o ProjectConnectorsSendgridSenderOutput) ToProjectConnectorsSendgridSenderOutputWithContext(ctx context.Context) ProjectConnectorsSendgridSenderOutput {
	return o
}

// The email address that will appear as the sender of the email.
func (o ProjectConnectorsSendgridSenderOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgridSender) string { return v.Email }).(pulumi.StringOutput)
}

// The display name that will appear as the sender of the email.
func (o ProjectConnectorsSendgridSenderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSendgridSender) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsSlack struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The OAuth token for Slack's Bot User, used to authenticate API requests.
	Token string `pulumi:"token"`
}

// ProjectConnectorsSlackInput is an input type that accepts ProjectConnectorsSlackArgs and ProjectConnectorsSlackOutput values.
// You can construct a concrete instance of `ProjectConnectorsSlackInput` via:
//
//	ProjectConnectorsSlackArgs{...}
type ProjectConnectorsSlackInput interface {
	pulumi.Input

	ToProjectConnectorsSlackOutput() ProjectConnectorsSlackOutput
	ToProjectConnectorsSlackOutputWithContext(context.Context) ProjectConnectorsSlackOutput
}

type ProjectConnectorsSlackArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The OAuth token for Slack's Bot User, used to authenticate API requests.
	Token pulumi.StringInput `pulumi:"token"`
}

func (ProjectConnectorsSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSlack)(nil)).Elem()
}

func (i ProjectConnectorsSlackArgs) ToProjectConnectorsSlackOutput() ProjectConnectorsSlackOutput {
	return i.ToProjectConnectorsSlackOutputWithContext(context.Background())
}

func (i ProjectConnectorsSlackArgs) ToProjectConnectorsSlackOutputWithContext(ctx context.Context) ProjectConnectorsSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSlackOutput)
}

// ProjectConnectorsSlackArrayInput is an input type that accepts ProjectConnectorsSlackArray and ProjectConnectorsSlackArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSlackArrayInput` via:
//
//	ProjectConnectorsSlackArray{ ProjectConnectorsSlackArgs{...} }
type ProjectConnectorsSlackArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSlackArrayOutput() ProjectConnectorsSlackArrayOutput
	ToProjectConnectorsSlackArrayOutputWithContext(context.Context) ProjectConnectorsSlackArrayOutput
}

type ProjectConnectorsSlackArray []ProjectConnectorsSlackInput

func (ProjectConnectorsSlackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSlack)(nil)).Elem()
}

func (i ProjectConnectorsSlackArray) ToProjectConnectorsSlackArrayOutput() ProjectConnectorsSlackArrayOutput {
	return i.ToProjectConnectorsSlackArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSlackArray) ToProjectConnectorsSlackArrayOutputWithContext(ctx context.Context) ProjectConnectorsSlackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSlackArrayOutput)
}

type ProjectConnectorsSlackOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSlack)(nil)).Elem()
}

func (o ProjectConnectorsSlackOutput) ToProjectConnectorsSlackOutput() ProjectConnectorsSlackOutput {
	return o
}

func (o ProjectConnectorsSlackOutput) ToProjectConnectorsSlackOutputWithContext(ctx context.Context) ProjectConnectorsSlackOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsSlackOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSlack) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSlackOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSlack) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSlackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSlack) string { return v.Name }).(pulumi.StringOutput)
}

// The OAuth token for Slack's Bot User, used to authenticate API requests.
func (o ProjectConnectorsSlackOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSlack) string { return v.Token }).(pulumi.StringOutput)
}

type ProjectConnectorsSlackArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSlackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSlack)(nil)).Elem()
}

func (o ProjectConnectorsSlackArrayOutput) ToProjectConnectorsSlackArrayOutput() ProjectConnectorsSlackArrayOutput {
	return o
}

func (o ProjectConnectorsSlackArrayOutput) ToProjectConnectorsSlackArrayOutputWithContext(ctx context.Context) ProjectConnectorsSlackArrayOutput {
	return o
}

func (o ProjectConnectorsSlackArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSlackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSlack {
		return vs[0].([]ProjectConnectorsSlack)[vs[1].(int)]
	}).(ProjectConnectorsSlackOutput)
}

type ProjectConnectorsSmartling struct {
	// The account UID for the Smartling account.
	AccountUid string `pulumi:"accountUid"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The user identifier for the Smartling account.
	UserIdentifier string `pulumi:"userIdentifier"`
	// The user secret for the Smartling account.
	UserSecret string `pulumi:"userSecret"`
}

// ProjectConnectorsSmartlingInput is an input type that accepts ProjectConnectorsSmartlingArgs and ProjectConnectorsSmartlingOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmartlingInput` via:
//
//	ProjectConnectorsSmartlingArgs{...}
type ProjectConnectorsSmartlingInput interface {
	pulumi.Input

	ToProjectConnectorsSmartlingOutput() ProjectConnectorsSmartlingOutput
	ToProjectConnectorsSmartlingOutputWithContext(context.Context) ProjectConnectorsSmartlingOutput
}

type ProjectConnectorsSmartlingArgs struct {
	// The account UID for the Smartling account.
	AccountUid pulumi.StringInput `pulumi:"accountUid"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The user identifier for the Smartling account.
	UserIdentifier pulumi.StringInput `pulumi:"userIdentifier"`
	// The user secret for the Smartling account.
	UserSecret pulumi.StringInput `pulumi:"userSecret"`
}

func (ProjectConnectorsSmartlingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmartling)(nil)).Elem()
}

func (i ProjectConnectorsSmartlingArgs) ToProjectConnectorsSmartlingOutput() ProjectConnectorsSmartlingOutput {
	return i.ToProjectConnectorsSmartlingOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmartlingArgs) ToProjectConnectorsSmartlingOutputWithContext(ctx context.Context) ProjectConnectorsSmartlingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmartlingOutput)
}

// ProjectConnectorsSmartlingArrayInput is an input type that accepts ProjectConnectorsSmartlingArray and ProjectConnectorsSmartlingArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmartlingArrayInput` via:
//
//	ProjectConnectorsSmartlingArray{ ProjectConnectorsSmartlingArgs{...} }
type ProjectConnectorsSmartlingArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSmartlingArrayOutput() ProjectConnectorsSmartlingArrayOutput
	ToProjectConnectorsSmartlingArrayOutputWithContext(context.Context) ProjectConnectorsSmartlingArrayOutput
}

type ProjectConnectorsSmartlingArray []ProjectConnectorsSmartlingInput

func (ProjectConnectorsSmartlingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSmartling)(nil)).Elem()
}

func (i ProjectConnectorsSmartlingArray) ToProjectConnectorsSmartlingArrayOutput() ProjectConnectorsSmartlingArrayOutput {
	return i.ToProjectConnectorsSmartlingArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmartlingArray) ToProjectConnectorsSmartlingArrayOutputWithContext(ctx context.Context) ProjectConnectorsSmartlingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmartlingArrayOutput)
}

type ProjectConnectorsSmartlingOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmartlingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmartling)(nil)).Elem()
}

func (o ProjectConnectorsSmartlingOutput) ToProjectConnectorsSmartlingOutput() ProjectConnectorsSmartlingOutput {
	return o
}

func (o ProjectConnectorsSmartlingOutput) ToProjectConnectorsSmartlingOutputWithContext(ctx context.Context) ProjectConnectorsSmartlingOutput {
	return o
}

// The account UID for the Smartling account.
func (o ProjectConnectorsSmartlingOutput) AccountUid() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) string { return v.AccountUid }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSmartlingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSmartlingOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSmartlingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) string { return v.Name }).(pulumi.StringOutput)
}

// The user identifier for the Smartling account.
func (o ProjectConnectorsSmartlingOutput) UserIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) string { return v.UserIdentifier }).(pulumi.StringOutput)
}

// The user secret for the Smartling account.
func (o ProjectConnectorsSmartlingOutput) UserSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmartling) string { return v.UserSecret }).(pulumi.StringOutput)
}

type ProjectConnectorsSmartlingArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmartlingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSmartling)(nil)).Elem()
}

func (o ProjectConnectorsSmartlingArrayOutput) ToProjectConnectorsSmartlingArrayOutput() ProjectConnectorsSmartlingArrayOutput {
	return o
}

func (o ProjectConnectorsSmartlingArrayOutput) ToProjectConnectorsSmartlingArrayOutputWithContext(ctx context.Context) ProjectConnectorsSmartlingArrayOutput {
	return o
}

func (o ProjectConnectorsSmartlingArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSmartlingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSmartling {
		return vs[0].([]ProjectConnectorsSmartling)[vs[1].(int)]
	}).(ProjectConnectorsSmartlingOutput)
}

type ProjectConnectorsSmtp struct {
	// SMTP server authentication credentials and method.
	Authentication ProjectConnectorsSmtpAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSmtpSender `pulumi:"sender"`
	// SMTP server connection details including hostname and port.
	Server ProjectConnectorsSmtpServer `pulumi:"server"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps *bool `pulumi:"useStaticIps"`
}

// ProjectConnectorsSmtpInput is an input type that accepts ProjectConnectorsSmtpArgs and ProjectConnectorsSmtpOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmtpInput` via:
//
//	ProjectConnectorsSmtpArgs{...}
type ProjectConnectorsSmtpInput interface {
	pulumi.Input

	ToProjectConnectorsSmtpOutput() ProjectConnectorsSmtpOutput
	ToProjectConnectorsSmtpOutputWithContext(context.Context) ProjectConnectorsSmtpOutput
}

type ProjectConnectorsSmtpArgs struct {
	// SMTP server authentication credentials and method.
	Authentication ProjectConnectorsSmtpAuthenticationInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The sender details that should be displayed in the email message.
	Sender ProjectConnectorsSmtpSenderInput `pulumi:"sender"`
	// SMTP server connection details including hostname and port.
	Server ProjectConnectorsSmtpServerInput `pulumi:"server"`
	// Whether the connector should send all requests from specific static IPs.
	UseStaticIps pulumi.BoolPtrInput `pulumi:"useStaticIps"`
}

func (ProjectConnectorsSmtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtp)(nil)).Elem()
}

func (i ProjectConnectorsSmtpArgs) ToProjectConnectorsSmtpOutput() ProjectConnectorsSmtpOutput {
	return i.ToProjectConnectorsSmtpOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmtpArgs) ToProjectConnectorsSmtpOutputWithContext(ctx context.Context) ProjectConnectorsSmtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmtpOutput)
}

// ProjectConnectorsSmtpArrayInput is an input type that accepts ProjectConnectorsSmtpArray and ProjectConnectorsSmtpArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmtpArrayInput` via:
//
//	ProjectConnectorsSmtpArray{ ProjectConnectorsSmtpArgs{...} }
type ProjectConnectorsSmtpArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSmtpArrayOutput() ProjectConnectorsSmtpArrayOutput
	ToProjectConnectorsSmtpArrayOutputWithContext(context.Context) ProjectConnectorsSmtpArrayOutput
}

type ProjectConnectorsSmtpArray []ProjectConnectorsSmtpInput

func (ProjectConnectorsSmtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSmtp)(nil)).Elem()
}

func (i ProjectConnectorsSmtpArray) ToProjectConnectorsSmtpArrayOutput() ProjectConnectorsSmtpArrayOutput {
	return i.ToProjectConnectorsSmtpArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmtpArray) ToProjectConnectorsSmtpArrayOutputWithContext(ctx context.Context) ProjectConnectorsSmtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmtpArrayOutput)
}

type ProjectConnectorsSmtpOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtp)(nil)).Elem()
}

func (o ProjectConnectorsSmtpOutput) ToProjectConnectorsSmtpOutput() ProjectConnectorsSmtpOutput {
	return o
}

func (o ProjectConnectorsSmtpOutput) ToProjectConnectorsSmtpOutputWithContext(ctx context.Context) ProjectConnectorsSmtpOutput {
	return o
}

// SMTP server authentication credentials and method.
func (o ProjectConnectorsSmtpOutput) Authentication() ProjectConnectorsSmtpAuthenticationOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) ProjectConnectorsSmtpAuthentication { return v.Authentication }).(ProjectConnectorsSmtpAuthenticationOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSmtpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSmtpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSmtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) string { return v.Name }).(pulumi.StringOutput)
}

// The sender details that should be displayed in the email message.
func (o ProjectConnectorsSmtpOutput) Sender() ProjectConnectorsSmtpSenderOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) ProjectConnectorsSmtpSender { return v.Sender }).(ProjectConnectorsSmtpSenderOutput)
}

// SMTP server connection details including hostname and port.
func (o ProjectConnectorsSmtpOutput) Server() ProjectConnectorsSmtpServerOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) ProjectConnectorsSmtpServer { return v.Server }).(ProjectConnectorsSmtpServerOutput)
}

// Whether the connector should send all requests from specific static IPs.
func (o ProjectConnectorsSmtpOutput) UseStaticIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtp) *bool { return v.UseStaticIps }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsSmtpArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSmtp)(nil)).Elem()
}

func (o ProjectConnectorsSmtpArrayOutput) ToProjectConnectorsSmtpArrayOutput() ProjectConnectorsSmtpArrayOutput {
	return o
}

func (o ProjectConnectorsSmtpArrayOutput) ToProjectConnectorsSmtpArrayOutputWithContext(ctx context.Context) ProjectConnectorsSmtpArrayOutput {
	return o
}

func (o ProjectConnectorsSmtpArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSmtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSmtp {
		return vs[0].([]ProjectConnectorsSmtp)[vs[1].(int)]
	}).(ProjectConnectorsSmtpOutput)
}

type ProjectConnectorsSmtpAuthentication struct {
	// SMTP authentication method (`plain` or `login`).
	Method *string `pulumi:"method"`
	// Password for SMTP server authentication.
	Password string `pulumi:"password"`
	// Username for SMTP server authentication.
	Username string `pulumi:"username"`
}

// ProjectConnectorsSmtpAuthenticationInput is an input type that accepts ProjectConnectorsSmtpAuthenticationArgs and ProjectConnectorsSmtpAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmtpAuthenticationInput` via:
//
//	ProjectConnectorsSmtpAuthenticationArgs{...}
type ProjectConnectorsSmtpAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsSmtpAuthenticationOutput() ProjectConnectorsSmtpAuthenticationOutput
	ToProjectConnectorsSmtpAuthenticationOutputWithContext(context.Context) ProjectConnectorsSmtpAuthenticationOutput
}

type ProjectConnectorsSmtpAuthenticationArgs struct {
	// SMTP authentication method (`plain` or `login`).
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Password for SMTP server authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// Username for SMTP server authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProjectConnectorsSmtpAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsSmtpAuthenticationArgs) ToProjectConnectorsSmtpAuthenticationOutput() ProjectConnectorsSmtpAuthenticationOutput {
	return i.ToProjectConnectorsSmtpAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmtpAuthenticationArgs) ToProjectConnectorsSmtpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsSmtpAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmtpAuthenticationOutput)
}

type ProjectConnectorsSmtpAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmtpAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsSmtpAuthenticationOutput) ToProjectConnectorsSmtpAuthenticationOutput() ProjectConnectorsSmtpAuthenticationOutput {
	return o
}

func (o ProjectConnectorsSmtpAuthenticationOutput) ToProjectConnectorsSmtpAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsSmtpAuthenticationOutput {
	return o
}

// SMTP authentication method (`plain` or `login`).
func (o ProjectConnectorsSmtpAuthenticationOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpAuthentication) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Password for SMTP server authentication.
func (o ProjectConnectorsSmtpAuthenticationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpAuthentication) string { return v.Password }).(pulumi.StringOutput)
}

// Username for SMTP server authentication.
func (o ProjectConnectorsSmtpAuthenticationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpAuthentication) string { return v.Username }).(pulumi.StringOutput)
}

type ProjectConnectorsSmtpSender struct {
	// The email address that will appear as the sender of the email.
	Email string `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name *string `pulumi:"name"`
}

// ProjectConnectorsSmtpSenderInput is an input type that accepts ProjectConnectorsSmtpSenderArgs and ProjectConnectorsSmtpSenderOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmtpSenderInput` via:
//
//	ProjectConnectorsSmtpSenderArgs{...}
type ProjectConnectorsSmtpSenderInput interface {
	pulumi.Input

	ToProjectConnectorsSmtpSenderOutput() ProjectConnectorsSmtpSenderOutput
	ToProjectConnectorsSmtpSenderOutputWithContext(context.Context) ProjectConnectorsSmtpSenderOutput
}

type ProjectConnectorsSmtpSenderArgs struct {
	// The email address that will appear as the sender of the email.
	Email pulumi.StringInput `pulumi:"email"`
	// The display name that will appear as the sender of the email.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProjectConnectorsSmtpSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpSender)(nil)).Elem()
}

func (i ProjectConnectorsSmtpSenderArgs) ToProjectConnectorsSmtpSenderOutput() ProjectConnectorsSmtpSenderOutput {
	return i.ToProjectConnectorsSmtpSenderOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmtpSenderArgs) ToProjectConnectorsSmtpSenderOutputWithContext(ctx context.Context) ProjectConnectorsSmtpSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmtpSenderOutput)
}

type ProjectConnectorsSmtpSenderOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmtpSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpSender)(nil)).Elem()
}

func (o ProjectConnectorsSmtpSenderOutput) ToProjectConnectorsSmtpSenderOutput() ProjectConnectorsSmtpSenderOutput {
	return o
}

func (o ProjectConnectorsSmtpSenderOutput) ToProjectConnectorsSmtpSenderOutputWithContext(ctx context.Context) ProjectConnectorsSmtpSenderOutput {
	return o
}

// The email address that will appear as the sender of the email.
func (o ProjectConnectorsSmtpSenderOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpSender) string { return v.Email }).(pulumi.StringOutput)
}

// The display name that will appear as the sender of the email.
func (o ProjectConnectorsSmtpSenderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpSender) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsSmtpServer struct {
	// The hostname or IP address of the SMTP server.
	Host string `pulumi:"host"`
	// The port number to connect to on the SMTP server.
	Port *int `pulumi:"port"`
}

// ProjectConnectorsSmtpServerInput is an input type that accepts ProjectConnectorsSmtpServerArgs and ProjectConnectorsSmtpServerOutput values.
// You can construct a concrete instance of `ProjectConnectorsSmtpServerInput` via:
//
//	ProjectConnectorsSmtpServerArgs{...}
type ProjectConnectorsSmtpServerInput interface {
	pulumi.Input

	ToProjectConnectorsSmtpServerOutput() ProjectConnectorsSmtpServerOutput
	ToProjectConnectorsSmtpServerOutputWithContext(context.Context) ProjectConnectorsSmtpServerOutput
}

type ProjectConnectorsSmtpServerArgs struct {
	// The hostname or IP address of the SMTP server.
	Host pulumi.StringInput `pulumi:"host"`
	// The port number to connect to on the SMTP server.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ProjectConnectorsSmtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpServer)(nil)).Elem()
}

func (i ProjectConnectorsSmtpServerArgs) ToProjectConnectorsSmtpServerOutput() ProjectConnectorsSmtpServerOutput {
	return i.ToProjectConnectorsSmtpServerOutputWithContext(context.Background())
}

func (i ProjectConnectorsSmtpServerArgs) ToProjectConnectorsSmtpServerOutputWithContext(ctx context.Context) ProjectConnectorsSmtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSmtpServerOutput)
}

type ProjectConnectorsSmtpServerOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSmtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSmtpServer)(nil)).Elem()
}

func (o ProjectConnectorsSmtpServerOutput) ToProjectConnectorsSmtpServerOutput() ProjectConnectorsSmtpServerOutput {
	return o
}

func (o ProjectConnectorsSmtpServerOutput) ToProjectConnectorsSmtpServerOutputWithContext(ctx context.Context) ProjectConnectorsSmtpServerOutput {
	return o
}

// The hostname or IP address of the SMTP server.
func (o ProjectConnectorsSmtpServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpServer) string { return v.Host }).(pulumi.StringOutput)
}

// The port number to connect to on the SMTP server.
func (o ProjectConnectorsSmtpServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSmtpServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ProjectConnectorsSn struct {
	// AWS Access key ID.
	AccessKeyId string `pulumi:"accessKeyId"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// An optional endpoint URL (hostname only or fully qualified URI).
	Endpoint *string `pulumi:"endpoint"`
	// The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
	EntityId *string `pulumi:"entityId"`
	Id       *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
	OrganizationNumber *string `pulumi:"organizationNumber"`
	// AWS region to send requests to (e.g. `us-west-2`).
	Region string `pulumi:"region"`
	// AWS Secret Access Key.
	Secret string `pulumi:"secret"`
	// The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
	SenderId *string `pulumi:"senderId"`
	// The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
	TemplateId *string `pulumi:"templateId"`
}

// ProjectConnectorsSnInput is an input type that accepts ProjectConnectorsSnArgs and ProjectConnectorsSnOutput values.
// You can construct a concrete instance of `ProjectConnectorsSnInput` via:
//
//	ProjectConnectorsSnArgs{...}
type ProjectConnectorsSnInput interface {
	pulumi.Input

	ToProjectConnectorsSnOutput() ProjectConnectorsSnOutput
	ToProjectConnectorsSnOutputWithContext(context.Context) ProjectConnectorsSnOutput
}

type ProjectConnectorsSnArgs struct {
	// AWS Access key ID.
	AccessKeyId pulumi.StringInput `pulumi:"accessKeyId"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An optional endpoint URL (hostname only or fully qualified URI).
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
	EntityId pulumi.StringPtrInput `pulumi:"entityId"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
	OrganizationNumber pulumi.StringPtrInput `pulumi:"organizationNumber"`
	// AWS region to send requests to (e.g. `us-west-2`).
	Region pulumi.StringInput `pulumi:"region"`
	// AWS Secret Access Key.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
	SenderId pulumi.StringPtrInput `pulumi:"senderId"`
	// The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
	TemplateId pulumi.StringPtrInput `pulumi:"templateId"`
}

func (ProjectConnectorsSnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSn)(nil)).Elem()
}

func (i ProjectConnectorsSnArgs) ToProjectConnectorsSnOutput() ProjectConnectorsSnOutput {
	return i.ToProjectConnectorsSnOutputWithContext(context.Background())
}

func (i ProjectConnectorsSnArgs) ToProjectConnectorsSnOutputWithContext(ctx context.Context) ProjectConnectorsSnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSnOutput)
}

// ProjectConnectorsSnArrayInput is an input type that accepts ProjectConnectorsSnArray and ProjectConnectorsSnArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSnArrayInput` via:
//
//	ProjectConnectorsSnArray{ ProjectConnectorsSnArgs{...} }
type ProjectConnectorsSnArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSnArrayOutput() ProjectConnectorsSnArrayOutput
	ToProjectConnectorsSnArrayOutputWithContext(context.Context) ProjectConnectorsSnArrayOutput
}

type ProjectConnectorsSnArray []ProjectConnectorsSnInput

func (ProjectConnectorsSnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSn)(nil)).Elem()
}

func (i ProjectConnectorsSnArray) ToProjectConnectorsSnArrayOutput() ProjectConnectorsSnArrayOutput {
	return i.ToProjectConnectorsSnArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSnArray) ToProjectConnectorsSnArrayOutputWithContext(ctx context.Context) ProjectConnectorsSnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSnArrayOutput)
}

type ProjectConnectorsSnOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSn)(nil)).Elem()
}

func (o ProjectConnectorsSnOutput) ToProjectConnectorsSnOutput() ProjectConnectorsSnOutput {
	return o
}

func (o ProjectConnectorsSnOutput) ToProjectConnectorsSnOutputWithContext(ctx context.Context) ProjectConnectorsSnOutput {
	return o
}

// AWS Access key ID.
func (o ProjectConnectorsSnOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) string { return v.AccessKeyId }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An optional endpoint URL (hostname only or fully qualified URI).
func (o ProjectConnectorsSnOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The entity ID or principal entity (PE) ID for sending text messages to recipients in India.
func (o ProjectConnectorsSnOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.EntityId }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsSnOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) string { return v.Name }).(pulumi.StringOutput)
}

// An optional phone number from which the text messages are going to be sent. Make sure it is registered properly in your server.
func (o ProjectConnectorsSnOutput) OrganizationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.OrganizationNumber }).(pulumi.StringPtrOutput)
}

// AWS region to send requests to (e.g. `us-west-2`).
func (o ProjectConnectorsSnOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) string { return v.Region }).(pulumi.StringOutput)
}

// AWS Secret Access Key.
func (o ProjectConnectorsSnOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) string { return v.Secret }).(pulumi.StringOutput)
}

// The name of the sender from which the text message is going to be sent (see SNS documentation regarding acceptable IDs and supported regions/countries).
func (o ProjectConnectorsSnOutput) SenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.SenderId }).(pulumi.StringPtrOutput)
}

// The template for sending text messages to recipients in India. The template ID must be associated with the sender ID.
func (o ProjectConnectorsSnOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSn) *string { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsSnArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSn)(nil)).Elem()
}

func (o ProjectConnectorsSnArrayOutput) ToProjectConnectorsSnArrayOutput() ProjectConnectorsSnArrayOutput {
	return o
}

func (o ProjectConnectorsSnArrayOutput) ToProjectConnectorsSnArrayOutputWithContext(ctx context.Context) ProjectConnectorsSnArrayOutput {
	return o
}

func (o ProjectConnectorsSnArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSn {
		return vs[0].([]ProjectConnectorsSn)[vs[1].(int)]
	}).(ProjectConnectorsSnOutput)
}

type ProjectConnectorsSumologic struct {
	// Whether to enable streaming of audit events.
	AuditEnabled *bool `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters []ProjectConnectorsSumologicAuditFilter `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The URL associated with an HTTP Hosted collector
	HttpSourceUrl string  `pulumi:"httpSourceUrl"`
	Id            *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled *bool `pulumi:"troubleshootLogEnabled"`
}

// ProjectConnectorsSumologicInput is an input type that accepts ProjectConnectorsSumologicArgs and ProjectConnectorsSumologicOutput values.
// You can construct a concrete instance of `ProjectConnectorsSumologicInput` via:
//
//	ProjectConnectorsSumologicArgs{...}
type ProjectConnectorsSumologicInput interface {
	pulumi.Input

	ToProjectConnectorsSumologicOutput() ProjectConnectorsSumologicOutput
	ToProjectConnectorsSumologicOutputWithContext(context.Context) ProjectConnectorsSumologicOutput
}

type ProjectConnectorsSumologicArgs struct {
	// Whether to enable streaming of audit events.
	AuditEnabled pulumi.BoolPtrInput `pulumi:"auditEnabled"`
	// Specify which events will be sent to the external audit service (including tenant selection).
	AuditFilters ProjectConnectorsSumologicAuditFilterArrayInput `pulumi:"auditFilters"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The URL associated with an HTTP Hosted collector
	HttpSourceUrl pulumi.StringInput    `pulumi:"httpSourceUrl"`
	Id            pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether to send troubleshooting events.
	TroubleshootLogEnabled pulumi.BoolPtrInput `pulumi:"troubleshootLogEnabled"`
}

func (ProjectConnectorsSumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSumologic)(nil)).Elem()
}

func (i ProjectConnectorsSumologicArgs) ToProjectConnectorsSumologicOutput() ProjectConnectorsSumologicOutput {
	return i.ToProjectConnectorsSumologicOutputWithContext(context.Background())
}

func (i ProjectConnectorsSumologicArgs) ToProjectConnectorsSumologicOutputWithContext(ctx context.Context) ProjectConnectorsSumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSumologicOutput)
}

// ProjectConnectorsSumologicArrayInput is an input type that accepts ProjectConnectorsSumologicArray and ProjectConnectorsSumologicArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSumologicArrayInput` via:
//
//	ProjectConnectorsSumologicArray{ ProjectConnectorsSumologicArgs{...} }
type ProjectConnectorsSumologicArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSumologicArrayOutput() ProjectConnectorsSumologicArrayOutput
	ToProjectConnectorsSumologicArrayOutputWithContext(context.Context) ProjectConnectorsSumologicArrayOutput
}

type ProjectConnectorsSumologicArray []ProjectConnectorsSumologicInput

func (ProjectConnectorsSumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSumologic)(nil)).Elem()
}

func (i ProjectConnectorsSumologicArray) ToProjectConnectorsSumologicArrayOutput() ProjectConnectorsSumologicArrayOutput {
	return i.ToProjectConnectorsSumologicArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSumologicArray) ToProjectConnectorsSumologicArrayOutputWithContext(ctx context.Context) ProjectConnectorsSumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSumologicArrayOutput)
}

type ProjectConnectorsSumologicOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSumologic)(nil)).Elem()
}

func (o ProjectConnectorsSumologicOutput) ToProjectConnectorsSumologicOutput() ProjectConnectorsSumologicOutput {
	return o
}

func (o ProjectConnectorsSumologicOutput) ToProjectConnectorsSumologicOutputWithContext(ctx context.Context) ProjectConnectorsSumologicOutput {
	return o
}

// Whether to enable streaming of audit events.
func (o ProjectConnectorsSumologicOutput) AuditEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) *bool { return v.AuditEnabled }).(pulumi.BoolPtrOutput)
}

// Specify which events will be sent to the external audit service (including tenant selection).
func (o ProjectConnectorsSumologicOutput) AuditFilters() ProjectConnectorsSumologicAuditFilterArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) []ProjectConnectorsSumologicAuditFilter { return v.AuditFilters }).(ProjectConnectorsSumologicAuditFilterArrayOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsSumologicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The URL associated with an HTTP Hosted collector
func (o ProjectConnectorsSumologicOutput) HttpSourceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) string { return v.HttpSourceUrl }).(pulumi.StringOutput)
}

func (o ProjectConnectorsSumologicOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) string { return v.Name }).(pulumi.StringOutput)
}

// Whether to send troubleshooting events.
func (o ProjectConnectorsSumologicOutput) TroubleshootLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologic) *bool { return v.TroubleshootLogEnabled }).(pulumi.BoolPtrOutput)
}

type ProjectConnectorsSumologicArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSumologic)(nil)).Elem()
}

func (o ProjectConnectorsSumologicArrayOutput) ToProjectConnectorsSumologicArrayOutput() ProjectConnectorsSumologicArrayOutput {
	return o
}

func (o ProjectConnectorsSumologicArrayOutput) ToProjectConnectorsSumologicArrayOutputWithContext(ctx context.Context) ProjectConnectorsSumologicArrayOutput {
	return o
}

func (o ProjectConnectorsSumologicArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSumologic {
		return vs[0].([]ProjectConnectorsSumologic)[vs[1].(int)]
	}).(ProjectConnectorsSumologicOutput)
}

type ProjectConnectorsSumologicAuditFilter struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key string `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator string `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values []string `pulumi:"values"`
}

// ProjectConnectorsSumologicAuditFilterInput is an input type that accepts ProjectConnectorsSumologicAuditFilterArgs and ProjectConnectorsSumologicAuditFilterOutput values.
// You can construct a concrete instance of `ProjectConnectorsSumologicAuditFilterInput` via:
//
//	ProjectConnectorsSumologicAuditFilterArgs{...}
type ProjectConnectorsSumologicAuditFilterInput interface {
	pulumi.Input

	ToProjectConnectorsSumologicAuditFilterOutput() ProjectConnectorsSumologicAuditFilterOutput
	ToProjectConnectorsSumologicAuditFilterOutputWithContext(context.Context) ProjectConnectorsSumologicAuditFilterOutput
}

type ProjectConnectorsSumologicAuditFilterArgs struct {
	// The field name to filter on (either 'actions' or 'tenants').
	Key pulumi.StringInput `pulumi:"key"`
	// The filter operation to apply ('includes' or 'excludes').
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of values to match against for the filter.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProjectConnectorsSumologicAuditFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSumologicAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsSumologicAuditFilterArgs) ToProjectConnectorsSumologicAuditFilterOutput() ProjectConnectorsSumologicAuditFilterOutput {
	return i.ToProjectConnectorsSumologicAuditFilterOutputWithContext(context.Background())
}

func (i ProjectConnectorsSumologicAuditFilterArgs) ToProjectConnectorsSumologicAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsSumologicAuditFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSumologicAuditFilterOutput)
}

// ProjectConnectorsSumologicAuditFilterArrayInput is an input type that accepts ProjectConnectorsSumologicAuditFilterArray and ProjectConnectorsSumologicAuditFilterArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSumologicAuditFilterArrayInput` via:
//
//	ProjectConnectorsSumologicAuditFilterArray{ ProjectConnectorsSumologicAuditFilterArgs{...} }
type ProjectConnectorsSumologicAuditFilterArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSumologicAuditFilterArrayOutput() ProjectConnectorsSumologicAuditFilterArrayOutput
	ToProjectConnectorsSumologicAuditFilterArrayOutputWithContext(context.Context) ProjectConnectorsSumologicAuditFilterArrayOutput
}

type ProjectConnectorsSumologicAuditFilterArray []ProjectConnectorsSumologicAuditFilterInput

func (ProjectConnectorsSumologicAuditFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSumologicAuditFilter)(nil)).Elem()
}

func (i ProjectConnectorsSumologicAuditFilterArray) ToProjectConnectorsSumologicAuditFilterArrayOutput() ProjectConnectorsSumologicAuditFilterArrayOutput {
	return i.ToProjectConnectorsSumologicAuditFilterArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSumologicAuditFilterArray) ToProjectConnectorsSumologicAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsSumologicAuditFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSumologicAuditFilterArrayOutput)
}

type ProjectConnectorsSumologicAuditFilterOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSumologicAuditFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSumologicAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsSumologicAuditFilterOutput) ToProjectConnectorsSumologicAuditFilterOutput() ProjectConnectorsSumologicAuditFilterOutput {
	return o
}

func (o ProjectConnectorsSumologicAuditFilterOutput) ToProjectConnectorsSumologicAuditFilterOutputWithContext(ctx context.Context) ProjectConnectorsSumologicAuditFilterOutput {
	return o
}

// The field name to filter on (either 'actions' or 'tenants').
func (o ProjectConnectorsSumologicAuditFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologicAuditFilter) string { return v.Key }).(pulumi.StringOutput)
}

// The filter operation to apply ('includes' or 'excludes').
func (o ProjectConnectorsSumologicAuditFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologicAuditFilter) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of values to match against for the filter.
func (o ProjectConnectorsSumologicAuditFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectConnectorsSumologicAuditFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProjectConnectorsSumologicAuditFilterArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSumologicAuditFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSumologicAuditFilter)(nil)).Elem()
}

func (o ProjectConnectorsSumologicAuditFilterArrayOutput) ToProjectConnectorsSumologicAuditFilterArrayOutput() ProjectConnectorsSumologicAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsSumologicAuditFilterArrayOutput) ToProjectConnectorsSumologicAuditFilterArrayOutputWithContext(ctx context.Context) ProjectConnectorsSumologicAuditFilterArrayOutput {
	return o
}

func (o ProjectConnectorsSumologicAuditFilterArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSumologicAuditFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSumologicAuditFilter {
		return vs[0].([]ProjectConnectorsSumologicAuditFilter)[vs[1].(int)]
	}).(ProjectConnectorsSumologicAuditFilterOutput)
}

type ProjectConnectorsSupabase struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// The duration in minutes for which the token is valid.
	ExpirationTime *float64 `pulumi:"expirationTime"`
	Id             *string  `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The signing secret for your Supabase project.
	SigningSecret string `pulumi:"signingSecret"`
}

// ProjectConnectorsSupabaseInput is an input type that accepts ProjectConnectorsSupabaseArgs and ProjectConnectorsSupabaseOutput values.
// You can construct a concrete instance of `ProjectConnectorsSupabaseInput` via:
//
//	ProjectConnectorsSupabaseArgs{...}
type ProjectConnectorsSupabaseInput interface {
	pulumi.Input

	ToProjectConnectorsSupabaseOutput() ProjectConnectorsSupabaseOutput
	ToProjectConnectorsSupabaseOutputWithContext(context.Context) ProjectConnectorsSupabaseOutput
}

type ProjectConnectorsSupabaseArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The duration in minutes for which the token is valid.
	ExpirationTime pulumi.Float64PtrInput `pulumi:"expirationTime"`
	Id             pulumi.StringPtrInput  `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The signing secret for your Supabase project.
	SigningSecret pulumi.StringInput `pulumi:"signingSecret"`
}

func (ProjectConnectorsSupabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSupabase)(nil)).Elem()
}

func (i ProjectConnectorsSupabaseArgs) ToProjectConnectorsSupabaseOutput() ProjectConnectorsSupabaseOutput {
	return i.ToProjectConnectorsSupabaseOutputWithContext(context.Background())
}

func (i ProjectConnectorsSupabaseArgs) ToProjectConnectorsSupabaseOutputWithContext(ctx context.Context) ProjectConnectorsSupabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSupabaseOutput)
}

// ProjectConnectorsSupabaseArrayInput is an input type that accepts ProjectConnectorsSupabaseArray and ProjectConnectorsSupabaseArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsSupabaseArrayInput` via:
//
//	ProjectConnectorsSupabaseArray{ ProjectConnectorsSupabaseArgs{...} }
type ProjectConnectorsSupabaseArrayInput interface {
	pulumi.Input

	ToProjectConnectorsSupabaseArrayOutput() ProjectConnectorsSupabaseArrayOutput
	ToProjectConnectorsSupabaseArrayOutputWithContext(context.Context) ProjectConnectorsSupabaseArrayOutput
}

type ProjectConnectorsSupabaseArray []ProjectConnectorsSupabaseInput

func (ProjectConnectorsSupabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSupabase)(nil)).Elem()
}

func (i ProjectConnectorsSupabaseArray) ToProjectConnectorsSupabaseArrayOutput() ProjectConnectorsSupabaseArrayOutput {
	return i.ToProjectConnectorsSupabaseArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsSupabaseArray) ToProjectConnectorsSupabaseArrayOutputWithContext(ctx context.Context) ProjectConnectorsSupabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsSupabaseArrayOutput)
}

type ProjectConnectorsSupabaseOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSupabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsSupabase)(nil)).Elem()
}

func (o ProjectConnectorsSupabaseOutput) ToProjectConnectorsSupabaseOutput() ProjectConnectorsSupabaseOutput {
	return o
}

func (o ProjectConnectorsSupabaseOutput) ToProjectConnectorsSupabaseOutputWithContext(ctx context.Context) ProjectConnectorsSupabaseOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsSupabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSupabase) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The duration in minutes for which the token is valid.
func (o ProjectConnectorsSupabaseOutput) ExpirationTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSupabase) *float64 { return v.ExpirationTime }).(pulumi.Float64PtrOutput)
}

func (o ProjectConnectorsSupabaseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsSupabase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsSupabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSupabase) string { return v.Name }).(pulumi.StringOutput)
}

// The signing secret for your Supabase project.
func (o ProjectConnectorsSupabaseOutput) SigningSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsSupabase) string { return v.SigningSecret }).(pulumi.StringOutput)
}

type ProjectConnectorsSupabaseArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsSupabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsSupabase)(nil)).Elem()
}

func (o ProjectConnectorsSupabaseArrayOutput) ToProjectConnectorsSupabaseArrayOutput() ProjectConnectorsSupabaseArrayOutput {
	return o
}

func (o ProjectConnectorsSupabaseArrayOutput) ToProjectConnectorsSupabaseArrayOutputWithContext(ctx context.Context) ProjectConnectorsSupabaseArrayOutput {
	return o
}

func (o ProjectConnectorsSupabaseArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsSupabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsSupabase {
		return vs[0].([]ProjectConnectorsSupabase)[vs[1].(int)]
	}).(ProjectConnectorsSupabaseOutput)
}

type ProjectConnectorsTelesign struct {
	// The unique Telesign API key
	ApiKey string `pulumi:"apiKey"`
	// The unique Telesign account Customer ID
	CustomerId string `pulumi:"customerId"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
}

// ProjectConnectorsTelesignInput is an input type that accepts ProjectConnectorsTelesignArgs and ProjectConnectorsTelesignOutput values.
// You can construct a concrete instance of `ProjectConnectorsTelesignInput` via:
//
//	ProjectConnectorsTelesignArgs{...}
type ProjectConnectorsTelesignInput interface {
	pulumi.Input

	ToProjectConnectorsTelesignOutput() ProjectConnectorsTelesignOutput
	ToProjectConnectorsTelesignOutputWithContext(context.Context) ProjectConnectorsTelesignOutput
}

type ProjectConnectorsTelesignArgs struct {
	// The unique Telesign API key
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The unique Telesign account Customer ID
	CustomerId pulumi.StringInput `pulumi:"customerId"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ProjectConnectorsTelesignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTelesign)(nil)).Elem()
}

func (i ProjectConnectorsTelesignArgs) ToProjectConnectorsTelesignOutput() ProjectConnectorsTelesignOutput {
	return i.ToProjectConnectorsTelesignOutputWithContext(context.Background())
}

func (i ProjectConnectorsTelesignArgs) ToProjectConnectorsTelesignOutputWithContext(ctx context.Context) ProjectConnectorsTelesignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTelesignOutput)
}

// ProjectConnectorsTelesignArrayInput is an input type that accepts ProjectConnectorsTelesignArray and ProjectConnectorsTelesignArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsTelesignArrayInput` via:
//
//	ProjectConnectorsTelesignArray{ ProjectConnectorsTelesignArgs{...} }
type ProjectConnectorsTelesignArrayInput interface {
	pulumi.Input

	ToProjectConnectorsTelesignArrayOutput() ProjectConnectorsTelesignArrayOutput
	ToProjectConnectorsTelesignArrayOutputWithContext(context.Context) ProjectConnectorsTelesignArrayOutput
}

type ProjectConnectorsTelesignArray []ProjectConnectorsTelesignInput

func (ProjectConnectorsTelesignArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTelesign)(nil)).Elem()
}

func (i ProjectConnectorsTelesignArray) ToProjectConnectorsTelesignArrayOutput() ProjectConnectorsTelesignArrayOutput {
	return i.ToProjectConnectorsTelesignArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsTelesignArray) ToProjectConnectorsTelesignArrayOutputWithContext(ctx context.Context) ProjectConnectorsTelesignArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTelesignArrayOutput)
}

type ProjectConnectorsTelesignOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTelesignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTelesign)(nil)).Elem()
}

func (o ProjectConnectorsTelesignOutput) ToProjectConnectorsTelesignOutput() ProjectConnectorsTelesignOutput {
	return o
}

func (o ProjectConnectorsTelesignOutput) ToProjectConnectorsTelesignOutputWithContext(ctx context.Context) ProjectConnectorsTelesignOutput {
	return o
}

// The unique Telesign API key
func (o ProjectConnectorsTelesignOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTelesign) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The unique Telesign account Customer ID
func (o ProjectConnectorsTelesignOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTelesign) string { return v.CustomerId }).(pulumi.StringOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsTelesignOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTelesign) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsTelesignOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTelesign) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsTelesignOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTelesign) string { return v.Name }).(pulumi.StringOutput)
}

type ProjectConnectorsTelesignArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTelesignArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTelesign)(nil)).Elem()
}

func (o ProjectConnectorsTelesignArrayOutput) ToProjectConnectorsTelesignArrayOutput() ProjectConnectorsTelesignArrayOutput {
	return o
}

func (o ProjectConnectorsTelesignArrayOutput) ToProjectConnectorsTelesignArrayOutputWithContext(ctx context.Context) ProjectConnectorsTelesignArrayOutput {
	return o
}

func (o ProjectConnectorsTelesignArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsTelesignOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsTelesign {
		return vs[0].([]ProjectConnectorsTelesign)[vs[1].(int)]
	}).(ProjectConnectorsTelesignOutput)
}

type ProjectConnectorsTraceable struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	// EU(Europe) Region deployment of Traceable platform.
	EuRegion *bool   `pulumi:"euRegion"`
	Id       *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The Traceable secret key.
	SecretKey string `pulumi:"secretKey"`
}

// ProjectConnectorsTraceableInput is an input type that accepts ProjectConnectorsTraceableArgs and ProjectConnectorsTraceableOutput values.
// You can construct a concrete instance of `ProjectConnectorsTraceableInput` via:
//
//	ProjectConnectorsTraceableArgs{...}
type ProjectConnectorsTraceableInput interface {
	pulumi.Input

	ToProjectConnectorsTraceableOutput() ProjectConnectorsTraceableOutput
	ToProjectConnectorsTraceableOutputWithContext(context.Context) ProjectConnectorsTraceableOutput
}

type ProjectConnectorsTraceableArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EU(Europe) Region deployment of Traceable platform.
	EuRegion pulumi.BoolPtrInput   `pulumi:"euRegion"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The Traceable secret key.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
}

func (ProjectConnectorsTraceableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTraceable)(nil)).Elem()
}

func (i ProjectConnectorsTraceableArgs) ToProjectConnectorsTraceableOutput() ProjectConnectorsTraceableOutput {
	return i.ToProjectConnectorsTraceableOutputWithContext(context.Background())
}

func (i ProjectConnectorsTraceableArgs) ToProjectConnectorsTraceableOutputWithContext(ctx context.Context) ProjectConnectorsTraceableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTraceableOutput)
}

// ProjectConnectorsTraceableArrayInput is an input type that accepts ProjectConnectorsTraceableArray and ProjectConnectorsTraceableArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsTraceableArrayInput` via:
//
//	ProjectConnectorsTraceableArray{ ProjectConnectorsTraceableArgs{...} }
type ProjectConnectorsTraceableArrayInput interface {
	pulumi.Input

	ToProjectConnectorsTraceableArrayOutput() ProjectConnectorsTraceableArrayOutput
	ToProjectConnectorsTraceableArrayOutputWithContext(context.Context) ProjectConnectorsTraceableArrayOutput
}

type ProjectConnectorsTraceableArray []ProjectConnectorsTraceableInput

func (ProjectConnectorsTraceableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTraceable)(nil)).Elem()
}

func (i ProjectConnectorsTraceableArray) ToProjectConnectorsTraceableArrayOutput() ProjectConnectorsTraceableArrayOutput {
	return i.ToProjectConnectorsTraceableArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsTraceableArray) ToProjectConnectorsTraceableArrayOutputWithContext(ctx context.Context) ProjectConnectorsTraceableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTraceableArrayOutput)
}

type ProjectConnectorsTraceableOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTraceableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTraceable)(nil)).Elem()
}

func (o ProjectConnectorsTraceableOutput) ToProjectConnectorsTraceableOutput() ProjectConnectorsTraceableOutput {
	return o
}

func (o ProjectConnectorsTraceableOutput) ToProjectConnectorsTraceableOutputWithContext(ctx context.Context) ProjectConnectorsTraceableOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsTraceableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTraceable) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EU(Europe) Region deployment of Traceable platform.
func (o ProjectConnectorsTraceableOutput) EuRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTraceable) *bool { return v.EuRegion }).(pulumi.BoolPtrOutput)
}

func (o ProjectConnectorsTraceableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTraceable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsTraceableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTraceable) string { return v.Name }).(pulumi.StringOutput)
}

// The Traceable secret key.
func (o ProjectConnectorsTraceableOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTraceable) string { return v.SecretKey }).(pulumi.StringOutput)
}

type ProjectConnectorsTraceableArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTraceableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTraceable)(nil)).Elem()
}

func (o ProjectConnectorsTraceableArrayOutput) ToProjectConnectorsTraceableArrayOutput() ProjectConnectorsTraceableArrayOutput {
	return o
}

func (o ProjectConnectorsTraceableArrayOutput) ToProjectConnectorsTraceableArrayOutputWithContext(ctx context.Context) ProjectConnectorsTraceableArrayOutput {
	return o
}

func (o ProjectConnectorsTraceableArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsTraceableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsTraceable {
		return vs[0].([]ProjectConnectorsTraceable)[vs[1].(int)]
	}).(ProjectConnectorsTraceableOutput)
}

type ProjectConnectorsTurnstile struct {
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// The secret key authorizes communication between Descope backend and the Turnstile server to verify the user's response.
	SecretKey string `pulumi:"secretKey"`
	// The site key is used to invoke Turnstile service on your site or mobile application.
	SiteKey string `pulumi:"siteKey"`
}

// ProjectConnectorsTurnstileInput is an input type that accepts ProjectConnectorsTurnstileArgs and ProjectConnectorsTurnstileOutput values.
// You can construct a concrete instance of `ProjectConnectorsTurnstileInput` via:
//
//	ProjectConnectorsTurnstileArgs{...}
type ProjectConnectorsTurnstileInput interface {
	pulumi.Input

	ToProjectConnectorsTurnstileOutput() ProjectConnectorsTurnstileOutput
	ToProjectConnectorsTurnstileOutputWithContext(context.Context) ProjectConnectorsTurnstileOutput
}

type ProjectConnectorsTurnstileArgs struct {
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret key authorizes communication between Descope backend and the Turnstile server to verify the user's response.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The site key is used to invoke Turnstile service on your site or mobile application.
	SiteKey pulumi.StringInput `pulumi:"siteKey"`
}

func (ProjectConnectorsTurnstileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTurnstile)(nil)).Elem()
}

func (i ProjectConnectorsTurnstileArgs) ToProjectConnectorsTurnstileOutput() ProjectConnectorsTurnstileOutput {
	return i.ToProjectConnectorsTurnstileOutputWithContext(context.Background())
}

func (i ProjectConnectorsTurnstileArgs) ToProjectConnectorsTurnstileOutputWithContext(ctx context.Context) ProjectConnectorsTurnstileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTurnstileOutput)
}

// ProjectConnectorsTurnstileArrayInput is an input type that accepts ProjectConnectorsTurnstileArray and ProjectConnectorsTurnstileArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsTurnstileArrayInput` via:
//
//	ProjectConnectorsTurnstileArray{ ProjectConnectorsTurnstileArgs{...} }
type ProjectConnectorsTurnstileArrayInput interface {
	pulumi.Input

	ToProjectConnectorsTurnstileArrayOutput() ProjectConnectorsTurnstileArrayOutput
	ToProjectConnectorsTurnstileArrayOutputWithContext(context.Context) ProjectConnectorsTurnstileArrayOutput
}

type ProjectConnectorsTurnstileArray []ProjectConnectorsTurnstileInput

func (ProjectConnectorsTurnstileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTurnstile)(nil)).Elem()
}

func (i ProjectConnectorsTurnstileArray) ToProjectConnectorsTurnstileArrayOutput() ProjectConnectorsTurnstileArrayOutput {
	return i.ToProjectConnectorsTurnstileArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsTurnstileArray) ToProjectConnectorsTurnstileArrayOutputWithContext(ctx context.Context) ProjectConnectorsTurnstileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTurnstileArrayOutput)
}

type ProjectConnectorsTurnstileOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTurnstileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTurnstile)(nil)).Elem()
}

func (o ProjectConnectorsTurnstileOutput) ToProjectConnectorsTurnstileOutput() ProjectConnectorsTurnstileOutput {
	return o
}

func (o ProjectConnectorsTurnstileOutput) ToProjectConnectorsTurnstileOutputWithContext(ctx context.Context) ProjectConnectorsTurnstileOutput {
	return o
}

// A description of what your connector is used for.
func (o ProjectConnectorsTurnstileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTurnstile) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsTurnstileOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTurnstile) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsTurnstileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTurnstile) string { return v.Name }).(pulumi.StringOutput)
}

// The secret key authorizes communication between Descope backend and the Turnstile server to verify the user's response.
func (o ProjectConnectorsTurnstileOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTurnstile) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The site key is used to invoke Turnstile service on your site or mobile application.
func (o ProjectConnectorsTurnstileOutput) SiteKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTurnstile) string { return v.SiteKey }).(pulumi.StringOutput)
}

type ProjectConnectorsTurnstileArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTurnstileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTurnstile)(nil)).Elem()
}

func (o ProjectConnectorsTurnstileArrayOutput) ToProjectConnectorsTurnstileArrayOutput() ProjectConnectorsTurnstileArrayOutput {
	return o
}

func (o ProjectConnectorsTurnstileArrayOutput) ToProjectConnectorsTurnstileArrayOutputWithContext(ctx context.Context) ProjectConnectorsTurnstileArrayOutput {
	return o
}

func (o ProjectConnectorsTurnstileArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsTurnstileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsTurnstile {
		return vs[0].([]ProjectConnectorsTurnstile)[vs[1].(int)]
	}).(ProjectConnectorsTurnstileOutput)
}

type ProjectConnectorsTwilioCore struct {
	// Twilio Account SID from your Twilio Console.
	AccountSid string `pulumi:"accountSid"`
	// Twilio authentication credentials (either auth token or API key/secret).
	Authentication ProjectConnectorsTwilioCoreAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Configuration for SMS and voice message senders.
	Senders ProjectConnectorsTwilioCoreSenders `pulumi:"senders"`
}

// ProjectConnectorsTwilioCoreInput is an input type that accepts ProjectConnectorsTwilioCoreArgs and ProjectConnectorsTwilioCoreOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreInput` via:
//
//	ProjectConnectorsTwilioCoreArgs{...}
type ProjectConnectorsTwilioCoreInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreOutput() ProjectConnectorsTwilioCoreOutput
	ToProjectConnectorsTwilioCoreOutputWithContext(context.Context) ProjectConnectorsTwilioCoreOutput
}

type ProjectConnectorsTwilioCoreArgs struct {
	// Twilio Account SID from your Twilio Console.
	AccountSid pulumi.StringInput `pulumi:"accountSid"`
	// Twilio authentication credentials (either auth token or API key/secret).
	Authentication ProjectConnectorsTwilioCoreAuthenticationInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Configuration for SMS and voice message senders.
	Senders ProjectConnectorsTwilioCoreSendersInput `pulumi:"senders"`
}

func (ProjectConnectorsTwilioCoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCore)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreArgs) ToProjectConnectorsTwilioCoreOutput() ProjectConnectorsTwilioCoreOutput {
	return i.ToProjectConnectorsTwilioCoreOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreArgs) ToProjectConnectorsTwilioCoreOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreOutput)
}

// ProjectConnectorsTwilioCoreArrayInput is an input type that accepts ProjectConnectorsTwilioCoreArray and ProjectConnectorsTwilioCoreArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreArrayInput` via:
//
//	ProjectConnectorsTwilioCoreArray{ ProjectConnectorsTwilioCoreArgs{...} }
type ProjectConnectorsTwilioCoreArrayInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreArrayOutput() ProjectConnectorsTwilioCoreArrayOutput
	ToProjectConnectorsTwilioCoreArrayOutputWithContext(context.Context) ProjectConnectorsTwilioCoreArrayOutput
}

type ProjectConnectorsTwilioCoreArray []ProjectConnectorsTwilioCoreInput

func (ProjectConnectorsTwilioCoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTwilioCore)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreArray) ToProjectConnectorsTwilioCoreArrayOutput() ProjectConnectorsTwilioCoreArrayOutput {
	return i.ToProjectConnectorsTwilioCoreArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreArray) ToProjectConnectorsTwilioCoreArrayOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreArrayOutput)
}

type ProjectConnectorsTwilioCoreOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCore)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreOutput) ToProjectConnectorsTwilioCoreOutput() ProjectConnectorsTwilioCoreOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreOutput) ToProjectConnectorsTwilioCoreOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreOutput {
	return o
}

// Twilio Account SID from your Twilio Console.
func (o ProjectConnectorsTwilioCoreOutput) AccountSid() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) string { return v.AccountSid }).(pulumi.StringOutput)
}

// Twilio authentication credentials (either auth token or API key/secret).
func (o ProjectConnectorsTwilioCoreOutput) Authentication() ProjectConnectorsTwilioCoreAuthenticationOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) ProjectConnectorsTwilioCoreAuthentication { return v.Authentication }).(ProjectConnectorsTwilioCoreAuthenticationOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsTwilioCoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsTwilioCoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsTwilioCoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) string { return v.Name }).(pulumi.StringOutput)
}

// Configuration for SMS and voice message senders.
func (o ProjectConnectorsTwilioCoreOutput) Senders() ProjectConnectorsTwilioCoreSendersOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCore) ProjectConnectorsTwilioCoreSenders { return v.Senders }).(ProjectConnectorsTwilioCoreSendersOutput)
}

type ProjectConnectorsTwilioCoreArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTwilioCore)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreArrayOutput) ToProjectConnectorsTwilioCoreArrayOutput() ProjectConnectorsTwilioCoreArrayOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreArrayOutput) ToProjectConnectorsTwilioCoreArrayOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreArrayOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsTwilioCoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsTwilioCore {
		return vs[0].([]ProjectConnectorsTwilioCore)[vs[1].(int)]
	}).(ProjectConnectorsTwilioCoreOutput)
}

type ProjectConnectorsTwilioCoreAuthentication struct {
	// Twilio API Key for authentication (used with API Secret).
	ApiKey *string `pulumi:"apiKey"`
	// Twilio API Secret for authentication (used with API Key).
	ApiSecret *string `pulumi:"apiSecret"`
	// Twilio Auth Token for authentication.
	AuthToken *string `pulumi:"authToken"`
}

// ProjectConnectorsTwilioCoreAuthenticationInput is an input type that accepts ProjectConnectorsTwilioCoreAuthenticationArgs and ProjectConnectorsTwilioCoreAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreAuthenticationInput` via:
//
//	ProjectConnectorsTwilioCoreAuthenticationArgs{...}
type ProjectConnectorsTwilioCoreAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreAuthenticationOutput() ProjectConnectorsTwilioCoreAuthenticationOutput
	ToProjectConnectorsTwilioCoreAuthenticationOutputWithContext(context.Context) ProjectConnectorsTwilioCoreAuthenticationOutput
}

type ProjectConnectorsTwilioCoreAuthenticationArgs struct {
	// Twilio API Key for authentication (used with API Secret).
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Twilio API Secret for authentication (used with API Key).
	ApiSecret pulumi.StringPtrInput `pulumi:"apiSecret"`
	// Twilio Auth Token for authentication.
	AuthToken pulumi.StringPtrInput `pulumi:"authToken"`
}

func (ProjectConnectorsTwilioCoreAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreAuthenticationArgs) ToProjectConnectorsTwilioCoreAuthenticationOutput() ProjectConnectorsTwilioCoreAuthenticationOutput {
	return i.ToProjectConnectorsTwilioCoreAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreAuthenticationArgs) ToProjectConnectorsTwilioCoreAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreAuthenticationOutput)
}

type ProjectConnectorsTwilioCoreAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreAuthenticationOutput) ToProjectConnectorsTwilioCoreAuthenticationOutput() ProjectConnectorsTwilioCoreAuthenticationOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreAuthenticationOutput) ToProjectConnectorsTwilioCoreAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreAuthenticationOutput {
	return o
}

// Twilio API Key for authentication (used with API Secret).
func (o ProjectConnectorsTwilioCoreAuthenticationOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreAuthentication) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Twilio API Secret for authentication (used with API Key).
func (o ProjectConnectorsTwilioCoreAuthenticationOutput) ApiSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreAuthentication) *string { return v.ApiSecret }).(pulumi.StringPtrOutput)
}

// Twilio Auth Token for authentication.
func (o ProjectConnectorsTwilioCoreAuthenticationOutput) AuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreAuthentication) *string { return v.AuthToken }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsTwilioCoreSenders struct {
	// SMS sender configuration using either a phone number or messaging service.
	Sms ProjectConnectorsTwilioCoreSendersSms `pulumi:"sms"`
	// Voice call sender configuration.
	Voice *ProjectConnectorsTwilioCoreSendersVoice `pulumi:"voice"`
}

// ProjectConnectorsTwilioCoreSendersInput is an input type that accepts ProjectConnectorsTwilioCoreSendersArgs and ProjectConnectorsTwilioCoreSendersOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreSendersInput` via:
//
//	ProjectConnectorsTwilioCoreSendersArgs{...}
type ProjectConnectorsTwilioCoreSendersInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreSendersOutput() ProjectConnectorsTwilioCoreSendersOutput
	ToProjectConnectorsTwilioCoreSendersOutputWithContext(context.Context) ProjectConnectorsTwilioCoreSendersOutput
}

type ProjectConnectorsTwilioCoreSendersArgs struct {
	// SMS sender configuration using either a phone number or messaging service.
	Sms ProjectConnectorsTwilioCoreSendersSmsInput `pulumi:"sms"`
	// Voice call sender configuration.
	Voice ProjectConnectorsTwilioCoreSendersVoicePtrInput `pulumi:"voice"`
}

func (ProjectConnectorsTwilioCoreSendersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSenders)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreSendersArgs) ToProjectConnectorsTwilioCoreSendersOutput() ProjectConnectorsTwilioCoreSendersOutput {
	return i.ToProjectConnectorsTwilioCoreSendersOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreSendersArgs) ToProjectConnectorsTwilioCoreSendersOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreSendersOutput)
}

type ProjectConnectorsTwilioCoreSendersOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreSendersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSenders)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreSendersOutput) ToProjectConnectorsTwilioCoreSendersOutput() ProjectConnectorsTwilioCoreSendersOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersOutput) ToProjectConnectorsTwilioCoreSendersOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersOutput {
	return o
}

// SMS sender configuration using either a phone number or messaging service.
func (o ProjectConnectorsTwilioCoreSendersOutput) Sms() ProjectConnectorsTwilioCoreSendersSmsOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreSenders) ProjectConnectorsTwilioCoreSendersSms { return v.Sms }).(ProjectConnectorsTwilioCoreSendersSmsOutput)
}

// Voice call sender configuration.
func (o ProjectConnectorsTwilioCoreSendersOutput) Voice() ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreSenders) *ProjectConnectorsTwilioCoreSendersVoice { return v.Voice }).(ProjectConnectorsTwilioCoreSendersVoicePtrOutput)
}

type ProjectConnectorsTwilioCoreSendersSms struct {
	// Twilio Messaging Service SID for sending SMS messages.
	MessagingServiceSid *string `pulumi:"messagingServiceSid"`
	// Twilio phone number for sending SMS messages.
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// ProjectConnectorsTwilioCoreSendersSmsInput is an input type that accepts ProjectConnectorsTwilioCoreSendersSmsArgs and ProjectConnectorsTwilioCoreSendersSmsOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreSendersSmsInput` via:
//
//	ProjectConnectorsTwilioCoreSendersSmsArgs{...}
type ProjectConnectorsTwilioCoreSendersSmsInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreSendersSmsOutput() ProjectConnectorsTwilioCoreSendersSmsOutput
	ToProjectConnectorsTwilioCoreSendersSmsOutputWithContext(context.Context) ProjectConnectorsTwilioCoreSendersSmsOutput
}

type ProjectConnectorsTwilioCoreSendersSmsArgs struct {
	// Twilio Messaging Service SID for sending SMS messages.
	MessagingServiceSid pulumi.StringPtrInput `pulumi:"messagingServiceSid"`
	// Twilio phone number for sending SMS messages.
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (ProjectConnectorsTwilioCoreSendersSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersSms)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreSendersSmsArgs) ToProjectConnectorsTwilioCoreSendersSmsOutput() ProjectConnectorsTwilioCoreSendersSmsOutput {
	return i.ToProjectConnectorsTwilioCoreSendersSmsOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreSendersSmsArgs) ToProjectConnectorsTwilioCoreSendersSmsOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreSendersSmsOutput)
}

type ProjectConnectorsTwilioCoreSendersSmsOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreSendersSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersSms)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreSendersSmsOutput) ToProjectConnectorsTwilioCoreSendersSmsOutput() ProjectConnectorsTwilioCoreSendersSmsOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersSmsOutput) ToProjectConnectorsTwilioCoreSendersSmsOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersSmsOutput {
	return o
}

// Twilio Messaging Service SID for sending SMS messages.
func (o ProjectConnectorsTwilioCoreSendersSmsOutput) MessagingServiceSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreSendersSms) *string { return v.MessagingServiceSid }).(pulumi.StringPtrOutput)
}

// Twilio phone number for sending SMS messages.
func (o ProjectConnectorsTwilioCoreSendersSmsOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreSendersSms) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type ProjectConnectorsTwilioCoreSendersVoice struct {
	// Twilio phone number for making voice calls.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// ProjectConnectorsTwilioCoreSendersVoiceInput is an input type that accepts ProjectConnectorsTwilioCoreSendersVoiceArgs and ProjectConnectorsTwilioCoreSendersVoiceOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreSendersVoiceInput` via:
//
//	ProjectConnectorsTwilioCoreSendersVoiceArgs{...}
type ProjectConnectorsTwilioCoreSendersVoiceInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreSendersVoiceOutput() ProjectConnectorsTwilioCoreSendersVoiceOutput
	ToProjectConnectorsTwilioCoreSendersVoiceOutputWithContext(context.Context) ProjectConnectorsTwilioCoreSendersVoiceOutput
}

type ProjectConnectorsTwilioCoreSendersVoiceArgs struct {
	// Twilio phone number for making voice calls.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (ProjectConnectorsTwilioCoreSendersVoiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersVoice)(nil)).Elem()
}

func (i ProjectConnectorsTwilioCoreSendersVoiceArgs) ToProjectConnectorsTwilioCoreSendersVoiceOutput() ProjectConnectorsTwilioCoreSendersVoiceOutput {
	return i.ToProjectConnectorsTwilioCoreSendersVoiceOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreSendersVoiceArgs) ToProjectConnectorsTwilioCoreSendersVoiceOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreSendersVoiceOutput)
}

func (i ProjectConnectorsTwilioCoreSendersVoiceArgs) ToProjectConnectorsTwilioCoreSendersVoicePtrOutput() ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return i.ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioCoreSendersVoiceArgs) ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreSendersVoiceOutput).ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(ctx)
}

// ProjectConnectorsTwilioCoreSendersVoicePtrInput is an input type that accepts ProjectConnectorsTwilioCoreSendersVoiceArgs, ProjectConnectorsTwilioCoreSendersVoicePtr and ProjectConnectorsTwilioCoreSendersVoicePtrOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioCoreSendersVoicePtrInput` via:
//
//	        ProjectConnectorsTwilioCoreSendersVoiceArgs{...}
//
//	or:
//
//	        nil
type ProjectConnectorsTwilioCoreSendersVoicePtrInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioCoreSendersVoicePtrOutput() ProjectConnectorsTwilioCoreSendersVoicePtrOutput
	ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(context.Context) ProjectConnectorsTwilioCoreSendersVoicePtrOutput
}

type projectConnectorsTwilioCoreSendersVoicePtrType ProjectConnectorsTwilioCoreSendersVoiceArgs

func ProjectConnectorsTwilioCoreSendersVoicePtr(v *ProjectConnectorsTwilioCoreSendersVoiceArgs) ProjectConnectorsTwilioCoreSendersVoicePtrInput {
	return (*projectConnectorsTwilioCoreSendersVoicePtrType)(v)
}

func (*projectConnectorsTwilioCoreSendersVoicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsTwilioCoreSendersVoice)(nil)).Elem()
}

func (i *projectConnectorsTwilioCoreSendersVoicePtrType) ToProjectConnectorsTwilioCoreSendersVoicePtrOutput() ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return i.ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(context.Background())
}

func (i *projectConnectorsTwilioCoreSendersVoicePtrType) ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioCoreSendersVoicePtrOutput)
}

type ProjectConnectorsTwilioCoreSendersVoiceOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreSendersVoiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersVoice)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreSendersVoiceOutput) ToProjectConnectorsTwilioCoreSendersVoiceOutput() ProjectConnectorsTwilioCoreSendersVoiceOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersVoiceOutput) ToProjectConnectorsTwilioCoreSendersVoiceOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoiceOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersVoiceOutput) ToProjectConnectorsTwilioCoreSendersVoicePtrOutput() ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return o.ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(context.Background())
}

func (o ProjectConnectorsTwilioCoreSendersVoiceOutput) ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConnectorsTwilioCoreSendersVoice) *ProjectConnectorsTwilioCoreSendersVoice {
		return &v
	}).(ProjectConnectorsTwilioCoreSendersVoicePtrOutput)
}

// Twilio phone number for making voice calls.
func (o ProjectConnectorsTwilioCoreSendersVoiceOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioCoreSendersVoice) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type ProjectConnectorsTwilioCoreSendersVoicePtrOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioCoreSendersVoicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConnectorsTwilioCoreSendersVoice)(nil)).Elem()
}

func (o ProjectConnectorsTwilioCoreSendersVoicePtrOutput) ToProjectConnectorsTwilioCoreSendersVoicePtrOutput() ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersVoicePtrOutput) ToProjectConnectorsTwilioCoreSendersVoicePtrOutputWithContext(ctx context.Context) ProjectConnectorsTwilioCoreSendersVoicePtrOutput {
	return o
}

func (o ProjectConnectorsTwilioCoreSendersVoicePtrOutput) Elem() ProjectConnectorsTwilioCoreSendersVoiceOutput {
	return o.ApplyT(func(v *ProjectConnectorsTwilioCoreSendersVoice) ProjectConnectorsTwilioCoreSendersVoice {
		if v != nil {
			return *v
		}
		var ret ProjectConnectorsTwilioCoreSendersVoice
		return ret
	}).(ProjectConnectorsTwilioCoreSendersVoiceOutput)
}

// Twilio phone number for making voice calls.
func (o ProjectConnectorsTwilioCoreSendersVoicePtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectConnectorsTwilioCoreSendersVoice) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type ProjectConnectorsTwilioVerify struct {
	// Twilio Account SID from your Twilio Console.
	AccountSid string `pulumi:"accountSid"`
	// Twilio authentication credentials (either auth token or API key/secret).
	Authentication ProjectConnectorsTwilioVerifyAuthentication `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// A custom name for your connector.
	Name string `pulumi:"name"`
	// Optional sender identifier for verification messages.
	Sender *string `pulumi:"sender"`
	// Twilio Verify Service SID for verification services.
	ServiceSid string `pulumi:"serviceSid"`
}

// ProjectConnectorsTwilioVerifyInput is an input type that accepts ProjectConnectorsTwilioVerifyArgs and ProjectConnectorsTwilioVerifyOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioVerifyInput` via:
//
//	ProjectConnectorsTwilioVerifyArgs{...}
type ProjectConnectorsTwilioVerifyInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioVerifyOutput() ProjectConnectorsTwilioVerifyOutput
	ToProjectConnectorsTwilioVerifyOutputWithContext(context.Context) ProjectConnectorsTwilioVerifyOutput
}

type ProjectConnectorsTwilioVerifyArgs struct {
	// Twilio Account SID from your Twilio Console.
	AccountSid pulumi.StringInput `pulumi:"accountSid"`
	// Twilio authentication credentials (either auth token or API key/secret).
	Authentication ProjectConnectorsTwilioVerifyAuthenticationInput `pulumi:"authentication"`
	// A description of what your connector is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	// A custom name for your connector.
	Name pulumi.StringInput `pulumi:"name"`
	// Optional sender identifier for verification messages.
	Sender pulumi.StringPtrInput `pulumi:"sender"`
	// Twilio Verify Service SID for verification services.
	ServiceSid pulumi.StringInput `pulumi:"serviceSid"`
}

func (ProjectConnectorsTwilioVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioVerify)(nil)).Elem()
}

func (i ProjectConnectorsTwilioVerifyArgs) ToProjectConnectorsTwilioVerifyOutput() ProjectConnectorsTwilioVerifyOutput {
	return i.ToProjectConnectorsTwilioVerifyOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioVerifyArgs) ToProjectConnectorsTwilioVerifyOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioVerifyOutput)
}

// ProjectConnectorsTwilioVerifyArrayInput is an input type that accepts ProjectConnectorsTwilioVerifyArray and ProjectConnectorsTwilioVerifyArrayOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioVerifyArrayInput` via:
//
//	ProjectConnectorsTwilioVerifyArray{ ProjectConnectorsTwilioVerifyArgs{...} }
type ProjectConnectorsTwilioVerifyArrayInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioVerifyArrayOutput() ProjectConnectorsTwilioVerifyArrayOutput
	ToProjectConnectorsTwilioVerifyArrayOutputWithContext(context.Context) ProjectConnectorsTwilioVerifyArrayOutput
}

type ProjectConnectorsTwilioVerifyArray []ProjectConnectorsTwilioVerifyInput

func (ProjectConnectorsTwilioVerifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTwilioVerify)(nil)).Elem()
}

func (i ProjectConnectorsTwilioVerifyArray) ToProjectConnectorsTwilioVerifyArrayOutput() ProjectConnectorsTwilioVerifyArrayOutput {
	return i.ToProjectConnectorsTwilioVerifyArrayOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioVerifyArray) ToProjectConnectorsTwilioVerifyArrayOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioVerifyArrayOutput)
}

type ProjectConnectorsTwilioVerifyOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioVerify)(nil)).Elem()
}

func (o ProjectConnectorsTwilioVerifyOutput) ToProjectConnectorsTwilioVerifyOutput() ProjectConnectorsTwilioVerifyOutput {
	return o
}

func (o ProjectConnectorsTwilioVerifyOutput) ToProjectConnectorsTwilioVerifyOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyOutput {
	return o
}

// Twilio Account SID from your Twilio Console.
func (o ProjectConnectorsTwilioVerifyOutput) AccountSid() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) string { return v.AccountSid }).(pulumi.StringOutput)
}

// Twilio authentication credentials (either auth token or API key/secret).
func (o ProjectConnectorsTwilioVerifyOutput) Authentication() ProjectConnectorsTwilioVerifyAuthenticationOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) ProjectConnectorsTwilioVerifyAuthentication {
		return v.Authentication
	}).(ProjectConnectorsTwilioVerifyAuthenticationOutput)
}

// A description of what your connector is used for.
func (o ProjectConnectorsTwilioVerifyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectConnectorsTwilioVerifyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A custom name for your connector.
func (o ProjectConnectorsTwilioVerifyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) string { return v.Name }).(pulumi.StringOutput)
}

// Optional sender identifier for verification messages.
func (o ProjectConnectorsTwilioVerifyOutput) Sender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) *string { return v.Sender }).(pulumi.StringPtrOutput)
}

// Twilio Verify Service SID for verification services.
func (o ProjectConnectorsTwilioVerifyOutput) ServiceSid() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerify) string { return v.ServiceSid }).(pulumi.StringOutput)
}

type ProjectConnectorsTwilioVerifyArrayOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioVerifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConnectorsTwilioVerify)(nil)).Elem()
}

func (o ProjectConnectorsTwilioVerifyArrayOutput) ToProjectConnectorsTwilioVerifyArrayOutput() ProjectConnectorsTwilioVerifyArrayOutput {
	return o
}

func (o ProjectConnectorsTwilioVerifyArrayOutput) ToProjectConnectorsTwilioVerifyArrayOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyArrayOutput {
	return o
}

func (o ProjectConnectorsTwilioVerifyArrayOutput) Index(i pulumi.IntInput) ProjectConnectorsTwilioVerifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConnectorsTwilioVerify {
		return vs[0].([]ProjectConnectorsTwilioVerify)[vs[1].(int)]
	}).(ProjectConnectorsTwilioVerifyOutput)
}

type ProjectConnectorsTwilioVerifyAuthentication struct {
	// Twilio API Key for authentication (used with API Secret).
	ApiKey *string `pulumi:"apiKey"`
	// Twilio API Secret for authentication (used with API Key).
	ApiSecret *string `pulumi:"apiSecret"`
	// Twilio Auth Token for authentication.
	AuthToken *string `pulumi:"authToken"`
}

// ProjectConnectorsTwilioVerifyAuthenticationInput is an input type that accepts ProjectConnectorsTwilioVerifyAuthenticationArgs and ProjectConnectorsTwilioVerifyAuthenticationOutput values.
// You can construct a concrete instance of `ProjectConnectorsTwilioVerifyAuthenticationInput` via:
//
//	ProjectConnectorsTwilioVerifyAuthenticationArgs{...}
type ProjectConnectorsTwilioVerifyAuthenticationInput interface {
	pulumi.Input

	ToProjectConnectorsTwilioVerifyAuthenticationOutput() ProjectConnectorsTwilioVerifyAuthenticationOutput
	ToProjectConnectorsTwilioVerifyAuthenticationOutputWithContext(context.Context) ProjectConnectorsTwilioVerifyAuthenticationOutput
}

type ProjectConnectorsTwilioVerifyAuthenticationArgs struct {
	// Twilio API Key for authentication (used with API Secret).
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Twilio API Secret for authentication (used with API Key).
	ApiSecret pulumi.StringPtrInput `pulumi:"apiSecret"`
	// Twilio Auth Token for authentication.
	AuthToken pulumi.StringPtrInput `pulumi:"authToken"`
}

func (ProjectConnectorsTwilioVerifyAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioVerifyAuthentication)(nil)).Elem()
}

func (i ProjectConnectorsTwilioVerifyAuthenticationArgs) ToProjectConnectorsTwilioVerifyAuthenticationOutput() ProjectConnectorsTwilioVerifyAuthenticationOutput {
	return i.ToProjectConnectorsTwilioVerifyAuthenticationOutputWithContext(context.Background())
}

func (i ProjectConnectorsTwilioVerifyAuthenticationArgs) ToProjectConnectorsTwilioVerifyAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConnectorsTwilioVerifyAuthenticationOutput)
}

type ProjectConnectorsTwilioVerifyAuthenticationOutput struct{ *pulumi.OutputState }

func (ProjectConnectorsTwilioVerifyAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConnectorsTwilioVerifyAuthentication)(nil)).Elem()
}

func (o ProjectConnectorsTwilioVerifyAuthenticationOutput) ToProjectConnectorsTwilioVerifyAuthenticationOutput() ProjectConnectorsTwilioVerifyAuthenticationOutput {
	return o
}

func (o ProjectConnectorsTwilioVerifyAuthenticationOutput) ToProjectConnectorsTwilioVerifyAuthenticationOutputWithContext(ctx context.Context) ProjectConnectorsTwilioVerifyAuthenticationOutput {
	return o
}

// Twilio API Key for authentication (used with API Secret).
func (o ProjectConnectorsTwilioVerifyAuthenticationOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerifyAuthentication) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Twilio API Secret for authentication (used with API Key).
func (o ProjectConnectorsTwilioVerifyAuthenticationOutput) ApiSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerifyAuthentication) *string { return v.ApiSecret }).(pulumi.StringPtrOutput)
}

// Twilio Auth Token for authentication.
func (o ProjectConnectorsTwilioVerifyAuthenticationOutput) AuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectConnectorsTwilioVerifyAuthentication) *string { return v.AuthToken }).(pulumi.StringPtrOutput)
}

type ProjectFlows struct {
	// The JSON data defining the authentication flow configuration, including metadata, screens, contents, and references.
	Data string `pulumi:"data"`
}

// ProjectFlowsInput is an input type that accepts ProjectFlowsArgs and ProjectFlowsOutput values.
// You can construct a concrete instance of `ProjectFlowsInput` via:
//
//	ProjectFlowsArgs{...}
type ProjectFlowsInput interface {
	pulumi.Input

	ToProjectFlowsOutput() ProjectFlowsOutput
	ToProjectFlowsOutputWithContext(context.Context) ProjectFlowsOutput
}

type ProjectFlowsArgs struct {
	// The JSON data defining the authentication flow configuration, including metadata, screens, contents, and references.
	Data pulumi.StringInput `pulumi:"data"`
}

func (ProjectFlowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFlows)(nil)).Elem()
}

func (i ProjectFlowsArgs) ToProjectFlowsOutput() ProjectFlowsOutput {
	return i.ToProjectFlowsOutputWithContext(context.Background())
}

func (i ProjectFlowsArgs) ToProjectFlowsOutputWithContext(ctx context.Context) ProjectFlowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFlowsOutput)
}

// ProjectFlowsMapInput is an input type that accepts ProjectFlowsMap and ProjectFlowsMapOutput values.
// You can construct a concrete instance of `ProjectFlowsMapInput` via:
//
//	ProjectFlowsMap{ "key": ProjectFlowsArgs{...} }
type ProjectFlowsMapInput interface {
	pulumi.Input

	ToProjectFlowsMapOutput() ProjectFlowsMapOutput
	ToProjectFlowsMapOutputWithContext(context.Context) ProjectFlowsMapOutput
}

type ProjectFlowsMap map[string]ProjectFlowsInput

func (ProjectFlowsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectFlows)(nil)).Elem()
}

func (i ProjectFlowsMap) ToProjectFlowsMapOutput() ProjectFlowsMapOutput {
	return i.ToProjectFlowsMapOutputWithContext(context.Background())
}

func (i ProjectFlowsMap) ToProjectFlowsMapOutputWithContext(ctx context.Context) ProjectFlowsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFlowsMapOutput)
}

type ProjectFlowsOutput struct{ *pulumi.OutputState }

func (ProjectFlowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFlows)(nil)).Elem()
}

func (o ProjectFlowsOutput) ToProjectFlowsOutput() ProjectFlowsOutput {
	return o
}

func (o ProjectFlowsOutput) ToProjectFlowsOutputWithContext(ctx context.Context) ProjectFlowsOutput {
	return o
}

// The JSON data defining the authentication flow configuration, including metadata, screens, contents, and references.
func (o ProjectFlowsOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFlows) string { return v.Data }).(pulumi.StringOutput)
}

type ProjectFlowsMapOutput struct{ *pulumi.OutputState }

func (ProjectFlowsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProjectFlows)(nil)).Elem()
}

func (o ProjectFlowsMapOutput) ToProjectFlowsMapOutput() ProjectFlowsMapOutput {
	return o
}

func (o ProjectFlowsMapOutput) ToProjectFlowsMapOutputWithContext(ctx context.Context) ProjectFlowsMapOutput {
	return o
}

func (o ProjectFlowsMapOutput) MapIndex(k pulumi.StringInput) ProjectFlowsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProjectFlows {
		return vs[0].(map[string]ProjectFlows)[vs[1].(string)]
	}).(ProjectFlowsOutput)
}

type ProjectInviteSettings struct {
	// Whether to include a magic link token in invitation messages.
	AddMagiclinkToken *bool `pulumi:"addMagiclinkToken"`
	// Custom URL to include in the message sent to invited users.
	InviteUrl *string `pulumi:"inviteUrl"`
	// Whether users must be invited before they can sign up to the project.
	RequireInvitation *bool `pulumi:"requireInvitation"`
	// Whether to send invitation emails to users.
	SendEmail *bool `pulumi:"sendEmail"`
	// Whether to send invitation SMS messages to users.
	SendText *bool `pulumi:"sendText"`
}

// ProjectInviteSettingsInput is an input type that accepts ProjectInviteSettingsArgs and ProjectInviteSettingsOutput values.
// You can construct a concrete instance of `ProjectInviteSettingsInput` via:
//
//	ProjectInviteSettingsArgs{...}
type ProjectInviteSettingsInput interface {
	pulumi.Input

	ToProjectInviteSettingsOutput() ProjectInviteSettingsOutput
	ToProjectInviteSettingsOutputWithContext(context.Context) ProjectInviteSettingsOutput
}

type ProjectInviteSettingsArgs struct {
	// Whether to include a magic link token in invitation messages.
	AddMagiclinkToken pulumi.BoolPtrInput `pulumi:"addMagiclinkToken"`
	// Custom URL to include in the message sent to invited users.
	InviteUrl pulumi.StringPtrInput `pulumi:"inviteUrl"`
	// Whether users must be invited before they can sign up to the project.
	RequireInvitation pulumi.BoolPtrInput `pulumi:"requireInvitation"`
	// Whether to send invitation emails to users.
	SendEmail pulumi.BoolPtrInput `pulumi:"sendEmail"`
	// Whether to send invitation SMS messages to users.
	SendText pulumi.BoolPtrInput `pulumi:"sendText"`
}

func (ProjectInviteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectInviteSettings)(nil)).Elem()
}

func (i ProjectInviteSettingsArgs) ToProjectInviteSettingsOutput() ProjectInviteSettingsOutput {
	return i.ToProjectInviteSettingsOutputWithContext(context.Background())
}

func (i ProjectInviteSettingsArgs) ToProjectInviteSettingsOutputWithContext(ctx context.Context) ProjectInviteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInviteSettingsOutput)
}

func (i ProjectInviteSettingsArgs) ToProjectInviteSettingsPtrOutput() ProjectInviteSettingsPtrOutput {
	return i.ToProjectInviteSettingsPtrOutputWithContext(context.Background())
}

func (i ProjectInviteSettingsArgs) ToProjectInviteSettingsPtrOutputWithContext(ctx context.Context) ProjectInviteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInviteSettingsOutput).ToProjectInviteSettingsPtrOutputWithContext(ctx)
}

// ProjectInviteSettingsPtrInput is an input type that accepts ProjectInviteSettingsArgs, ProjectInviteSettingsPtr and ProjectInviteSettingsPtrOutput values.
// You can construct a concrete instance of `ProjectInviteSettingsPtrInput` via:
//
//	        ProjectInviteSettingsArgs{...}
//
//	or:
//
//	        nil
type ProjectInviteSettingsPtrInput interface {
	pulumi.Input

	ToProjectInviteSettingsPtrOutput() ProjectInviteSettingsPtrOutput
	ToProjectInviteSettingsPtrOutputWithContext(context.Context) ProjectInviteSettingsPtrOutput
}

type projectInviteSettingsPtrType ProjectInviteSettingsArgs

func ProjectInviteSettingsPtr(v *ProjectInviteSettingsArgs) ProjectInviteSettingsPtrInput {
	return (*projectInviteSettingsPtrType)(v)
}

func (*projectInviteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectInviteSettings)(nil)).Elem()
}

func (i *projectInviteSettingsPtrType) ToProjectInviteSettingsPtrOutput() ProjectInviteSettingsPtrOutput {
	return i.ToProjectInviteSettingsPtrOutputWithContext(context.Background())
}

func (i *projectInviteSettingsPtrType) ToProjectInviteSettingsPtrOutputWithContext(ctx context.Context) ProjectInviteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectInviteSettingsPtrOutput)
}

type ProjectInviteSettingsOutput struct{ *pulumi.OutputState }

func (ProjectInviteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectInviteSettings)(nil)).Elem()
}

func (o ProjectInviteSettingsOutput) ToProjectInviteSettingsOutput() ProjectInviteSettingsOutput {
	return o
}

func (o ProjectInviteSettingsOutput) ToProjectInviteSettingsOutputWithContext(ctx context.Context) ProjectInviteSettingsOutput {
	return o
}

func (o ProjectInviteSettingsOutput) ToProjectInviteSettingsPtrOutput() ProjectInviteSettingsPtrOutput {
	return o.ToProjectInviteSettingsPtrOutputWithContext(context.Background())
}

func (o ProjectInviteSettingsOutput) ToProjectInviteSettingsPtrOutputWithContext(ctx context.Context) ProjectInviteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectInviteSettings) *ProjectInviteSettings {
		return &v
	}).(ProjectInviteSettingsPtrOutput)
}

// Whether to include a magic link token in invitation messages.
func (o ProjectInviteSettingsOutput) AddMagiclinkToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectInviteSettings) *bool { return v.AddMagiclinkToken }).(pulumi.BoolPtrOutput)
}

// Custom URL to include in the message sent to invited users.
func (o ProjectInviteSettingsOutput) InviteUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectInviteSettings) *string { return v.InviteUrl }).(pulumi.StringPtrOutput)
}

// Whether users must be invited before they can sign up to the project.
func (o ProjectInviteSettingsOutput) RequireInvitation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectInviteSettings) *bool { return v.RequireInvitation }).(pulumi.BoolPtrOutput)
}

// Whether to send invitation emails to users.
func (o ProjectInviteSettingsOutput) SendEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectInviteSettings) *bool { return v.SendEmail }).(pulumi.BoolPtrOutput)
}

// Whether to send invitation SMS messages to users.
func (o ProjectInviteSettingsOutput) SendText() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectInviteSettings) *bool { return v.SendText }).(pulumi.BoolPtrOutput)
}

type ProjectInviteSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProjectInviteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectInviteSettings)(nil)).Elem()
}

func (o ProjectInviteSettingsPtrOutput) ToProjectInviteSettingsPtrOutput() ProjectInviteSettingsPtrOutput {
	return o
}

func (o ProjectInviteSettingsPtrOutput) ToProjectInviteSettingsPtrOutputWithContext(ctx context.Context) ProjectInviteSettingsPtrOutput {
	return o
}

func (o ProjectInviteSettingsPtrOutput) Elem() ProjectInviteSettingsOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) ProjectInviteSettings {
		if v != nil {
			return *v
		}
		var ret ProjectInviteSettings
		return ret
	}).(ProjectInviteSettingsOutput)
}

// Whether to include a magic link token in invitation messages.
func (o ProjectInviteSettingsPtrOutput) AddMagiclinkToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AddMagiclinkToken
	}).(pulumi.BoolPtrOutput)
}

// Custom URL to include in the message sent to invited users.
func (o ProjectInviteSettingsPtrOutput) InviteUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) *string {
		if v == nil {
			return nil
		}
		return v.InviteUrl
	}).(pulumi.StringPtrOutput)
}

// Whether users must be invited before they can sign up to the project.
func (o ProjectInviteSettingsPtrOutput) RequireInvitation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireInvitation
	}).(pulumi.BoolPtrOutput)
}

// Whether to send invitation emails to users.
func (o ProjectInviteSettingsPtrOutput) SendEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SendEmail
	}).(pulumi.BoolPtrOutput)
}

// Whether to send invitation SMS messages to users.
func (o ProjectInviteSettingsPtrOutput) SendText() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectInviteSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SendText
	}).(pulumi.BoolPtrOutput)
}

type ProjectJwtTemplates struct {
	// A list of `Access Key` type JWT Templates.
	AccessKeyTemplates []ProjectJwtTemplatesAccessKeyTemplate `pulumi:"accessKeyTemplates"`
	// A list of `User` type JWT Templates.
	UserTemplates []ProjectJwtTemplatesUserTemplate `pulumi:"userTemplates"`
}

// ProjectJwtTemplatesInput is an input type that accepts ProjectJwtTemplatesArgs and ProjectJwtTemplatesOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesInput` via:
//
//	ProjectJwtTemplatesArgs{...}
type ProjectJwtTemplatesInput interface {
	pulumi.Input

	ToProjectJwtTemplatesOutput() ProjectJwtTemplatesOutput
	ToProjectJwtTemplatesOutputWithContext(context.Context) ProjectJwtTemplatesOutput
}

type ProjectJwtTemplatesArgs struct {
	// A list of `Access Key` type JWT Templates.
	AccessKeyTemplates ProjectJwtTemplatesAccessKeyTemplateArrayInput `pulumi:"accessKeyTemplates"`
	// A list of `User` type JWT Templates.
	UserTemplates ProjectJwtTemplatesUserTemplateArrayInput `pulumi:"userTemplates"`
}

func (ProjectJwtTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplates)(nil)).Elem()
}

func (i ProjectJwtTemplatesArgs) ToProjectJwtTemplatesOutput() ProjectJwtTemplatesOutput {
	return i.ToProjectJwtTemplatesOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesArgs) ToProjectJwtTemplatesOutputWithContext(ctx context.Context) ProjectJwtTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesOutput)
}

func (i ProjectJwtTemplatesArgs) ToProjectJwtTemplatesPtrOutput() ProjectJwtTemplatesPtrOutput {
	return i.ToProjectJwtTemplatesPtrOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesArgs) ToProjectJwtTemplatesPtrOutputWithContext(ctx context.Context) ProjectJwtTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesOutput).ToProjectJwtTemplatesPtrOutputWithContext(ctx)
}

// ProjectJwtTemplatesPtrInput is an input type that accepts ProjectJwtTemplatesArgs, ProjectJwtTemplatesPtr and ProjectJwtTemplatesPtrOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesPtrInput` via:
//
//	        ProjectJwtTemplatesArgs{...}
//
//	or:
//
//	        nil
type ProjectJwtTemplatesPtrInput interface {
	pulumi.Input

	ToProjectJwtTemplatesPtrOutput() ProjectJwtTemplatesPtrOutput
	ToProjectJwtTemplatesPtrOutputWithContext(context.Context) ProjectJwtTemplatesPtrOutput
}

type projectJwtTemplatesPtrType ProjectJwtTemplatesArgs

func ProjectJwtTemplatesPtr(v *ProjectJwtTemplatesArgs) ProjectJwtTemplatesPtrInput {
	return (*projectJwtTemplatesPtrType)(v)
}

func (*projectJwtTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectJwtTemplates)(nil)).Elem()
}

func (i *projectJwtTemplatesPtrType) ToProjectJwtTemplatesPtrOutput() ProjectJwtTemplatesPtrOutput {
	return i.ToProjectJwtTemplatesPtrOutputWithContext(context.Background())
}

func (i *projectJwtTemplatesPtrType) ToProjectJwtTemplatesPtrOutputWithContext(ctx context.Context) ProjectJwtTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesPtrOutput)
}

type ProjectJwtTemplatesOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplates)(nil)).Elem()
}

func (o ProjectJwtTemplatesOutput) ToProjectJwtTemplatesOutput() ProjectJwtTemplatesOutput {
	return o
}

func (o ProjectJwtTemplatesOutput) ToProjectJwtTemplatesOutputWithContext(ctx context.Context) ProjectJwtTemplatesOutput {
	return o
}

func (o ProjectJwtTemplatesOutput) ToProjectJwtTemplatesPtrOutput() ProjectJwtTemplatesPtrOutput {
	return o.ToProjectJwtTemplatesPtrOutputWithContext(context.Background())
}

func (o ProjectJwtTemplatesOutput) ToProjectJwtTemplatesPtrOutputWithContext(ctx context.Context) ProjectJwtTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectJwtTemplates) *ProjectJwtTemplates {
		return &v
	}).(ProjectJwtTemplatesPtrOutput)
}

// A list of `Access Key` type JWT Templates.
func (o ProjectJwtTemplatesOutput) AccessKeyTemplates() ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return o.ApplyT(func(v ProjectJwtTemplates) []ProjectJwtTemplatesAccessKeyTemplate { return v.AccessKeyTemplates }).(ProjectJwtTemplatesAccessKeyTemplateArrayOutput)
}

// A list of `User` type JWT Templates.
func (o ProjectJwtTemplatesOutput) UserTemplates() ProjectJwtTemplatesUserTemplateArrayOutput {
	return o.ApplyT(func(v ProjectJwtTemplates) []ProjectJwtTemplatesUserTemplate { return v.UserTemplates }).(ProjectJwtTemplatesUserTemplateArrayOutput)
}

type ProjectJwtTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectJwtTemplates)(nil)).Elem()
}

func (o ProjectJwtTemplatesPtrOutput) ToProjectJwtTemplatesPtrOutput() ProjectJwtTemplatesPtrOutput {
	return o
}

func (o ProjectJwtTemplatesPtrOutput) ToProjectJwtTemplatesPtrOutputWithContext(ctx context.Context) ProjectJwtTemplatesPtrOutput {
	return o
}

func (o ProjectJwtTemplatesPtrOutput) Elem() ProjectJwtTemplatesOutput {
	return o.ApplyT(func(v *ProjectJwtTemplates) ProjectJwtTemplates {
		if v != nil {
			return *v
		}
		var ret ProjectJwtTemplates
		return ret
	}).(ProjectJwtTemplatesOutput)
}

// A list of `Access Key` type JWT Templates.
func (o ProjectJwtTemplatesPtrOutput) AccessKeyTemplates() ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectJwtTemplates) []ProjectJwtTemplatesAccessKeyTemplate {
		if v == nil {
			return nil
		}
		return v.AccessKeyTemplates
	}).(ProjectJwtTemplatesAccessKeyTemplateArrayOutput)
}

// A list of `User` type JWT Templates.
func (o ProjectJwtTemplatesPtrOutput) UserTemplates() ProjectJwtTemplatesUserTemplateArrayOutput {
	return o.ApplyT(func(v *ProjectJwtTemplates) []ProjectJwtTemplatesUserTemplate {
		if v == nil {
			return nil
		}
		return v.UserTemplates
	}).(ProjectJwtTemplatesUserTemplateArrayOutput)
}

type ProjectJwtTemplatesAccessKeyTemplate struct {
	// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
	AuthSchema *string `pulumi:"authSchema"`
	// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
	AutoTenantClaim *bool `pulumi:"autoTenantClaim"`
	// Whether to use OIDC conformance for the JWT issuer field.
	ConformanceIssuer *bool `pulumi:"conformanceIssuer"`
	// Description of the JWT Template.
	Description *string `pulumi:"description"`
	// Policy for empty claims - `none`, `nil` or `delete`.
	EmptyClaimPolicy *string `pulumi:"emptyClaimPolicy"`
	// Whether to enforce that the JWT issuer matches the project configuration.
	EnforceIssuer *bool   `pulumi:"enforceIssuer"`
	Id            *string `pulumi:"id"`
	// Name of the JWT Template.
	Name string `pulumi:"name"`
	// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
	Template string `pulumi:"template"`
}

// ProjectJwtTemplatesAccessKeyTemplateInput is an input type that accepts ProjectJwtTemplatesAccessKeyTemplateArgs and ProjectJwtTemplatesAccessKeyTemplateOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesAccessKeyTemplateInput` via:
//
//	ProjectJwtTemplatesAccessKeyTemplateArgs{...}
type ProjectJwtTemplatesAccessKeyTemplateInput interface {
	pulumi.Input

	ToProjectJwtTemplatesAccessKeyTemplateOutput() ProjectJwtTemplatesAccessKeyTemplateOutput
	ToProjectJwtTemplatesAccessKeyTemplateOutputWithContext(context.Context) ProjectJwtTemplatesAccessKeyTemplateOutput
}

type ProjectJwtTemplatesAccessKeyTemplateArgs struct {
	// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
	AuthSchema pulumi.StringPtrInput `pulumi:"authSchema"`
	// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
	AutoTenantClaim pulumi.BoolPtrInput `pulumi:"autoTenantClaim"`
	// Whether to use OIDC conformance for the JWT issuer field.
	ConformanceIssuer pulumi.BoolPtrInput `pulumi:"conformanceIssuer"`
	// Description of the JWT Template.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Policy for empty claims - `none`, `nil` or `delete`.
	EmptyClaimPolicy pulumi.StringPtrInput `pulumi:"emptyClaimPolicy"`
	// Whether to enforce that the JWT issuer matches the project configuration.
	EnforceIssuer pulumi.BoolPtrInput   `pulumi:"enforceIssuer"`
	Id            pulumi.StringPtrInput `pulumi:"id"`
	// Name of the JWT Template.
	Name pulumi.StringInput `pulumi:"name"`
	// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
	Template pulumi.StringInput `pulumi:"template"`
}

func (ProjectJwtTemplatesAccessKeyTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplatesAccessKeyTemplate)(nil)).Elem()
}

func (i ProjectJwtTemplatesAccessKeyTemplateArgs) ToProjectJwtTemplatesAccessKeyTemplateOutput() ProjectJwtTemplatesAccessKeyTemplateOutput {
	return i.ToProjectJwtTemplatesAccessKeyTemplateOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesAccessKeyTemplateArgs) ToProjectJwtTemplatesAccessKeyTemplateOutputWithContext(ctx context.Context) ProjectJwtTemplatesAccessKeyTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesAccessKeyTemplateOutput)
}

// ProjectJwtTemplatesAccessKeyTemplateArrayInput is an input type that accepts ProjectJwtTemplatesAccessKeyTemplateArray and ProjectJwtTemplatesAccessKeyTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesAccessKeyTemplateArrayInput` via:
//
//	ProjectJwtTemplatesAccessKeyTemplateArray{ ProjectJwtTemplatesAccessKeyTemplateArgs{...} }
type ProjectJwtTemplatesAccessKeyTemplateArrayInput interface {
	pulumi.Input

	ToProjectJwtTemplatesAccessKeyTemplateArrayOutput() ProjectJwtTemplatesAccessKeyTemplateArrayOutput
	ToProjectJwtTemplatesAccessKeyTemplateArrayOutputWithContext(context.Context) ProjectJwtTemplatesAccessKeyTemplateArrayOutput
}

type ProjectJwtTemplatesAccessKeyTemplateArray []ProjectJwtTemplatesAccessKeyTemplateInput

func (ProjectJwtTemplatesAccessKeyTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectJwtTemplatesAccessKeyTemplate)(nil)).Elem()
}

func (i ProjectJwtTemplatesAccessKeyTemplateArray) ToProjectJwtTemplatesAccessKeyTemplateArrayOutput() ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return i.ToProjectJwtTemplatesAccessKeyTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesAccessKeyTemplateArray) ToProjectJwtTemplatesAccessKeyTemplateArrayOutputWithContext(ctx context.Context) ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesAccessKeyTemplateArrayOutput)
}

type ProjectJwtTemplatesAccessKeyTemplateOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesAccessKeyTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplatesAccessKeyTemplate)(nil)).Elem()
}

func (o ProjectJwtTemplatesAccessKeyTemplateOutput) ToProjectJwtTemplatesAccessKeyTemplateOutput() ProjectJwtTemplatesAccessKeyTemplateOutput {
	return o
}

func (o ProjectJwtTemplatesAccessKeyTemplateOutput) ToProjectJwtTemplatesAccessKeyTemplateOutputWithContext(ctx context.Context) ProjectJwtTemplatesAccessKeyTemplateOutput {
	return o
}

// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) AuthSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *string { return v.AuthSchema }).(pulumi.StringPtrOutput)
}

// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) AutoTenantClaim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *bool { return v.AutoTenantClaim }).(pulumi.BoolPtrOutput)
}

// Whether to use OIDC conformance for the JWT issuer field.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) ConformanceIssuer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *bool { return v.ConformanceIssuer }).(pulumi.BoolPtrOutput)
}

// Description of the JWT Template.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Policy for empty claims - `none`, `nil` or `delete`.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) EmptyClaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *string { return v.EmptyClaimPolicy }).(pulumi.StringPtrOutput)
}

// Whether to enforce that the JWT issuer matches the project configuration.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) EnforceIssuer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *bool { return v.EnforceIssuer }).(pulumi.BoolPtrOutput)
}

func (o ProjectJwtTemplatesAccessKeyTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the JWT Template.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
func (o ProjectJwtTemplatesAccessKeyTemplateOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesAccessKeyTemplate) string { return v.Template }).(pulumi.StringOutput)
}

type ProjectJwtTemplatesAccessKeyTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesAccessKeyTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectJwtTemplatesAccessKeyTemplate)(nil)).Elem()
}

func (o ProjectJwtTemplatesAccessKeyTemplateArrayOutput) ToProjectJwtTemplatesAccessKeyTemplateArrayOutput() ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return o
}

func (o ProjectJwtTemplatesAccessKeyTemplateArrayOutput) ToProjectJwtTemplatesAccessKeyTemplateArrayOutputWithContext(ctx context.Context) ProjectJwtTemplatesAccessKeyTemplateArrayOutput {
	return o
}

func (o ProjectJwtTemplatesAccessKeyTemplateArrayOutput) Index(i pulumi.IntInput) ProjectJwtTemplatesAccessKeyTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectJwtTemplatesAccessKeyTemplate {
		return vs[0].([]ProjectJwtTemplatesAccessKeyTemplate)[vs[1].(int)]
	}).(ProjectJwtTemplatesAccessKeyTemplateOutput)
}

type ProjectJwtTemplatesUserTemplate struct {
	// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
	AuthSchema *string `pulumi:"authSchema"`
	// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
	AutoTenantClaim *bool `pulumi:"autoTenantClaim"`
	// Whether to use OIDC conformance for the JWT issuer field.
	ConformanceIssuer *bool `pulumi:"conformanceIssuer"`
	// Description of the JWT Template.
	Description *string `pulumi:"description"`
	// Policy for empty claims - `none`, `nil` or `delete`.
	EmptyClaimPolicy *string `pulumi:"emptyClaimPolicy"`
	// Whether to enforce that the JWT issuer matches the project configuration.
	EnforceIssuer *bool   `pulumi:"enforceIssuer"`
	Id            *string `pulumi:"id"`
	// Name of the JWT Template.
	Name string `pulumi:"name"`
	// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
	Template string `pulumi:"template"`
}

// ProjectJwtTemplatesUserTemplateInput is an input type that accepts ProjectJwtTemplatesUserTemplateArgs and ProjectJwtTemplatesUserTemplateOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesUserTemplateInput` via:
//
//	ProjectJwtTemplatesUserTemplateArgs{...}
type ProjectJwtTemplatesUserTemplateInput interface {
	pulumi.Input

	ToProjectJwtTemplatesUserTemplateOutput() ProjectJwtTemplatesUserTemplateOutput
	ToProjectJwtTemplatesUserTemplateOutputWithContext(context.Context) ProjectJwtTemplatesUserTemplateOutput
}

type ProjectJwtTemplatesUserTemplateArgs struct {
	// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
	AuthSchema pulumi.StringPtrInput `pulumi:"authSchema"`
	// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
	AutoTenantClaim pulumi.BoolPtrInput `pulumi:"autoTenantClaim"`
	// Whether to use OIDC conformance for the JWT issuer field.
	ConformanceIssuer pulumi.BoolPtrInput `pulumi:"conformanceIssuer"`
	// Description of the JWT Template.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Policy for empty claims - `none`, `nil` or `delete`.
	EmptyClaimPolicy pulumi.StringPtrInput `pulumi:"emptyClaimPolicy"`
	// Whether to enforce that the JWT issuer matches the project configuration.
	EnforceIssuer pulumi.BoolPtrInput   `pulumi:"enforceIssuer"`
	Id            pulumi.StringPtrInput `pulumi:"id"`
	// Name of the JWT Template.
	Name pulumi.StringInput `pulumi:"name"`
	// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
	Template pulumi.StringInput `pulumi:"template"`
}

func (ProjectJwtTemplatesUserTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplatesUserTemplate)(nil)).Elem()
}

func (i ProjectJwtTemplatesUserTemplateArgs) ToProjectJwtTemplatesUserTemplateOutput() ProjectJwtTemplatesUserTemplateOutput {
	return i.ToProjectJwtTemplatesUserTemplateOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesUserTemplateArgs) ToProjectJwtTemplatesUserTemplateOutputWithContext(ctx context.Context) ProjectJwtTemplatesUserTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesUserTemplateOutput)
}

// ProjectJwtTemplatesUserTemplateArrayInput is an input type that accepts ProjectJwtTemplatesUserTemplateArray and ProjectJwtTemplatesUserTemplateArrayOutput values.
// You can construct a concrete instance of `ProjectJwtTemplatesUserTemplateArrayInput` via:
//
//	ProjectJwtTemplatesUserTemplateArray{ ProjectJwtTemplatesUserTemplateArgs{...} }
type ProjectJwtTemplatesUserTemplateArrayInput interface {
	pulumi.Input

	ToProjectJwtTemplatesUserTemplateArrayOutput() ProjectJwtTemplatesUserTemplateArrayOutput
	ToProjectJwtTemplatesUserTemplateArrayOutputWithContext(context.Context) ProjectJwtTemplatesUserTemplateArrayOutput
}

type ProjectJwtTemplatesUserTemplateArray []ProjectJwtTemplatesUserTemplateInput

func (ProjectJwtTemplatesUserTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectJwtTemplatesUserTemplate)(nil)).Elem()
}

func (i ProjectJwtTemplatesUserTemplateArray) ToProjectJwtTemplatesUserTemplateArrayOutput() ProjectJwtTemplatesUserTemplateArrayOutput {
	return i.ToProjectJwtTemplatesUserTemplateArrayOutputWithContext(context.Background())
}

func (i ProjectJwtTemplatesUserTemplateArray) ToProjectJwtTemplatesUserTemplateArrayOutputWithContext(ctx context.Context) ProjectJwtTemplatesUserTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectJwtTemplatesUserTemplateArrayOutput)
}

type ProjectJwtTemplatesUserTemplateOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesUserTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectJwtTemplatesUserTemplate)(nil)).Elem()
}

func (o ProjectJwtTemplatesUserTemplateOutput) ToProjectJwtTemplatesUserTemplateOutput() ProjectJwtTemplatesUserTemplateOutput {
	return o
}

func (o ProjectJwtTemplatesUserTemplateOutput) ToProjectJwtTemplatesUserTemplateOutputWithContext(ctx context.Context) ProjectJwtTemplatesUserTemplateOutput {
	return o
}

// The authorization claims format - `default`, `tenantOnly` or `none`. Read more about schema types [here](https://docs.descope.com/project-settings/jwt-templates).
func (o ProjectJwtTemplatesUserTemplateOutput) AuthSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *string { return v.AuthSchema }).(pulumi.StringPtrOutput)
}

// When a user is associated with a single tenant, the tenant will be set as the user's active tenant, using the `dct` (Descope Current Tenant) claim in their JWT.
func (o ProjectJwtTemplatesUserTemplateOutput) AutoTenantClaim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *bool { return v.AutoTenantClaim }).(pulumi.BoolPtrOutput)
}

// Whether to use OIDC conformance for the JWT issuer field.
func (o ProjectJwtTemplatesUserTemplateOutput) ConformanceIssuer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *bool { return v.ConformanceIssuer }).(pulumi.BoolPtrOutput)
}

// Description of the JWT Template.
func (o ProjectJwtTemplatesUserTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Policy for empty claims - `none`, `nil` or `delete`.
func (o ProjectJwtTemplatesUserTemplateOutput) EmptyClaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *string { return v.EmptyClaimPolicy }).(pulumi.StringPtrOutput)
}

// Whether to enforce that the JWT issuer matches the project configuration.
func (o ProjectJwtTemplatesUserTemplateOutput) EnforceIssuer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *bool { return v.EnforceIssuer }).(pulumi.BoolPtrOutput)
}

func (o ProjectJwtTemplatesUserTemplateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the JWT Template.
func (o ProjectJwtTemplatesUserTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) string { return v.Name }).(pulumi.StringOutput)
}

// The JSON template defining the structure and claims of the JWT token. This is expected to be a valid JSON object given as a `string` value.
func (o ProjectJwtTemplatesUserTemplateOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectJwtTemplatesUserTemplate) string { return v.Template }).(pulumi.StringOutput)
}

type ProjectJwtTemplatesUserTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProjectJwtTemplatesUserTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectJwtTemplatesUserTemplate)(nil)).Elem()
}

func (o ProjectJwtTemplatesUserTemplateArrayOutput) ToProjectJwtTemplatesUserTemplateArrayOutput() ProjectJwtTemplatesUserTemplateArrayOutput {
	return o
}

func (o ProjectJwtTemplatesUserTemplateArrayOutput) ToProjectJwtTemplatesUserTemplateArrayOutputWithContext(ctx context.Context) ProjectJwtTemplatesUserTemplateArrayOutput {
	return o
}

func (o ProjectJwtTemplatesUserTemplateArrayOutput) Index(i pulumi.IntInput) ProjectJwtTemplatesUserTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectJwtTemplatesUserTemplate {
		return vs[0].([]ProjectJwtTemplatesUserTemplate)[vs[1].(int)]
	}).(ProjectJwtTemplatesUserTemplateOutput)
}

type ProjectProjectSettings struct {
	// Name of the access key JWT Template.
	AccessKeyJwtTemplate *string `pulumi:"accessKeyJwtTemplate"`
	// The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
	AccessKeySessionTokenExpiration *string `pulumi:"accessKeySessionTokenExpiration"`
	// The URL which your application resides on.
	AppUrl *string `pulumi:"appUrl"`
	// The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
	ApprovedDomains []string `pulumi:"approvedDomains"`
	// A custom CNAME that's configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	CustomDomain *string `pulumi:"customDomain"`
	// Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
	DefaultNoSsoApps *bool `pulumi:"defaultNoSsoApps"`
	// Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
	EnableInactivity *bool `pulumi:"enableInactivity"`
	// The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
	InactivityTime *string `pulumi:"inactivityTime"`
	// The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	RefreshTokenCookieDomain *string `pulumi:"refreshTokenCookieDomain"`
	// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	RefreshTokenCookiePolicy *string `pulumi:"refreshTokenCookiePolicy"`
	// The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
	RefreshTokenExpiration *string `pulumi:"refreshTokenExpiration"`
	// Configure how refresh tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
	RefreshTokenResponseMethod *string `pulumi:"refreshTokenResponseMethod"`
	// Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
	RefreshTokenRotation *bool `pulumi:"refreshTokenRotation"`
	// Configure seamless migration of existing user sessions from another vendor to Descope.
	SessionMigration *ProjectProjectSettingsSessionMigration `pulumi:"sessionMigration"`
	// The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	SessionTokenCookieDomain *string `pulumi:"sessionTokenCookieDomain"`
	// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	SessionTokenCookiePolicy *string `pulumi:"sessionTokenCookiePolicy"`
	// The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
	SessionTokenExpiration *string `pulumi:"sessionTokenExpiration"`
	// Configure how sessions tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
	SessionTokenResponseMethod *string `pulumi:"sessionTokenResponseMethod"`
	// The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
	StepUpTokenExpiration *string `pulumi:"stepUpTokenExpiration"`
	// Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
	TestUsersLoginidRegexp *string `pulumi:"testUsersLoginidRegexp"`
	// A 6 digit static OTP code for use with test users.
	TestUsersStaticOtp *string `pulumi:"testUsersStaticOtp"`
	// The pattern of the verifiers that will be used for testing.
	TestUsersVerifierRegexp *string `pulumi:"testUsersVerifierRegexp"`
	// The expiry time for the trusted device token. The minimum value is "3 minutes".
	TrustedDeviceTokenExpiration *string `pulumi:"trustedDeviceTokenExpiration"`
	// Name of the user JWT Template.
	UserJwtTemplate *string `pulumi:"userJwtTemplate"`
}

// ProjectProjectSettingsInput is an input type that accepts ProjectProjectSettingsArgs and ProjectProjectSettingsOutput values.
// You can construct a concrete instance of `ProjectProjectSettingsInput` via:
//
//	ProjectProjectSettingsArgs{...}
type ProjectProjectSettingsInput interface {
	pulumi.Input

	ToProjectProjectSettingsOutput() ProjectProjectSettingsOutput
	ToProjectProjectSettingsOutputWithContext(context.Context) ProjectProjectSettingsOutput
}

type ProjectProjectSettingsArgs struct {
	// Name of the access key JWT Template.
	AccessKeyJwtTemplate pulumi.StringPtrInput `pulumi:"accessKeyJwtTemplate"`
	// The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
	AccessKeySessionTokenExpiration pulumi.StringPtrInput `pulumi:"accessKeySessionTokenExpiration"`
	// The URL which your application resides on.
	AppUrl pulumi.StringPtrInput `pulumi:"appUrl"`
	// The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
	ApprovedDomains pulumi.StringArrayInput `pulumi:"approvedDomains"`
	// A custom CNAME that's configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	CustomDomain pulumi.StringPtrInput `pulumi:"customDomain"`
	// Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
	DefaultNoSsoApps pulumi.BoolPtrInput `pulumi:"defaultNoSsoApps"`
	// Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
	EnableInactivity pulumi.BoolPtrInput `pulumi:"enableInactivity"`
	// The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
	InactivityTime pulumi.StringPtrInput `pulumi:"inactivityTime"`
	// The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	RefreshTokenCookieDomain pulumi.StringPtrInput `pulumi:"refreshTokenCookieDomain"`
	// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	RefreshTokenCookiePolicy pulumi.StringPtrInput `pulumi:"refreshTokenCookiePolicy"`
	// The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
	RefreshTokenExpiration pulumi.StringPtrInput `pulumi:"refreshTokenExpiration"`
	// Configure how refresh tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
	RefreshTokenResponseMethod pulumi.StringPtrInput `pulumi:"refreshTokenResponseMethod"`
	// Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
	RefreshTokenRotation pulumi.BoolPtrInput `pulumi:"refreshTokenRotation"`
	// Configure seamless migration of existing user sessions from another vendor to Descope.
	SessionMigration ProjectProjectSettingsSessionMigrationPtrInput `pulumi:"sessionMigration"`
	// The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	SessionTokenCookieDomain pulumi.StringPtrInput `pulumi:"sessionTokenCookieDomain"`
	// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
	SessionTokenCookiePolicy pulumi.StringPtrInput `pulumi:"sessionTokenCookiePolicy"`
	// The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
	SessionTokenExpiration pulumi.StringPtrInput `pulumi:"sessionTokenExpiration"`
	// Configure how sessions tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
	SessionTokenResponseMethod pulumi.StringPtrInput `pulumi:"sessionTokenResponseMethod"`
	// The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
	StepUpTokenExpiration pulumi.StringPtrInput `pulumi:"stepUpTokenExpiration"`
	// Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
	TestUsersLoginidRegexp pulumi.StringPtrInput `pulumi:"testUsersLoginidRegexp"`
	// A 6 digit static OTP code for use with test users.
	TestUsersStaticOtp pulumi.StringPtrInput `pulumi:"testUsersStaticOtp"`
	// The pattern of the verifiers that will be used for testing.
	TestUsersVerifierRegexp pulumi.StringPtrInput `pulumi:"testUsersVerifierRegexp"`
	// The expiry time for the trusted device token. The minimum value is "3 minutes".
	TrustedDeviceTokenExpiration pulumi.StringPtrInput `pulumi:"trustedDeviceTokenExpiration"`
	// Name of the user JWT Template.
	UserJwtTemplate pulumi.StringPtrInput `pulumi:"userJwtTemplate"`
}

func (ProjectProjectSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSettings)(nil)).Elem()
}

func (i ProjectProjectSettingsArgs) ToProjectProjectSettingsOutput() ProjectProjectSettingsOutput {
	return i.ToProjectProjectSettingsOutputWithContext(context.Background())
}

func (i ProjectProjectSettingsArgs) ToProjectProjectSettingsOutputWithContext(ctx context.Context) ProjectProjectSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsOutput)
}

func (i ProjectProjectSettingsArgs) ToProjectProjectSettingsPtrOutput() ProjectProjectSettingsPtrOutput {
	return i.ToProjectProjectSettingsPtrOutputWithContext(context.Background())
}

func (i ProjectProjectSettingsArgs) ToProjectProjectSettingsPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsOutput).ToProjectProjectSettingsPtrOutputWithContext(ctx)
}

// ProjectProjectSettingsPtrInput is an input type that accepts ProjectProjectSettingsArgs, ProjectProjectSettingsPtr and ProjectProjectSettingsPtrOutput values.
// You can construct a concrete instance of `ProjectProjectSettingsPtrInput` via:
//
//	        ProjectProjectSettingsArgs{...}
//
//	or:
//
//	        nil
type ProjectProjectSettingsPtrInput interface {
	pulumi.Input

	ToProjectProjectSettingsPtrOutput() ProjectProjectSettingsPtrOutput
	ToProjectProjectSettingsPtrOutputWithContext(context.Context) ProjectProjectSettingsPtrOutput
}

type projectProjectSettingsPtrType ProjectProjectSettingsArgs

func ProjectProjectSettingsPtr(v *ProjectProjectSettingsArgs) ProjectProjectSettingsPtrInput {
	return (*projectProjectSettingsPtrType)(v)
}

func (*projectProjectSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectSettings)(nil)).Elem()
}

func (i *projectProjectSettingsPtrType) ToProjectProjectSettingsPtrOutput() ProjectProjectSettingsPtrOutput {
	return i.ToProjectProjectSettingsPtrOutputWithContext(context.Background())
}

func (i *projectProjectSettingsPtrType) ToProjectProjectSettingsPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsPtrOutput)
}

type ProjectProjectSettingsOutput struct{ *pulumi.OutputState }

func (ProjectProjectSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSettings)(nil)).Elem()
}

func (o ProjectProjectSettingsOutput) ToProjectProjectSettingsOutput() ProjectProjectSettingsOutput {
	return o
}

func (o ProjectProjectSettingsOutput) ToProjectProjectSettingsOutputWithContext(ctx context.Context) ProjectProjectSettingsOutput {
	return o
}

func (o ProjectProjectSettingsOutput) ToProjectProjectSettingsPtrOutput() ProjectProjectSettingsPtrOutput {
	return o.ToProjectProjectSettingsPtrOutputWithContext(context.Background())
}

func (o ProjectProjectSettingsOutput) ToProjectProjectSettingsPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectProjectSettings) *ProjectProjectSettings {
		return &v
	}).(ProjectProjectSettingsPtrOutput)
}

// Name of the access key JWT Template.
func (o ProjectProjectSettingsOutput) AccessKeyJwtTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.AccessKeyJwtTemplate }).(pulumi.StringPtrOutput)
}

// The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
func (o ProjectProjectSettingsOutput) AccessKeySessionTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.AccessKeySessionTokenExpiration }).(pulumi.StringPtrOutput)
}

// The URL which your application resides on.
func (o ProjectProjectSettingsOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.AppUrl }).(pulumi.StringPtrOutput)
}

// The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
func (o ProjectProjectSettingsOutput) ApprovedDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectProjectSettings) []string { return v.ApprovedDomains }).(pulumi.StringArrayOutput)
}

// A custom CNAME that's configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.CustomDomain }).(pulumi.StringPtrOutput)
}

// Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
func (o ProjectProjectSettingsOutput) DefaultNoSsoApps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *bool { return v.DefaultNoSsoApps }).(pulumi.BoolPtrOutput)
}

// Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
func (o ProjectProjectSettingsOutput) EnableInactivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *bool { return v.EnableInactivity }).(pulumi.BoolPtrOutput)
}

// The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
func (o ProjectProjectSettingsOutput) InactivityTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.InactivityTime }).(pulumi.StringPtrOutput)
}

// The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsOutput) RefreshTokenCookieDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.RefreshTokenCookieDomain }).(pulumi.StringPtrOutput)
}

// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsOutput) RefreshTokenCookiePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.RefreshTokenCookiePolicy }).(pulumi.StringPtrOutput)
}

// The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
func (o ProjectProjectSettingsOutput) RefreshTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.RefreshTokenExpiration }).(pulumi.StringPtrOutput)
}

// Configure how refresh tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
func (o ProjectProjectSettingsOutput) RefreshTokenResponseMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.RefreshTokenResponseMethod }).(pulumi.StringPtrOutput)
}

// Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
func (o ProjectProjectSettingsOutput) RefreshTokenRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *bool { return v.RefreshTokenRotation }).(pulumi.BoolPtrOutput)
}

// Configure seamless migration of existing user sessions from another vendor to Descope.
func (o ProjectProjectSettingsOutput) SessionMigration() ProjectProjectSettingsSessionMigrationPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *ProjectProjectSettingsSessionMigration { return v.SessionMigration }).(ProjectProjectSettingsSessionMigrationPtrOutput)
}

// The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsOutput) SessionTokenCookieDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.SessionTokenCookieDomain }).(pulumi.StringPtrOutput)
}

// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsOutput) SessionTokenCookiePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.SessionTokenCookiePolicy }).(pulumi.StringPtrOutput)
}

// The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
func (o ProjectProjectSettingsOutput) SessionTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.SessionTokenExpiration }).(pulumi.StringPtrOutput)
}

// Configure how sessions tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
func (o ProjectProjectSettingsOutput) SessionTokenResponseMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.SessionTokenResponseMethod }).(pulumi.StringPtrOutput)
}

// The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
func (o ProjectProjectSettingsOutput) StepUpTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.StepUpTokenExpiration }).(pulumi.StringPtrOutput)
}

// Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
func (o ProjectProjectSettingsOutput) TestUsersLoginidRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.TestUsersLoginidRegexp }).(pulumi.StringPtrOutput)
}

// A 6 digit static OTP code for use with test users.
func (o ProjectProjectSettingsOutput) TestUsersStaticOtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.TestUsersStaticOtp }).(pulumi.StringPtrOutput)
}

// The pattern of the verifiers that will be used for testing.
func (o ProjectProjectSettingsOutput) TestUsersVerifierRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.TestUsersVerifierRegexp }).(pulumi.StringPtrOutput)
}

// The expiry time for the trusted device token. The minimum value is "3 minutes".
func (o ProjectProjectSettingsOutput) TrustedDeviceTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.TrustedDeviceTokenExpiration }).(pulumi.StringPtrOutput)
}

// Name of the user JWT Template.
func (o ProjectProjectSettingsOutput) UserJwtTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettings) *string { return v.UserJwtTemplate }).(pulumi.StringPtrOutput)
}

type ProjectProjectSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProjectProjectSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectSettings)(nil)).Elem()
}

func (o ProjectProjectSettingsPtrOutput) ToProjectProjectSettingsPtrOutput() ProjectProjectSettingsPtrOutput {
	return o
}

func (o ProjectProjectSettingsPtrOutput) ToProjectProjectSettingsPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsPtrOutput {
	return o
}

func (o ProjectProjectSettingsPtrOutput) Elem() ProjectProjectSettingsOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) ProjectProjectSettings {
		if v != nil {
			return *v
		}
		var ret ProjectProjectSettings
		return ret
	}).(ProjectProjectSettingsOutput)
}

// Name of the access key JWT Template.
func (o ProjectProjectSettingsPtrOutput) AccessKeyJwtTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyJwtTemplate
	}).(pulumi.StringPtrOutput)
}

// The expiry time for access key session tokens. Use values such as "10 minutes", "4 hours", etc. The value needs to be at least 3 minutes and can't be longer than 4 weeks.
func (o ProjectProjectSettingsPtrOutput) AccessKeySessionTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeySessionTokenExpiration
	}).(pulumi.StringPtrOutput)
}

// The URL which your application resides on.
func (o ProjectProjectSettingsPtrOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.AppUrl
	}).(pulumi.StringPtrOutput)
}

// The list of approved domains that are allowed for redirect and verification URLs for different authentication methods.
func (o ProjectProjectSettingsPtrOutput) ApprovedDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) []string {
		if v == nil {
			return nil
		}
		return v.ApprovedDomains
	}).(pulumi.StringArrayOutput)
}

// A custom CNAME that's configured to point to `cname.descope.com`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsPtrOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.CustomDomain
	}).(pulumi.StringPtrOutput)
}

// Define whether a user created with no federated apps, will have access to all apps, or will not have access to any app.
func (o ProjectProjectSettingsPtrOutput) DefaultNoSsoApps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *bool {
		if v == nil {
			return nil
		}
		return v.DefaultNoSsoApps
	}).(pulumi.BoolPtrOutput)
}

// Use `True` to enable session inactivity. To read more about session inactivity click [here](https://docs.descope.com/project-settings#session-inactivity).
func (o ProjectProjectSettingsPtrOutput) EnableInactivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableInactivity
	}).(pulumi.BoolPtrOutput)
}

// The session inactivity time. Use values such as "15 minutes", "1 hour", etc. The minimum value is "10 minutes".
func (o ProjectProjectSettingsPtrOutput) InactivityTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.InactivityTime
	}).(pulumi.StringPtrOutput)
}

// The domain name for refresh token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsPtrOutput) RefreshTokenCookieDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.RefreshTokenCookieDomain
	}).(pulumi.StringPtrOutput)
}

// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsPtrOutput) RefreshTokenCookiePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.RefreshTokenCookiePolicy
	}).(pulumi.StringPtrOutput)
}

// The expiry time for the refresh token, after which the user must log in again. Use values such as "4 weeks", "14 days", etc. The minimum value is "3 minutes".
func (o ProjectProjectSettingsPtrOutput) RefreshTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.RefreshTokenExpiration
	}).(pulumi.StringPtrOutput)
}

// Configure how refresh tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
func (o ProjectProjectSettingsPtrOutput) RefreshTokenResponseMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.RefreshTokenResponseMethod
	}).(pulumi.StringPtrOutput)
}

// Every time the user refreshes their session token via their refresh token, the refresh token itself is also updated to a new one.
func (o ProjectProjectSettingsPtrOutput) RefreshTokenRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RefreshTokenRotation
	}).(pulumi.BoolPtrOutput)
}

// Configure seamless migration of existing user sessions from another vendor to Descope.
func (o ProjectProjectSettingsPtrOutput) SessionMigration() ProjectProjectSettingsSessionMigrationPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *ProjectProjectSettingsSessionMigration {
		if v == nil {
			return nil
		}
		return v.SessionMigration
	}).(ProjectProjectSettingsSessionMigrationPtrOutput)
}

// The domain name for session token cookies. To read more about custom domain and cookie policy click [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsPtrOutput) SessionTokenCookieDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.SessionTokenCookieDomain
	}).(pulumi.StringPtrOutput)
}

// Use `strict`, `lax` or `none`. Read more about custom domains and cookie policy [here](https://docs.descope.com/how-to-deploy-to-production/custom-domain).
func (o ProjectProjectSettingsPtrOutput) SessionTokenCookiePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.SessionTokenCookiePolicy
	}).(pulumi.StringPtrOutput)
}

// The expiry time of the session token, used for accessing the application's resources. The value needs to be at least 3 minutes and can't be longer than the refresh token expiration.
func (o ProjectProjectSettingsPtrOutput) SessionTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.SessionTokenExpiration
	}).(pulumi.StringPtrOutput)
}

// Configure how sessions tokens are managed by the Descope SDKs. Must be either `responseBody` or `cookies`. The default value is `responseBody`.
func (o ProjectProjectSettingsPtrOutput) SessionTokenResponseMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.SessionTokenResponseMethod
	}).(pulumi.StringPtrOutput)
}

// The expiry time for the step up token, after which it will not be valid and the user will automatically go back to the session token.
func (o ProjectProjectSettingsPtrOutput) StepUpTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.StepUpTokenExpiration
	}).(pulumi.StringPtrOutput)
}

// Define a regular expression so that whenever a user is created with a matching login ID it will automatically be marked as a test user.
func (o ProjectProjectSettingsPtrOutput) TestUsersLoginidRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.TestUsersLoginidRegexp
	}).(pulumi.StringPtrOutput)
}

// A 6 digit static OTP code for use with test users.
func (o ProjectProjectSettingsPtrOutput) TestUsersStaticOtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.TestUsersStaticOtp
	}).(pulumi.StringPtrOutput)
}

// The pattern of the verifiers that will be used for testing.
func (o ProjectProjectSettingsPtrOutput) TestUsersVerifierRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.TestUsersVerifierRegexp
	}).(pulumi.StringPtrOutput)
}

// The expiry time for the trusted device token. The minimum value is "3 minutes".
func (o ProjectProjectSettingsPtrOutput) TrustedDeviceTokenExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrustedDeviceTokenExpiration
	}).(pulumi.StringPtrOutput)
}

// Name of the user JWT Template.
func (o ProjectProjectSettingsPtrOutput) UserJwtTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettings) *string {
		if v == nil {
			return nil
		}
		return v.UserJwtTemplate
	}).(pulumi.StringPtrOutput)
}

type ProjectProjectSettingsSessionMigration struct {
	// The audience value if needed by the vendor.
	Audience *string `pulumi:"audience"`
	// The unique client ID for the vendor.
	ClientId string `pulumi:"clientId"`
	// The domain value if needed by the vendor.
	Domain *string `pulumi:"domain"`
	// An issuer URL if needed by the vendor.
	Issuer *string `pulumi:"issuer"`
	// A set of attributes from the vendor's user that should be used to match with the Descope user's login ID.
	LoginidMatchedAttributes []string `pulumi:"loginidMatchedAttributes"`
	// The name of the vendor the sessions are migrated from, in all lowercase.
	Vendor string `pulumi:"vendor"`
}

// ProjectProjectSettingsSessionMigrationInput is an input type that accepts ProjectProjectSettingsSessionMigrationArgs and ProjectProjectSettingsSessionMigrationOutput values.
// You can construct a concrete instance of `ProjectProjectSettingsSessionMigrationInput` via:
//
//	ProjectProjectSettingsSessionMigrationArgs{...}
type ProjectProjectSettingsSessionMigrationInput interface {
	pulumi.Input

	ToProjectProjectSettingsSessionMigrationOutput() ProjectProjectSettingsSessionMigrationOutput
	ToProjectProjectSettingsSessionMigrationOutputWithContext(context.Context) ProjectProjectSettingsSessionMigrationOutput
}

type ProjectProjectSettingsSessionMigrationArgs struct {
	// The audience value if needed by the vendor.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// The unique client ID for the vendor.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The domain value if needed by the vendor.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// An issuer URL if needed by the vendor.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// A set of attributes from the vendor's user that should be used to match with the Descope user's login ID.
	LoginidMatchedAttributes pulumi.StringArrayInput `pulumi:"loginidMatchedAttributes"`
	// The name of the vendor the sessions are migrated from, in all lowercase.
	Vendor pulumi.StringInput `pulumi:"vendor"`
}

func (ProjectProjectSettingsSessionMigrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSettingsSessionMigration)(nil)).Elem()
}

func (i ProjectProjectSettingsSessionMigrationArgs) ToProjectProjectSettingsSessionMigrationOutput() ProjectProjectSettingsSessionMigrationOutput {
	return i.ToProjectProjectSettingsSessionMigrationOutputWithContext(context.Background())
}

func (i ProjectProjectSettingsSessionMigrationArgs) ToProjectProjectSettingsSessionMigrationOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsSessionMigrationOutput)
}

func (i ProjectProjectSettingsSessionMigrationArgs) ToProjectProjectSettingsSessionMigrationPtrOutput() ProjectProjectSettingsSessionMigrationPtrOutput {
	return i.ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(context.Background())
}

func (i ProjectProjectSettingsSessionMigrationArgs) ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsSessionMigrationOutput).ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(ctx)
}

// ProjectProjectSettingsSessionMigrationPtrInput is an input type that accepts ProjectProjectSettingsSessionMigrationArgs, ProjectProjectSettingsSessionMigrationPtr and ProjectProjectSettingsSessionMigrationPtrOutput values.
// You can construct a concrete instance of `ProjectProjectSettingsSessionMigrationPtrInput` via:
//
//	        ProjectProjectSettingsSessionMigrationArgs{...}
//
//	or:
//
//	        nil
type ProjectProjectSettingsSessionMigrationPtrInput interface {
	pulumi.Input

	ToProjectProjectSettingsSessionMigrationPtrOutput() ProjectProjectSettingsSessionMigrationPtrOutput
	ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(context.Context) ProjectProjectSettingsSessionMigrationPtrOutput
}

type projectProjectSettingsSessionMigrationPtrType ProjectProjectSettingsSessionMigrationArgs

func ProjectProjectSettingsSessionMigrationPtr(v *ProjectProjectSettingsSessionMigrationArgs) ProjectProjectSettingsSessionMigrationPtrInput {
	return (*projectProjectSettingsSessionMigrationPtrType)(v)
}

func (*projectProjectSettingsSessionMigrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectSettingsSessionMigration)(nil)).Elem()
}

func (i *projectProjectSettingsSessionMigrationPtrType) ToProjectProjectSettingsSessionMigrationPtrOutput() ProjectProjectSettingsSessionMigrationPtrOutput {
	return i.ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(context.Background())
}

func (i *projectProjectSettingsSessionMigrationPtrType) ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectProjectSettingsSessionMigrationPtrOutput)
}

type ProjectProjectSettingsSessionMigrationOutput struct{ *pulumi.OutputState }

func (ProjectProjectSettingsSessionMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProjectSettingsSessionMigration)(nil)).Elem()
}

func (o ProjectProjectSettingsSessionMigrationOutput) ToProjectProjectSettingsSessionMigrationOutput() ProjectProjectSettingsSessionMigrationOutput {
	return o
}

func (o ProjectProjectSettingsSessionMigrationOutput) ToProjectProjectSettingsSessionMigrationOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationOutput {
	return o
}

func (o ProjectProjectSettingsSessionMigrationOutput) ToProjectProjectSettingsSessionMigrationPtrOutput() ProjectProjectSettingsSessionMigrationPtrOutput {
	return o.ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(context.Background())
}

func (o ProjectProjectSettingsSessionMigrationOutput) ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectProjectSettingsSessionMigration) *ProjectProjectSettingsSessionMigration {
		return &v
	}).(ProjectProjectSettingsSessionMigrationPtrOutput)
}

// The audience value if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// The unique client ID for the vendor.
func (o ProjectProjectSettingsSessionMigrationOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) string { return v.ClientId }).(pulumi.StringOutput)
}

// The domain value if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// An issuer URL if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// A set of attributes from the vendor's user that should be used to match with the Descope user's login ID.
func (o ProjectProjectSettingsSessionMigrationOutput) LoginidMatchedAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) []string { return v.LoginidMatchedAttributes }).(pulumi.StringArrayOutput)
}

// The name of the vendor the sessions are migrated from, in all lowercase.
func (o ProjectProjectSettingsSessionMigrationOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProjectSettingsSessionMigration) string { return v.Vendor }).(pulumi.StringOutput)
}

type ProjectProjectSettingsSessionMigrationPtrOutput struct{ *pulumi.OutputState }

func (ProjectProjectSettingsSessionMigrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectProjectSettingsSessionMigration)(nil)).Elem()
}

func (o ProjectProjectSettingsSessionMigrationPtrOutput) ToProjectProjectSettingsSessionMigrationPtrOutput() ProjectProjectSettingsSessionMigrationPtrOutput {
	return o
}

func (o ProjectProjectSettingsSessionMigrationPtrOutput) ToProjectProjectSettingsSessionMigrationPtrOutputWithContext(ctx context.Context) ProjectProjectSettingsSessionMigrationPtrOutput {
	return o
}

func (o ProjectProjectSettingsSessionMigrationPtrOutput) Elem() ProjectProjectSettingsSessionMigrationOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) ProjectProjectSettingsSessionMigration {
		if v != nil {
			return *v
		}
		var ret ProjectProjectSettingsSessionMigration
		return ret
	}).(ProjectProjectSettingsSessionMigrationOutput)
}

// The audience value if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// The unique client ID for the vendor.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The domain value if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// An issuer URL if needed by the vendor.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// A set of attributes from the vendor's user that should be used to match with the Descope user's login ID.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) LoginidMatchedAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) []string {
		if v == nil {
			return nil
		}
		return v.LoginidMatchedAttributes
	}).(pulumi.StringArrayOutput)
}

// The name of the vendor the sessions are migrated from, in all lowercase.
func (o ProjectProjectSettingsSessionMigrationPtrOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectProjectSettingsSessionMigration) *string {
		if v == nil {
			return nil
		}
		return &v.Vendor
	}).(pulumi.StringPtrOutput)
}

type ProjectStyles struct {
	// The JSON data defining the visual styling and theme configuration used for authentication, widgets, etc.
	Data string `pulumi:"data"`
}

// ProjectStylesInput is an input type that accepts ProjectStylesArgs and ProjectStylesOutput values.
// You can construct a concrete instance of `ProjectStylesInput` via:
//
//	ProjectStylesArgs{...}
type ProjectStylesInput interface {
	pulumi.Input

	ToProjectStylesOutput() ProjectStylesOutput
	ToProjectStylesOutputWithContext(context.Context) ProjectStylesOutput
}

type ProjectStylesArgs struct {
	// The JSON data defining the visual styling and theme configuration used for authentication, widgets, etc.
	Data pulumi.StringInput `pulumi:"data"`
}

func (ProjectStylesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectStyles)(nil)).Elem()
}

func (i ProjectStylesArgs) ToProjectStylesOutput() ProjectStylesOutput {
	return i.ToProjectStylesOutputWithContext(context.Background())
}

func (i ProjectStylesArgs) ToProjectStylesOutputWithContext(ctx context.Context) ProjectStylesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectStylesOutput)
}

func (i ProjectStylesArgs) ToProjectStylesPtrOutput() ProjectStylesPtrOutput {
	return i.ToProjectStylesPtrOutputWithContext(context.Background())
}

func (i ProjectStylesArgs) ToProjectStylesPtrOutputWithContext(ctx context.Context) ProjectStylesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectStylesOutput).ToProjectStylesPtrOutputWithContext(ctx)
}

// ProjectStylesPtrInput is an input type that accepts ProjectStylesArgs, ProjectStylesPtr and ProjectStylesPtrOutput values.
// You can construct a concrete instance of `ProjectStylesPtrInput` via:
//
//	        ProjectStylesArgs{...}
//
//	or:
//
//	        nil
type ProjectStylesPtrInput interface {
	pulumi.Input

	ToProjectStylesPtrOutput() ProjectStylesPtrOutput
	ToProjectStylesPtrOutputWithContext(context.Context) ProjectStylesPtrOutput
}

type projectStylesPtrType ProjectStylesArgs

func ProjectStylesPtr(v *ProjectStylesArgs) ProjectStylesPtrInput {
	return (*projectStylesPtrType)(v)
}

func (*projectStylesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectStyles)(nil)).Elem()
}

func (i *projectStylesPtrType) ToProjectStylesPtrOutput() ProjectStylesPtrOutput {
	return i.ToProjectStylesPtrOutputWithContext(context.Background())
}

func (i *projectStylesPtrType) ToProjectStylesPtrOutputWithContext(ctx context.Context) ProjectStylesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectStylesPtrOutput)
}

type ProjectStylesOutput struct{ *pulumi.OutputState }

func (ProjectStylesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectStyles)(nil)).Elem()
}

func (o ProjectStylesOutput) ToProjectStylesOutput() ProjectStylesOutput {
	return o
}

func (o ProjectStylesOutput) ToProjectStylesOutputWithContext(ctx context.Context) ProjectStylesOutput {
	return o
}

func (o ProjectStylesOutput) ToProjectStylesPtrOutput() ProjectStylesPtrOutput {
	return o.ToProjectStylesPtrOutputWithContext(context.Background())
}

func (o ProjectStylesOutput) ToProjectStylesPtrOutputWithContext(ctx context.Context) ProjectStylesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectStyles) *ProjectStyles {
		return &v
	}).(ProjectStylesPtrOutput)
}

// The JSON data defining the visual styling and theme configuration used for authentication, widgets, etc.
func (o ProjectStylesOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectStyles) string { return v.Data }).(pulumi.StringOutput)
}

type ProjectStylesPtrOutput struct{ *pulumi.OutputState }

func (ProjectStylesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectStyles)(nil)).Elem()
}

func (o ProjectStylesPtrOutput) ToProjectStylesPtrOutput() ProjectStylesPtrOutput {
	return o
}

func (o ProjectStylesPtrOutput) ToProjectStylesPtrOutputWithContext(ctx context.Context) ProjectStylesPtrOutput {
	return o
}

func (o ProjectStylesPtrOutput) Elem() ProjectStylesOutput {
	return o.ApplyT(func(v *ProjectStyles) ProjectStyles {
		if v != nil {
			return *v
		}
		var ret ProjectStyles
		return ret
	}).(ProjectStylesOutput)
}

// The JSON data defining the visual styling and theme configuration used for authentication, widgets, etc.
func (o ProjectStylesPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectStyles) *string {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsInput)(nil)).Elem(), ProjectApplicationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsPtrInput)(nil)).Elem(), ProjectApplicationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsOidcApplicationInput)(nil)).Elem(), ProjectApplicationsOidcApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsOidcApplicationArrayInput)(nil)).Elem(), ProjectApplicationsOidcApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationInput)(nil)).Elem(), ProjectApplicationsSamlApplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationArrayInput)(nil)).Elem(), ProjectApplicationsSamlApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationAttributeMappingInput)(nil)).Elem(), ProjectApplicationsSamlApplicationAttributeMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationAttributeMappingArrayInput)(nil)).Elem(), ProjectApplicationsSamlApplicationAttributeMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationDynamicConfigurationInput)(nil)).Elem(), ProjectApplicationsSamlApplicationDynamicConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationDynamicConfigurationPtrInput)(nil)).Elem(), ProjectApplicationsSamlApplicationDynamicConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationManualConfigurationInput)(nil)).Elem(), ProjectApplicationsSamlApplicationManualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectApplicationsSamlApplicationManualConfigurationPtrInput)(nil)).Elem(), ProjectApplicationsSamlApplicationManualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesInput)(nil)).Elem(), ProjectAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesPtrInput)(nil)).Elem(), ProjectAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesTenantInput)(nil)).Elem(), ProjectAttributesTenantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesTenantArrayInput)(nil)).Elem(), ProjectAttributesTenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesTenantAuthorizationInput)(nil)).Elem(), ProjectAttributesTenantAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesTenantAuthorizationPtrInput)(nil)).Elem(), ProjectAttributesTenantAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesUserInput)(nil)).Elem(), ProjectAttributesUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesUserArrayInput)(nil)).Elem(), ProjectAttributesUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesUserWidgetAuthorizationInput)(nil)).Elem(), ProjectAttributesUserWidgetAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAttributesUserWidgetAuthorizationPtrInput)(nil)).Elem(), ProjectAttributesUserWidgetAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationInput)(nil)).Elem(), ProjectAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPtrInput)(nil)).Elem(), ProjectAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEmbeddedLinkInput)(nil)).Elem(), ProjectAuthenticationEmbeddedLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEmbeddedLinkPtrInput)(nil)).Elem(), ProjectAuthenticationEmbeddedLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkPtrInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServiceInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServicePtrInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkEmailServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationEnchantedLinkEmailServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkInput)(nil)).Elem(), ProjectAuthenticationMagicLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkPtrInput)(nil)).Elem(), ProjectAuthenticationMagicLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServiceInput)(nil)).Elem(), ProjectAuthenticationMagicLinkEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServicePtrInput)(nil)).Elem(), ProjectAuthenticationMagicLinkEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationMagicLinkEmailServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkEmailServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationMagicLinkEmailServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServiceInput)(nil)).Elem(), ProjectAuthenticationMagicLinkTextServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServicePtrInput)(nil)).Elem(), ProjectAuthenticationMagicLinkTextServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationMagicLinkTextServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationMagicLinkTextServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationMagicLinkTextServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthInput)(nil)).Elem(), ProjectAuthenticationOauthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthPtrInput)(nil)).Elem(), ProjectAuthenticationOauthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthCustomInput)(nil)).Elem(), ProjectAuthenticationOauthCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthCustomMapInput)(nil)).Elem(), ProjectAuthenticationOauthCustomMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthCustomProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthCustomProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthCustomProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthCustomProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemInput)(nil)).Elem(), ProjectAuthenticationOauthSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemAppleInput)(nil)).Elem(), ProjectAuthenticationOauthSystemAppleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemApplePtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemAppleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemAppleProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemAppleProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordInput)(nil)).Elem(), ProjectAuthenticationOauthSystemDiscordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemDiscordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemDiscordProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookInput)(nil)).Elem(), ProjectAuthenticationOauthSystemFacebookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemFacebookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemFacebookProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGithubProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGitlabArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGitlabProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogleInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGoogleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGooglePtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGoogleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogleProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemGoogleProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinInput)(nil)).Elem(), ProjectAuthenticationOauthSystemLinkedinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemLinkedinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftInput)(nil)).Elem(), ProjectAuthenticationOauthSystemMicrosoftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemMicrosoftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackInput)(nil)).Elem(), ProjectAuthenticationOauthSystemSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackProviderTokenManagementInput)(nil)).Elem(), ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrInput)(nil)).Elem(), ProjectAuthenticationOauthSystemSlackProviderTokenManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpInput)(nil)).Elem(), ProjectAuthenticationOtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpPtrInput)(nil)).Elem(), ProjectAuthenticationOtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpEmailServiceInput)(nil)).Elem(), ProjectAuthenticationOtpEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpEmailServicePtrInput)(nil)).Elem(), ProjectAuthenticationOtpEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpEmailServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationOtpEmailServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpEmailServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationOtpEmailServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpTextServiceInput)(nil)).Elem(), ProjectAuthenticationOtpTextServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpTextServicePtrInput)(nil)).Elem(), ProjectAuthenticationOtpTextServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpTextServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationOtpTextServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpTextServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationOtpTextServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpVoiceServiceInput)(nil)).Elem(), ProjectAuthenticationOtpVoiceServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpVoiceServicePtrInput)(nil)).Elem(), ProjectAuthenticationOtpVoiceServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpVoiceServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationOtpVoiceServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationOtpVoiceServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationOtpVoiceServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasskeysInput)(nil)).Elem(), ProjectAuthenticationPasskeysArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasskeysPtrInput)(nil)).Elem(), ProjectAuthenticationPasskeysArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordInput)(nil)).Elem(), ProjectAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordPtrInput)(nil)).Elem(), ProjectAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordEmailServiceInput)(nil)).Elem(), ProjectAuthenticationPasswordEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordEmailServicePtrInput)(nil)).Elem(), ProjectAuthenticationPasswordEmailServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordEmailServiceTemplateInput)(nil)).Elem(), ProjectAuthenticationPasswordEmailServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationPasswordEmailServiceTemplateArrayInput)(nil)).Elem(), ProjectAuthenticationPasswordEmailServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationSsoInput)(nil)).Elem(), ProjectAuthenticationSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationSsoPtrInput)(nil)).Elem(), ProjectAuthenticationSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationTotpInput)(nil)).Elem(), ProjectAuthenticationTotpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthenticationTotpPtrInput)(nil)).Elem(), ProjectAuthenticationTotpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationInput)(nil)).Elem(), ProjectAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationPtrInput)(nil)).Elem(), ProjectAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationPermissionInput)(nil)).Elem(), ProjectAuthorizationPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationPermissionArrayInput)(nil)).Elem(), ProjectAuthorizationPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationRoleInput)(nil)).Elem(), ProjectAuthorizationRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAuthorizationRoleArrayInput)(nil)).Elem(), ProjectAuthorizationRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsInput)(nil)).Elem(), ProjectConnectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsPtrInput)(nil)).Elem(), ProjectConnectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAbuseipdbInput)(nil)).Elem(), ProjectConnectorsAbuseipdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAbuseipdbArrayInput)(nil)).Elem(), ProjectConnectorsAbuseipdbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAmplitudeInput)(nil)).Elem(), ProjectConnectorsAmplitudeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAmplitudeArrayInput)(nil)).Elem(), ProjectConnectorsAmplitudeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookInput)(nil)).Elem(), ProjectConnectorsAuditWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookArrayInput)(nil)).Elem(), ProjectConnectorsAuditWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuditFilterInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationPtrInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationApiKeyInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationBasicInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAuditWebhookAuthenticationBasicPtrInput)(nil)).Elem(), ProjectConnectorsAuditWebhookAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsS3Input)(nil)).Elem(), ProjectConnectorsAwsS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsS3ArrayInput)(nil)).Elem(), ProjectConnectorsAwsS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsS3AuditFilterInput)(nil)).Elem(), ProjectConnectorsAwsS3AuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsS3AuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsAwsS3AuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsTranslateInput)(nil)).Elem(), ProjectConnectorsAwsTranslateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsAwsTranslateArrayInput)(nil)).Elem(), ProjectConnectorsAwsTranslateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsCybersixgillInput)(nil)).Elem(), ProjectConnectorsCybersixgillArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsCybersixgillArrayInput)(nil)).Elem(), ProjectConnectorsCybersixgillArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDatadogInput)(nil)).Elem(), ProjectConnectorsDatadogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDatadogArrayInput)(nil)).Elem(), ProjectConnectorsDatadogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDatadogAuditFilterInput)(nil)).Elem(), ProjectConnectorsDatadogAuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDatadogAuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsDatadogAuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDevrevGrowInput)(nil)).Elem(), ProjectConnectorsDevrevGrowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDevrevGrowArrayInput)(nil)).Elem(), ProjectConnectorsDevrevGrowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDoceboInput)(nil)).Elem(), ProjectConnectorsDoceboArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsDoceboArrayInput)(nil)).Elem(), ProjectConnectorsDoceboArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsEightByEightViberInput)(nil)).Elem(), ProjectConnectorsEightByEightViberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsEightByEightViberArrayInput)(nil)).Elem(), ProjectConnectorsEightByEightViberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsEightByEightWhatsappInput)(nil)).Elem(), ProjectConnectorsEightByEightWhatsappArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsEightByEightWhatsappArrayInput)(nil)).Elem(), ProjectConnectorsEightByEightWhatsappArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsElephantInput)(nil)).Elem(), ProjectConnectorsElephantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsElephantArrayInput)(nil)).Elem(), ProjectConnectorsElephantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpArrayInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationPtrInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationApiKeyInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationBasicInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrInput)(nil)).Elem(), ProjectConnectorsExternalTokenHttpAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFingerprintInput)(nil)).Elem(), ProjectConnectorsFingerprintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFingerprintArrayInput)(nil)).Elem(), ProjectConnectorsFingerprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFingerprintDescopeInput)(nil)).Elem(), ProjectConnectorsFingerprintDescopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFingerprintDescopeArrayInput)(nil)).Elem(), ProjectConnectorsFingerprintDescopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFirebaseAdminInput)(nil)).Elem(), ProjectConnectorsFirebaseAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsFirebaseAdminArrayInput)(nil)).Elem(), ProjectConnectorsFirebaseAdminArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsForterInput)(nil)).Elem(), ProjectConnectorsForterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsForterArrayInput)(nil)).Elem(), ProjectConnectorsForterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayArrayInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationPtrInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationBasicInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrInput)(nil)).Elem(), ProjectConnectorsGenericEmailGatewayAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayArrayInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationPtrInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationBasicInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrInput)(nil)).Elem(), ProjectConnectorsGenericSmsGatewayAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingInput)(nil)).Elem(), ProjectConnectorsGoogleCloudLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingArrayInput)(nil)).Elem(), ProjectConnectorsGoogleCloudLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingAuditFilterInput)(nil)).Elem(), ProjectConnectorsGoogleCloudLoggingAuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudLoggingAuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsGoogleCloudLoggingAuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudTranslationInput)(nil)).Elem(), ProjectConnectorsGoogleCloudTranslationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleCloudTranslationArrayInput)(nil)).Elem(), ProjectConnectorsGoogleCloudTranslationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleMapsPlaceInput)(nil)).Elem(), ProjectConnectorsGoogleMapsPlaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsGoogleMapsPlaceArrayInput)(nil)).Elem(), ProjectConnectorsGoogleMapsPlaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHibpInput)(nil)).Elem(), ProjectConnectorsHibpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHibpArrayInput)(nil)).Elem(), ProjectConnectorsHibpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpInput)(nil)).Elem(), ProjectConnectorsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpArrayInput)(nil)).Elem(), ProjectConnectorsHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationPtrInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationApiKeyInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationApiKeyPtrInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationApiKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationBasicInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHttpAuthenticationBasicPtrInput)(nil)).Elem(), ProjectConnectorsHttpAuthenticationBasicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHubspotInput)(nil)).Elem(), ProjectConnectorsHubspotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsHubspotArrayInput)(nil)).Elem(), ProjectConnectorsHubspotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsIncodeInput)(nil)).Elem(), ProjectConnectorsIncodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsIncodeArrayInput)(nil)).Elem(), ProjectConnectorsIncodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsIntercomInput)(nil)).Elem(), ProjectConnectorsIntercomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsIntercomArrayInput)(nil)).Elem(), ProjectConnectorsIntercomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsLokaliseInput)(nil)).Elem(), ProjectConnectorsLokaliseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsLokaliseArrayInput)(nil)).Elem(), ProjectConnectorsLokaliseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsMparticleInput)(nil)).Elem(), ProjectConnectorsMparticleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsMparticleArrayInput)(nil)).Elem(), ProjectConnectorsMparticleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsNewrelicInput)(nil)).Elem(), ProjectConnectorsNewrelicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsNewrelicArrayInput)(nil)).Elem(), ProjectConnectorsNewrelicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsNewrelicAuditFilterInput)(nil)).Elem(), ProjectConnectorsNewrelicAuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsNewrelicAuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsNewrelicAuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRadarInput)(nil)).Elem(), ProjectConnectorsRadarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRadarArrayInput)(nil)).Elem(), ProjectConnectorsRadarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRecaptchaInput)(nil)).Elem(), ProjectConnectorsRecaptchaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRecaptchaArrayInput)(nil)).Elem(), ProjectConnectorsRecaptchaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRecaptchaEnterpriseInput)(nil)).Elem(), ProjectConnectorsRecaptchaEnterpriseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRecaptchaEnterpriseArrayInput)(nil)).Elem(), ProjectConnectorsRecaptchaEnterpriseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRekognitionInput)(nil)).Elem(), ProjectConnectorsRekognitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsRekognitionArrayInput)(nil)).Elem(), ProjectConnectorsRekognitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSalesforceInput)(nil)).Elem(), ProjectConnectorsSalesforceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSalesforceArrayInput)(nil)).Elem(), ProjectConnectorsSalesforceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSalesforceMarketingCloudInput)(nil)).Elem(), ProjectConnectorsSalesforceMarketingCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSalesforceMarketingCloudArrayInput)(nil)).Elem(), ProjectConnectorsSalesforceMarketingCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSardineInput)(nil)).Elem(), ProjectConnectorsSardineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSardineArrayInput)(nil)).Elem(), ProjectConnectorsSardineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSeInput)(nil)).Elem(), ProjectConnectorsSeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSeArrayInput)(nil)).Elem(), ProjectConnectorsSeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSeSenderInput)(nil)).Elem(), ProjectConnectorsSeSenderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSegmentInput)(nil)).Elem(), ProjectConnectorsSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSegmentArrayInput)(nil)).Elem(), ProjectConnectorsSegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSendgridInput)(nil)).Elem(), ProjectConnectorsSendgridArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSendgridArrayInput)(nil)).Elem(), ProjectConnectorsSendgridArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSendgridAuthenticationInput)(nil)).Elem(), ProjectConnectorsSendgridAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSendgridSenderInput)(nil)).Elem(), ProjectConnectorsSendgridSenderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSlackInput)(nil)).Elem(), ProjectConnectorsSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSlackArrayInput)(nil)).Elem(), ProjectConnectorsSlackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmartlingInput)(nil)).Elem(), ProjectConnectorsSmartlingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmartlingArrayInput)(nil)).Elem(), ProjectConnectorsSmartlingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmtpInput)(nil)).Elem(), ProjectConnectorsSmtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmtpArrayInput)(nil)).Elem(), ProjectConnectorsSmtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmtpAuthenticationInput)(nil)).Elem(), ProjectConnectorsSmtpAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmtpSenderInput)(nil)).Elem(), ProjectConnectorsSmtpSenderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSmtpServerInput)(nil)).Elem(), ProjectConnectorsSmtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSnInput)(nil)).Elem(), ProjectConnectorsSnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSnArrayInput)(nil)).Elem(), ProjectConnectorsSnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSumologicInput)(nil)).Elem(), ProjectConnectorsSumologicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSumologicArrayInput)(nil)).Elem(), ProjectConnectorsSumologicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSumologicAuditFilterInput)(nil)).Elem(), ProjectConnectorsSumologicAuditFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSumologicAuditFilterArrayInput)(nil)).Elem(), ProjectConnectorsSumologicAuditFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSupabaseInput)(nil)).Elem(), ProjectConnectorsSupabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsSupabaseArrayInput)(nil)).Elem(), ProjectConnectorsSupabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTelesignInput)(nil)).Elem(), ProjectConnectorsTelesignArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTelesignArrayInput)(nil)).Elem(), ProjectConnectorsTelesignArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTraceableInput)(nil)).Elem(), ProjectConnectorsTraceableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTraceableArrayInput)(nil)).Elem(), ProjectConnectorsTraceableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTurnstileInput)(nil)).Elem(), ProjectConnectorsTurnstileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTurnstileArrayInput)(nil)).Elem(), ProjectConnectorsTurnstileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreInput)(nil)).Elem(), ProjectConnectorsTwilioCoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreArrayInput)(nil)).Elem(), ProjectConnectorsTwilioCoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreAuthenticationInput)(nil)).Elem(), ProjectConnectorsTwilioCoreAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersInput)(nil)).Elem(), ProjectConnectorsTwilioCoreSendersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersSmsInput)(nil)).Elem(), ProjectConnectorsTwilioCoreSendersSmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersVoiceInput)(nil)).Elem(), ProjectConnectorsTwilioCoreSendersVoiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioCoreSendersVoicePtrInput)(nil)).Elem(), ProjectConnectorsTwilioCoreSendersVoiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioVerifyInput)(nil)).Elem(), ProjectConnectorsTwilioVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioVerifyArrayInput)(nil)).Elem(), ProjectConnectorsTwilioVerifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConnectorsTwilioVerifyAuthenticationInput)(nil)).Elem(), ProjectConnectorsTwilioVerifyAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectFlowsInput)(nil)).Elem(), ProjectFlowsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectFlowsMapInput)(nil)).Elem(), ProjectFlowsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInviteSettingsInput)(nil)).Elem(), ProjectInviteSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInviteSettingsPtrInput)(nil)).Elem(), ProjectInviteSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesInput)(nil)).Elem(), ProjectJwtTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesPtrInput)(nil)).Elem(), ProjectJwtTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesAccessKeyTemplateInput)(nil)).Elem(), ProjectJwtTemplatesAccessKeyTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesAccessKeyTemplateArrayInput)(nil)).Elem(), ProjectJwtTemplatesAccessKeyTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesUserTemplateInput)(nil)).Elem(), ProjectJwtTemplatesUserTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectJwtTemplatesUserTemplateArrayInput)(nil)).Elem(), ProjectJwtTemplatesUserTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProjectSettingsInput)(nil)).Elem(), ProjectProjectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProjectSettingsPtrInput)(nil)).Elem(), ProjectProjectSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProjectSettingsSessionMigrationInput)(nil)).Elem(), ProjectProjectSettingsSessionMigrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectProjectSettingsSessionMigrationPtrInput)(nil)).Elem(), ProjectProjectSettingsSessionMigrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectStylesInput)(nil)).Elem(), ProjectStylesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectStylesPtrInput)(nil)).Elem(), ProjectStylesArgs{})
	pulumi.RegisterOutputType(ProjectApplicationsOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsPtrOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsOidcApplicationOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsOidcApplicationArrayOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationArrayOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationAttributeMappingOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationAttributeMappingArrayOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationDynamicConfigurationOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationDynamicConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationManualConfigurationOutput{})
	pulumi.RegisterOutputType(ProjectApplicationsSamlApplicationManualConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAttributesOutput{})
	pulumi.RegisterOutputType(ProjectAttributesPtrOutput{})
	pulumi.RegisterOutputType(ProjectAttributesTenantOutput{})
	pulumi.RegisterOutputType(ProjectAttributesTenantArrayOutput{})
	pulumi.RegisterOutputType(ProjectAttributesTenantAuthorizationOutput{})
	pulumi.RegisterOutputType(ProjectAttributesTenantAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAttributesUserOutput{})
	pulumi.RegisterOutputType(ProjectAttributesUserArrayOutput{})
	pulumi.RegisterOutputType(ProjectAttributesUserWidgetAuthorizationOutput{})
	pulumi.RegisterOutputType(ProjectAttributesUserWidgetAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEmbeddedLinkOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEmbeddedLinkPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkEmailServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkEmailServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkEmailServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationEnchantedLinkEmailServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkEmailServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkEmailServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkEmailServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkEmailServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkTextServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkTextServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkTextServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationMagicLinkTextServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthCustomOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthCustomMapOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthCustomProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthCustomProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemAppleOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemApplePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemAppleProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemAppleProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemDiscordOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemDiscordPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemDiscordProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemFacebookOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemFacebookPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemFacebookProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGithubOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGithubPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGithubProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGithubProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGitlabOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGitlabPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGitlabProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGoogleOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGooglePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemGoogleProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemLinkedinOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemLinkedinPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemLinkedinProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemMicrosoftOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemMicrosoftPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemMicrosoftProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemSlackOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemSlackPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemSlackProviderTokenManagementOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOauthSystemSlackProviderTokenManagementPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpEmailServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpEmailServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpEmailServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpEmailServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpTextServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpTextServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpTextServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpTextServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpVoiceServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpVoiceServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpVoiceServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationOtpVoiceServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasskeysOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasskeysPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordEmailServiceOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordEmailServicePtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordEmailServiceTemplateOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationPasswordEmailServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationSsoOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationSsoPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationTotpOutput{})
	pulumi.RegisterOutputType(ProjectAuthenticationTotpPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationPermissionOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationPermissionArrayOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationRoleOutput{})
	pulumi.RegisterOutputType(ProjectAuthorizationRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAbuseipdbOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAbuseipdbArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAmplitudeOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAmplitudeArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationApiKeyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationApiKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationBasicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAuditWebhookAuthenticationBasicPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsS3Output{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsS3ArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsS3AuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsS3AuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsTranslateOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsAwsTranslateArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsCybersixgillOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsCybersixgillArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDatadogOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDatadogArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDatadogAuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDatadogAuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDevrevGrowOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDevrevGrowArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDoceboOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsDoceboArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsEightByEightViberOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsEightByEightViberArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsEightByEightWhatsappOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsEightByEightWhatsappArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsElephantOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsElephantArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationApiKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationBasicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsExternalTokenHttpAuthenticationBasicPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFingerprintOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFingerprintArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFingerprintDescopeOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFingerprintDescopeArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFirebaseAdminOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsFirebaseAdminArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsForterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsForterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationApiKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationBasicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericEmailGatewayAuthenticationBasicPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationApiKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationBasicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGenericSmsGatewayAuthenticationBasicPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudLoggingOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudLoggingArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudLoggingAuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudLoggingAuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudTranslationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleCloudTranslationArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleMapsPlaceOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsGoogleMapsPlaceArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHibpOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHibpArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationApiKeyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationApiKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationBasicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHttpAuthenticationBasicPtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHubspotOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsHubspotArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsIncodeOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsIncodeArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsIntercomOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsIntercomArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsLokaliseOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsLokaliseArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsMparticleOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsMparticleArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsNewrelicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsNewrelicArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsNewrelicAuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsNewrelicAuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRadarOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRadarArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRecaptchaOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRecaptchaArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRecaptchaEnterpriseOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRecaptchaEnterpriseArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRekognitionOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsRekognitionArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSalesforceOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSalesforceArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSalesforceMarketingCloudOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSalesforceMarketingCloudArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSardineOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSardineArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSeOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSeArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSeSenderOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSegmentOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSegmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSendgridOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSendgridArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSendgridAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSendgridSenderOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSlackOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSlackArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmartlingOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmartlingArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmtpOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmtpArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmtpAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmtpSenderOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSmtpServerOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSnOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSnArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSumologicOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSumologicArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSumologicAuditFilterOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSumologicAuditFilterArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSupabaseOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsSupabaseArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTelesignOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTelesignArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTraceableOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTraceableArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTurnstileOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTurnstileArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreSendersOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreSendersSmsOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreSendersVoiceOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioCoreSendersVoicePtrOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioVerifyOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioVerifyArrayOutput{})
	pulumi.RegisterOutputType(ProjectConnectorsTwilioVerifyAuthenticationOutput{})
	pulumi.RegisterOutputType(ProjectFlowsOutput{})
	pulumi.RegisterOutputType(ProjectFlowsMapOutput{})
	pulumi.RegisterOutputType(ProjectInviteSettingsOutput{})
	pulumi.RegisterOutputType(ProjectInviteSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesAccessKeyTemplateOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesAccessKeyTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesUserTemplateOutput{})
	pulumi.RegisterOutputType(ProjectJwtTemplatesUserTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProjectProjectSettingsOutput{})
	pulumi.RegisterOutputType(ProjectProjectSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProjectProjectSettingsSessionMigrationOutput{})
	pulumi.RegisterOutputType(ProjectProjectSettingsSessionMigrationPtrOutput{})
	pulumi.RegisterOutputType(ProjectStylesOutput{})
	pulumi.RegisterOutputType(ProjectStylesPtrOutput{})
}
