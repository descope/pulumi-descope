// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package descope

import (
	"context"
	"reflect"

	"github.com/descope/pulumi-descope/sdk/go/descope/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	// Applications that are registered with the project.
	Applications ProjectApplicationsOutput `pulumi:"applications"`
	// Custom attributes that can be attached to users and tenants.
	Attributes ProjectAttributesOutput `pulumi:"attributes"`
	// Settings for each authentication method.
	Authentication ProjectAuthenticationOutput `pulumi:"authentication"`
	// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
	Authorization ProjectAuthorizationOutput `pulumi:"authorization"`
	// Enrich your flows by interacting with third party services.
	Connectors ProjectConnectorsOutput `pulumi:"connectors"`
	// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Custom authentication flows to use in this project.
	Flows          ProjectFlowsMapOutput       `pulumi:"flows"`
	InviteSettings ProjectInviteSettingsOutput `pulumi:"inviteSettings"`
	// Defines templates for JSON Web Tokens (JWT) used for authentication.
	JwtTemplates ProjectJwtTemplatesOutput `pulumi:"jwtTemplates"`
	// The name of the Descope project.
	Name pulumi.StringOutput `pulumi:"name"`
	// General settings for the Descope project.
	ProjectSettings ProjectProjectSettingsOutput `pulumi:"projectSettings"`
	// Custom styles that can be applied to the project's authentication flows.
	Styles ProjectStylesOutput `pulumi:"styles"`
	// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("descope:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("descope:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Applications that are registered with the project.
	Applications *ProjectApplications `pulumi:"applications"`
	// Custom attributes that can be attached to users and tenants.
	Attributes *ProjectAttributes `pulumi:"attributes"`
	// Settings for each authentication method.
	Authentication *ProjectAuthentication `pulumi:"authentication"`
	// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
	Authorization *ProjectAuthorization `pulumi:"authorization"`
	// Enrich your flows by interacting with third party services.
	Connectors *ProjectConnectors `pulumi:"connectors"`
	// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
	Environment *string `pulumi:"environment"`
	// Custom authentication flows to use in this project.
	Flows          map[string]ProjectFlows `pulumi:"flows"`
	InviteSettings *ProjectInviteSettings  `pulumi:"inviteSettings"`
	// Defines templates for JSON Web Tokens (JWT) used for authentication.
	JwtTemplates *ProjectJwtTemplates `pulumi:"jwtTemplates"`
	// The name of the Descope project.
	Name *string `pulumi:"name"`
	// General settings for the Descope project.
	ProjectSettings *ProjectProjectSettings `pulumi:"projectSettings"`
	// Custom styles that can be applied to the project's authentication flows.
	Styles *ProjectStyles `pulumi:"styles"`
	// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
	Tags []string `pulumi:"tags"`
}

type ProjectState struct {
	// Applications that are registered with the project.
	Applications ProjectApplicationsPtrInput
	// Custom attributes that can be attached to users and tenants.
	Attributes ProjectAttributesPtrInput
	// Settings for each authentication method.
	Authentication ProjectAuthenticationPtrInput
	// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
	Authorization ProjectAuthorizationPtrInput
	// Enrich your flows by interacting with third party services.
	Connectors ProjectConnectorsPtrInput
	// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
	Environment pulumi.StringPtrInput
	// Custom authentication flows to use in this project.
	Flows          ProjectFlowsMapInput
	InviteSettings ProjectInviteSettingsPtrInput
	// Defines templates for JSON Web Tokens (JWT) used for authentication.
	JwtTemplates ProjectJwtTemplatesPtrInput
	// The name of the Descope project.
	Name pulumi.StringPtrInput
	// General settings for the Descope project.
	ProjectSettings ProjectProjectSettingsPtrInput
	// Custom styles that can be applied to the project's authentication flows.
	Styles ProjectStylesPtrInput
	// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
	Tags pulumi.StringArrayInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Applications that are registered with the project.
	Applications *ProjectApplications `pulumi:"applications"`
	// Custom attributes that can be attached to users and tenants.
	Attributes *ProjectAttributes `pulumi:"attributes"`
	// Settings for each authentication method.
	Authentication *ProjectAuthentication `pulumi:"authentication"`
	// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
	Authorization *ProjectAuthorization `pulumi:"authorization"`
	// Enrich your flows by interacting with third party services.
	Connectors *ProjectConnectors `pulumi:"connectors"`
	// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
	Environment *string `pulumi:"environment"`
	// Custom authentication flows to use in this project.
	Flows          map[string]ProjectFlows `pulumi:"flows"`
	InviteSettings *ProjectInviteSettings  `pulumi:"inviteSettings"`
	// Defines templates for JSON Web Tokens (JWT) used for authentication.
	JwtTemplates *ProjectJwtTemplates `pulumi:"jwtTemplates"`
	// The name of the Descope project.
	Name *string `pulumi:"name"`
	// General settings for the Descope project.
	ProjectSettings *ProjectProjectSettings `pulumi:"projectSettings"`
	// Custom styles that can be applied to the project's authentication flows.
	Styles *ProjectStyles `pulumi:"styles"`
	// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Applications that are registered with the project.
	Applications ProjectApplicationsPtrInput
	// Custom attributes that can be attached to users and tenants.
	Attributes ProjectAttributesPtrInput
	// Settings for each authentication method.
	Authentication ProjectAuthenticationPtrInput
	// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
	Authorization ProjectAuthorizationPtrInput
	// Enrich your flows by interacting with third party services.
	Connectors ProjectConnectorsPtrInput
	// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
	Environment pulumi.StringPtrInput
	// Custom authentication flows to use in this project.
	Flows          ProjectFlowsMapInput
	InviteSettings ProjectInviteSettingsPtrInput
	// Defines templates for JSON Web Tokens (JWT) used for authentication.
	JwtTemplates ProjectJwtTemplatesPtrInput
	// The name of the Descope project.
	Name pulumi.StringPtrInput
	// General settings for the Descope project.
	ProjectSettings ProjectProjectSettingsPtrInput
	// Custom styles that can be applied to the project's authentication flows.
	Styles ProjectStylesPtrInput
	// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
	Tags pulumi.StringArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Applications that are registered with the project.
func (o ProjectOutput) Applications() ProjectApplicationsOutput {
	return o.ApplyT(func(v *Project) ProjectApplicationsOutput { return v.Applications }).(ProjectApplicationsOutput)
}

// Custom attributes that can be attached to users and tenants.
func (o ProjectOutput) Attributes() ProjectAttributesOutput {
	return o.ApplyT(func(v *Project) ProjectAttributesOutput { return v.Attributes }).(ProjectAttributesOutput)
}

// Settings for each authentication method.
func (o ProjectOutput) Authentication() ProjectAuthenticationOutput {
	return o.ApplyT(func(v *Project) ProjectAuthenticationOutput { return v.Authentication }).(ProjectAuthenticationOutput)
}

// Define Role-Based Access Control (RBAC) for your users by creating roles and permissions.
func (o ProjectOutput) Authorization() ProjectAuthorizationOutput {
	return o.ApplyT(func(v *Project) ProjectAuthorizationOutput { return v.Authorization }).(ProjectAuthorizationOutput)
}

// Enrich your flows by interacting with third party services.
func (o ProjectOutput) Connectors() ProjectConnectorsOutput {
	return o.ApplyT(func(v *Project) ProjectConnectorsOutput { return v.Connectors }).(ProjectConnectorsOutput)
}

// This can be set to `production` to mark production projects, otherwise this should be left unset for development or staging projects.
func (o ProjectOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Custom authentication flows to use in this project.
func (o ProjectOutput) Flows() ProjectFlowsMapOutput {
	return o.ApplyT(func(v *Project) ProjectFlowsMapOutput { return v.Flows }).(ProjectFlowsMapOutput)
}

func (o ProjectOutput) InviteSettings() ProjectInviteSettingsOutput {
	return o.ApplyT(func(v *Project) ProjectInviteSettingsOutput { return v.InviteSettings }).(ProjectInviteSettingsOutput)
}

// Defines templates for JSON Web Tokens (JWT) used for authentication.
func (o ProjectOutput) JwtTemplates() ProjectJwtTemplatesOutput {
	return o.ApplyT(func(v *Project) ProjectJwtTemplatesOutput { return v.JwtTemplates }).(ProjectJwtTemplatesOutput)
}

// The name of the Descope project.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// General settings for the Descope project.
func (o ProjectOutput) ProjectSettings() ProjectProjectSettingsOutput {
	return o.ApplyT(func(v *Project) ProjectProjectSettingsOutput { return v.ProjectSettings }).(ProjectProjectSettingsOutput)
}

// Custom styles that can be applied to the project's authentication flows.
func (o ProjectOutput) Styles() ProjectStylesOutput {
	return o.ApplyT(func(v *Project) ProjectStylesOutput { return v.Styles }).(ProjectStylesOutput)
}

// Descriptive tags for your Descope project. Each tag must be no more than 50 characters long.
func (o ProjectOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
